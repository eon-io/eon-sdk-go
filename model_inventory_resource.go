/*
Eon API

The Eon.io REST API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eon

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the InventoryResource type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &InventoryResource{}

// InventoryResource struct for InventoryResource
type InventoryResource struct {
	// Eon-assigned resource ID.
	Id string `json:"id"`
	// Date and time the resource record was created in Eon.
	CreatedTime *time.Time `json:"createdTime,omitempty"`
	// Date and time the resource was first discovered.
	DiscoveredTime *time.Time `json:"discoveredTime,omitempty"`
	// Date and time of the resource's latest Eon snapshot.
	LatestSnapshotTime *time.Time `json:"latestSnapshotTime,omitempty"`
	// Date and time of the resource's first Eon snapshot.
	OldestSnapshotTime *time.Time `json:"oldestSnapshotTime,omitempty"`
	BackupStatus BackupStatus `json:"backupStatus"`
	ActionRequiredDetails *ActionRequiredDetails `json:"actionRequiredDetails,omitempty"`
	// Cloud-provider-assigned resource ID.
	ProviderResourceId string `json:"providerResourceId"`
	// Resource display name.
	ResourceName string `json:"resourceName"`
	Classifications *Classifications `json:"classifications,omitempty"`
	// Cloud-provider-assigned account ID.
	ProviderAccountId string `json:"providerAccountId"`
	SnapshotStorage SnapshotStorage `json:"snapshotStorage"`
	SourceStorage SourceStorage `json:"sourceStorage"`
	ControlViolationCounts *ControlViolations `json:"controlViolationCounts,omitempty"`
	// Resource tags as key-value pairs. Both keys and values are strings. If a tag is a key with no value, the value is presented as an empty string.  **Example:** `{\"env\": \"prod\", \"app\": \"web\"}` 
	Tags map[string]string `json:"tags"`
	CloudProvider Provider `json:"cloudProvider"`
	ResourceType ResourceType `json:"resourceType"`
	// Region the resource is hosted in.
	Region string `json:"region"`
	// VPC the resource is in.
	Vpc *string `json:"vpc,omitempty"`
	// List of subnets the resource belongs to.
	Subnets []string `json:"subnets,omitempty"`
	ResourceProperties NullableResourceProperties `json:"resourceProperties,omitempty"`
}

type _InventoryResource InventoryResource

// NewInventoryResource instantiates a new InventoryResource object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInventoryResource(id string, backupStatus BackupStatus, providerResourceId string, resourceName string, providerAccountId string, snapshotStorage SnapshotStorage, sourceStorage SourceStorage, tags map[string]string, cloudProvider Provider, resourceType ResourceType, region string) *InventoryResource {
	this := InventoryResource{}
	this.Id = id
	this.BackupStatus = backupStatus
	this.ProviderResourceId = providerResourceId
	this.ResourceName = resourceName
	this.ProviderAccountId = providerAccountId
	this.SnapshotStorage = snapshotStorage
	this.SourceStorage = sourceStorage
	this.Tags = tags
	this.CloudProvider = cloudProvider
	this.ResourceType = resourceType
	this.Region = region
	return &this
}

// NewInventoryResourceWithDefaults instantiates a new InventoryResource object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInventoryResourceWithDefaults() *InventoryResource {
	this := InventoryResource{}
	return &this
}

// GetId returns the Id field value
func (o *InventoryResource) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *InventoryResource) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *InventoryResource) SetId(v string) {
	o.Id = v
}

// GetCreatedTime returns the CreatedTime field value if set, zero value otherwise.
func (o *InventoryResource) GetCreatedTime() time.Time {
	if o == nil || IsNil(o.CreatedTime) {
		var ret time.Time
		return ret
	}
	return *o.CreatedTime
}

// GetCreatedTimeOk returns a tuple with the CreatedTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InventoryResource) GetCreatedTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreatedTime) {
		return nil, false
	}
	return o.CreatedTime, true
}

// HasCreatedTime returns a boolean if a field has been set.
func (o *InventoryResource) HasCreatedTime() bool {
	if o != nil && !IsNil(o.CreatedTime) {
		return true
	}

	return false
}

// SetCreatedTime gets a reference to the given time.Time and assigns it to the CreatedTime field.
func (o *InventoryResource) SetCreatedTime(v time.Time) {
	o.CreatedTime = &v
}

// GetDiscoveredTime returns the DiscoveredTime field value if set, zero value otherwise.
func (o *InventoryResource) GetDiscoveredTime() time.Time {
	if o == nil || IsNil(o.DiscoveredTime) {
		var ret time.Time
		return ret
	}
	return *o.DiscoveredTime
}

// GetDiscoveredTimeOk returns a tuple with the DiscoveredTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InventoryResource) GetDiscoveredTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.DiscoveredTime) {
		return nil, false
	}
	return o.DiscoveredTime, true
}

// HasDiscoveredTime returns a boolean if a field has been set.
func (o *InventoryResource) HasDiscoveredTime() bool {
	if o != nil && !IsNil(o.DiscoveredTime) {
		return true
	}

	return false
}

// SetDiscoveredTime gets a reference to the given time.Time and assigns it to the DiscoveredTime field.
func (o *InventoryResource) SetDiscoveredTime(v time.Time) {
	o.DiscoveredTime = &v
}

// GetLatestSnapshotTime returns the LatestSnapshotTime field value if set, zero value otherwise.
func (o *InventoryResource) GetLatestSnapshotTime() time.Time {
	if o == nil || IsNil(o.LatestSnapshotTime) {
		var ret time.Time
		return ret
	}
	return *o.LatestSnapshotTime
}

// GetLatestSnapshotTimeOk returns a tuple with the LatestSnapshotTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InventoryResource) GetLatestSnapshotTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.LatestSnapshotTime) {
		return nil, false
	}
	return o.LatestSnapshotTime, true
}

// HasLatestSnapshotTime returns a boolean if a field has been set.
func (o *InventoryResource) HasLatestSnapshotTime() bool {
	if o != nil && !IsNil(o.LatestSnapshotTime) {
		return true
	}

	return false
}

// SetLatestSnapshotTime gets a reference to the given time.Time and assigns it to the LatestSnapshotTime field.
func (o *InventoryResource) SetLatestSnapshotTime(v time.Time) {
	o.LatestSnapshotTime = &v
}

// GetOldestSnapshotTime returns the OldestSnapshotTime field value if set, zero value otherwise.
func (o *InventoryResource) GetOldestSnapshotTime() time.Time {
	if o == nil || IsNil(o.OldestSnapshotTime) {
		var ret time.Time
		return ret
	}
	return *o.OldestSnapshotTime
}

// GetOldestSnapshotTimeOk returns a tuple with the OldestSnapshotTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InventoryResource) GetOldestSnapshotTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.OldestSnapshotTime) {
		return nil, false
	}
	return o.OldestSnapshotTime, true
}

// HasOldestSnapshotTime returns a boolean if a field has been set.
func (o *InventoryResource) HasOldestSnapshotTime() bool {
	if o != nil && !IsNil(o.OldestSnapshotTime) {
		return true
	}

	return false
}

// SetOldestSnapshotTime gets a reference to the given time.Time and assigns it to the OldestSnapshotTime field.
func (o *InventoryResource) SetOldestSnapshotTime(v time.Time) {
	o.OldestSnapshotTime = &v
}

// GetBackupStatus returns the BackupStatus field value
func (o *InventoryResource) GetBackupStatus() BackupStatus {
	if o == nil {
		var ret BackupStatus
		return ret
	}

	return o.BackupStatus
}

// GetBackupStatusOk returns a tuple with the BackupStatus field value
// and a boolean to check if the value has been set.
func (o *InventoryResource) GetBackupStatusOk() (*BackupStatus, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BackupStatus, true
}

// SetBackupStatus sets field value
func (o *InventoryResource) SetBackupStatus(v BackupStatus) {
	o.BackupStatus = v
}

// GetActionRequiredDetails returns the ActionRequiredDetails field value if set, zero value otherwise.
func (o *InventoryResource) GetActionRequiredDetails() ActionRequiredDetails {
	if o == nil || IsNil(o.ActionRequiredDetails) {
		var ret ActionRequiredDetails
		return ret
	}
	return *o.ActionRequiredDetails
}

// GetActionRequiredDetailsOk returns a tuple with the ActionRequiredDetails field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InventoryResource) GetActionRequiredDetailsOk() (*ActionRequiredDetails, bool) {
	if o == nil || IsNil(o.ActionRequiredDetails) {
		return nil, false
	}
	return o.ActionRequiredDetails, true
}

// HasActionRequiredDetails returns a boolean if a field has been set.
func (o *InventoryResource) HasActionRequiredDetails() bool {
	if o != nil && !IsNil(o.ActionRequiredDetails) {
		return true
	}

	return false
}

// SetActionRequiredDetails gets a reference to the given ActionRequiredDetails and assigns it to the ActionRequiredDetails field.
func (o *InventoryResource) SetActionRequiredDetails(v ActionRequiredDetails) {
	o.ActionRequiredDetails = &v
}

// GetProviderResourceId returns the ProviderResourceId field value
func (o *InventoryResource) GetProviderResourceId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ProviderResourceId
}

// GetProviderResourceIdOk returns a tuple with the ProviderResourceId field value
// and a boolean to check if the value has been set.
func (o *InventoryResource) GetProviderResourceIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProviderResourceId, true
}

// SetProviderResourceId sets field value
func (o *InventoryResource) SetProviderResourceId(v string) {
	o.ProviderResourceId = v
}

// GetResourceName returns the ResourceName field value
func (o *InventoryResource) GetResourceName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ResourceName
}

// GetResourceNameOk returns a tuple with the ResourceName field value
// and a boolean to check if the value has been set.
func (o *InventoryResource) GetResourceNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ResourceName, true
}

// SetResourceName sets field value
func (o *InventoryResource) SetResourceName(v string) {
	o.ResourceName = v
}

// GetClassifications returns the Classifications field value if set, zero value otherwise.
func (o *InventoryResource) GetClassifications() Classifications {
	if o == nil || IsNil(o.Classifications) {
		var ret Classifications
		return ret
	}
	return *o.Classifications
}

// GetClassificationsOk returns a tuple with the Classifications field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InventoryResource) GetClassificationsOk() (*Classifications, bool) {
	if o == nil || IsNil(o.Classifications) {
		return nil, false
	}
	return o.Classifications, true
}

// HasClassifications returns a boolean if a field has been set.
func (o *InventoryResource) HasClassifications() bool {
	if o != nil && !IsNil(o.Classifications) {
		return true
	}

	return false
}

// SetClassifications gets a reference to the given Classifications and assigns it to the Classifications field.
func (o *InventoryResource) SetClassifications(v Classifications) {
	o.Classifications = &v
}

// GetProviderAccountId returns the ProviderAccountId field value
func (o *InventoryResource) GetProviderAccountId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ProviderAccountId
}

// GetProviderAccountIdOk returns a tuple with the ProviderAccountId field value
// and a boolean to check if the value has been set.
func (o *InventoryResource) GetProviderAccountIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProviderAccountId, true
}

// SetProviderAccountId sets field value
func (o *InventoryResource) SetProviderAccountId(v string) {
	o.ProviderAccountId = v
}

// GetSnapshotStorage returns the SnapshotStorage field value
func (o *InventoryResource) GetSnapshotStorage() SnapshotStorage {
	if o == nil {
		var ret SnapshotStorage
		return ret
	}

	return o.SnapshotStorage
}

// GetSnapshotStorageOk returns a tuple with the SnapshotStorage field value
// and a boolean to check if the value has been set.
func (o *InventoryResource) GetSnapshotStorageOk() (*SnapshotStorage, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SnapshotStorage, true
}

// SetSnapshotStorage sets field value
func (o *InventoryResource) SetSnapshotStorage(v SnapshotStorage) {
	o.SnapshotStorage = v
}

// GetSourceStorage returns the SourceStorage field value
func (o *InventoryResource) GetSourceStorage() SourceStorage {
	if o == nil {
		var ret SourceStorage
		return ret
	}

	return o.SourceStorage
}

// GetSourceStorageOk returns a tuple with the SourceStorage field value
// and a boolean to check if the value has been set.
func (o *InventoryResource) GetSourceStorageOk() (*SourceStorage, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SourceStorage, true
}

// SetSourceStorage sets field value
func (o *InventoryResource) SetSourceStorage(v SourceStorage) {
	o.SourceStorage = v
}

// GetControlViolationCounts returns the ControlViolationCounts field value if set, zero value otherwise.
func (o *InventoryResource) GetControlViolationCounts() ControlViolations {
	if o == nil || IsNil(o.ControlViolationCounts) {
		var ret ControlViolations
		return ret
	}
	return *o.ControlViolationCounts
}

// GetControlViolationCountsOk returns a tuple with the ControlViolationCounts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InventoryResource) GetControlViolationCountsOk() (*ControlViolations, bool) {
	if o == nil || IsNil(o.ControlViolationCounts) {
		return nil, false
	}
	return o.ControlViolationCounts, true
}

// HasControlViolationCounts returns a boolean if a field has been set.
func (o *InventoryResource) HasControlViolationCounts() bool {
	if o != nil && !IsNil(o.ControlViolationCounts) {
		return true
	}

	return false
}

// SetControlViolationCounts gets a reference to the given ControlViolations and assigns it to the ControlViolationCounts field.
func (o *InventoryResource) SetControlViolationCounts(v ControlViolations) {
	o.ControlViolationCounts = &v
}

// GetTags returns the Tags field value
func (o *InventoryResource) GetTags() map[string]string {
	if o == nil {
		var ret map[string]string
		return ret
	}

	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value
// and a boolean to check if the value has been set.
func (o *InventoryResource) GetTagsOk() (*map[string]string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Tags, true
}

// SetTags sets field value
func (o *InventoryResource) SetTags(v map[string]string) {
	o.Tags = v
}

// GetCloudProvider returns the CloudProvider field value
func (o *InventoryResource) GetCloudProvider() Provider {
	if o == nil {
		var ret Provider
		return ret
	}

	return o.CloudProvider
}

// GetCloudProviderOk returns a tuple with the CloudProvider field value
// and a boolean to check if the value has been set.
func (o *InventoryResource) GetCloudProviderOk() (*Provider, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CloudProvider, true
}

// SetCloudProvider sets field value
func (o *InventoryResource) SetCloudProvider(v Provider) {
	o.CloudProvider = v
}

// GetResourceType returns the ResourceType field value
func (o *InventoryResource) GetResourceType() ResourceType {
	if o == nil {
		var ret ResourceType
		return ret
	}

	return o.ResourceType
}

// GetResourceTypeOk returns a tuple with the ResourceType field value
// and a boolean to check if the value has been set.
func (o *InventoryResource) GetResourceTypeOk() (*ResourceType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ResourceType, true
}

// SetResourceType sets field value
func (o *InventoryResource) SetResourceType(v ResourceType) {
	o.ResourceType = v
}

// GetRegion returns the Region field value
func (o *InventoryResource) GetRegion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Region
}

// GetRegionOk returns a tuple with the Region field value
// and a boolean to check if the value has been set.
func (o *InventoryResource) GetRegionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Region, true
}

// SetRegion sets field value
func (o *InventoryResource) SetRegion(v string) {
	o.Region = v
}

// GetVpc returns the Vpc field value if set, zero value otherwise.
func (o *InventoryResource) GetVpc() string {
	if o == nil || IsNil(o.Vpc) {
		var ret string
		return ret
	}
	return *o.Vpc
}

// GetVpcOk returns a tuple with the Vpc field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InventoryResource) GetVpcOk() (*string, bool) {
	if o == nil || IsNil(o.Vpc) {
		return nil, false
	}
	return o.Vpc, true
}

// HasVpc returns a boolean if a field has been set.
func (o *InventoryResource) HasVpc() bool {
	if o != nil && !IsNil(o.Vpc) {
		return true
	}

	return false
}

// SetVpc gets a reference to the given string and assigns it to the Vpc field.
func (o *InventoryResource) SetVpc(v string) {
	o.Vpc = &v
}

// GetSubnets returns the Subnets field value if set, zero value otherwise.
func (o *InventoryResource) GetSubnets() []string {
	if o == nil || IsNil(o.Subnets) {
		var ret []string
		return ret
	}
	return o.Subnets
}

// GetSubnetsOk returns a tuple with the Subnets field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InventoryResource) GetSubnetsOk() ([]string, bool) {
	if o == nil || IsNil(o.Subnets) {
		return nil, false
	}
	return o.Subnets, true
}

// HasSubnets returns a boolean if a field has been set.
func (o *InventoryResource) HasSubnets() bool {
	if o != nil && !IsNil(o.Subnets) {
		return true
	}

	return false
}

// SetSubnets gets a reference to the given []string and assigns it to the Subnets field.
func (o *InventoryResource) SetSubnets(v []string) {
	o.Subnets = v
}

// GetResourceProperties returns the ResourceProperties field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *InventoryResource) GetResourceProperties() ResourceProperties {
	if o == nil || IsNil(o.ResourceProperties.Get()) {
		var ret ResourceProperties
		return ret
	}
	return *o.ResourceProperties.Get()
}

// GetResourcePropertiesOk returns a tuple with the ResourceProperties field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *InventoryResource) GetResourcePropertiesOk() (*ResourceProperties, bool) {
	if o == nil {
		return nil, false
	}
	return o.ResourceProperties.Get(), o.ResourceProperties.IsSet()
}

// HasResourceProperties returns a boolean if a field has been set.
func (o *InventoryResource) HasResourceProperties() bool {
	if o != nil && o.ResourceProperties.IsSet() {
		return true
	}

	return false
}

// SetResourceProperties gets a reference to the given NullableResourceProperties and assigns it to the ResourceProperties field.
func (o *InventoryResource) SetResourceProperties(v ResourceProperties) {
	o.ResourceProperties.Set(&v)
}
// SetResourcePropertiesNil sets the value for ResourceProperties to be an explicit nil
func (o *InventoryResource) SetResourcePropertiesNil() {
	o.ResourceProperties.Set(nil)
}

// UnsetResourceProperties ensures that no value is present for ResourceProperties, not even an explicit nil
func (o *InventoryResource) UnsetResourceProperties() {
	o.ResourceProperties.Unset()
}

func (o InventoryResource) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o InventoryResource) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	if !IsNil(o.CreatedTime) {
		toSerialize["createdTime"] = o.CreatedTime
	}
	if !IsNil(o.DiscoveredTime) {
		toSerialize["discoveredTime"] = o.DiscoveredTime
	}
	if !IsNil(o.LatestSnapshotTime) {
		toSerialize["latestSnapshotTime"] = o.LatestSnapshotTime
	}
	if !IsNil(o.OldestSnapshotTime) {
		toSerialize["oldestSnapshotTime"] = o.OldestSnapshotTime
	}
	toSerialize["backupStatus"] = o.BackupStatus
	if !IsNil(o.ActionRequiredDetails) {
		toSerialize["actionRequiredDetails"] = o.ActionRequiredDetails
	}
	toSerialize["providerResourceId"] = o.ProviderResourceId
	toSerialize["resourceName"] = o.ResourceName
	if !IsNil(o.Classifications) {
		toSerialize["classifications"] = o.Classifications
	}
	toSerialize["providerAccountId"] = o.ProviderAccountId
	toSerialize["snapshotStorage"] = o.SnapshotStorage
	toSerialize["sourceStorage"] = o.SourceStorage
	if !IsNil(o.ControlViolationCounts) {
		toSerialize["controlViolationCounts"] = o.ControlViolationCounts
	}
	toSerialize["tags"] = o.Tags
	toSerialize["cloudProvider"] = o.CloudProvider
	toSerialize["resourceType"] = o.ResourceType
	toSerialize["region"] = o.Region
	if !IsNil(o.Vpc) {
		toSerialize["vpc"] = o.Vpc
	}
	if !IsNil(o.Subnets) {
		toSerialize["subnets"] = o.Subnets
	}
	if o.ResourceProperties.IsSet() {
		toSerialize["resourceProperties"] = o.ResourceProperties.Get()
	}
	return toSerialize, nil
}

func (o *InventoryResource) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"backupStatus",
		"providerResourceId",
		"resourceName",
		"providerAccountId",
		"snapshotStorage",
		"sourceStorage",
		"tags",
		"cloudProvider",
		"resourceType",
		"region",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varInventoryResource := _InventoryResource{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	//decoder.DisallowUnknownFields()
	err = decoder.Decode(&varInventoryResource)

	if err != nil {
		return err
	}

	*o = InventoryResource(varInventoryResource)

	return err
}

type NullableInventoryResource struct {
	value *InventoryResource
	isSet bool
}

func (v NullableInventoryResource) Get() *InventoryResource {
	return v.value
}

func (v *NullableInventoryResource) Set(val *InventoryResource) {
	v.value = val
	v.isSet = true
}

func (v NullableInventoryResource) IsSet() bool {
	return v.isSet
}

func (v *NullableInventoryResource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInventoryResource(val *InventoryResource) *NullableInventoryResource {
	return &NullableInventoryResource{value: val, isSet: true}
}

func (v NullableInventoryResource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInventoryResource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


