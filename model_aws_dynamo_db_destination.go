/*
Eon API

The Eon.io REST API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eon

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the AwsDynamoDBDestination type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AwsDynamoDBDestination{}

// AwsDynamoDBDestination Configuration for restoring to DynamoDB.
type AwsDynamoDBDestination struct {
	// Region to restore to.
	RestoreRegion string `json:"restoreRegion"`
	// ID of the key you want Eon to use for encrypting the restored resource.
	EncryptionKeyId string `json:"encryptionKeyId"`
	// Name to assign to the restored resource.
	RestoredName string `json:"restoredName"`
	// Write capacity units for the restored table. Defaults to 5. 
	WriteCapacityUnits *int32 `json:"writeCapacityUnits,omitempty"`
	// Tags to apply to the restored instance as key-value pairs, where key and value are both strings.  **Example:** `{\"eon_api_restore\": \"true\"}` 
	Tags *map[string]string `json:"tags,omitempty"`
}

type _AwsDynamoDBDestination AwsDynamoDBDestination

// NewAwsDynamoDBDestination instantiates a new AwsDynamoDBDestination object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAwsDynamoDBDestination(restoreRegion string, encryptionKeyId string, restoredName string) *AwsDynamoDBDestination {
	this := AwsDynamoDBDestination{}
	this.RestoreRegion = restoreRegion
	this.EncryptionKeyId = encryptionKeyId
	this.RestoredName = restoredName
	return &this
}

// NewAwsDynamoDBDestinationWithDefaults instantiates a new AwsDynamoDBDestination object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAwsDynamoDBDestinationWithDefaults() *AwsDynamoDBDestination {
	this := AwsDynamoDBDestination{}
	return &this
}

// GetRestoreRegion returns the RestoreRegion field value
func (o *AwsDynamoDBDestination) GetRestoreRegion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RestoreRegion
}

// GetRestoreRegionOk returns a tuple with the RestoreRegion field value
// and a boolean to check if the value has been set.
func (o *AwsDynamoDBDestination) GetRestoreRegionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RestoreRegion, true
}

// SetRestoreRegion sets field value
func (o *AwsDynamoDBDestination) SetRestoreRegion(v string) {
	o.RestoreRegion = v
}

// GetEncryptionKeyId returns the EncryptionKeyId field value
func (o *AwsDynamoDBDestination) GetEncryptionKeyId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EncryptionKeyId
}

// GetEncryptionKeyIdOk returns a tuple with the EncryptionKeyId field value
// and a boolean to check if the value has been set.
func (o *AwsDynamoDBDestination) GetEncryptionKeyIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EncryptionKeyId, true
}

// SetEncryptionKeyId sets field value
func (o *AwsDynamoDBDestination) SetEncryptionKeyId(v string) {
	o.EncryptionKeyId = v
}

// GetRestoredName returns the RestoredName field value
func (o *AwsDynamoDBDestination) GetRestoredName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RestoredName
}

// GetRestoredNameOk returns a tuple with the RestoredName field value
// and a boolean to check if the value has been set.
func (o *AwsDynamoDBDestination) GetRestoredNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RestoredName, true
}

// SetRestoredName sets field value
func (o *AwsDynamoDBDestination) SetRestoredName(v string) {
	o.RestoredName = v
}

// GetWriteCapacityUnits returns the WriteCapacityUnits field value if set, zero value otherwise.
func (o *AwsDynamoDBDestination) GetWriteCapacityUnits() int32 {
	if o == nil || IsNil(o.WriteCapacityUnits) {
		var ret int32
		return ret
	}
	return *o.WriteCapacityUnits
}

// GetWriteCapacityUnitsOk returns a tuple with the WriteCapacityUnits field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AwsDynamoDBDestination) GetWriteCapacityUnitsOk() (*int32, bool) {
	if o == nil || IsNil(o.WriteCapacityUnits) {
		return nil, false
	}
	return o.WriteCapacityUnits, true
}

// HasWriteCapacityUnits returns a boolean if a field has been set.
func (o *AwsDynamoDBDestination) HasWriteCapacityUnits() bool {
	if o != nil && !IsNil(o.WriteCapacityUnits) {
		return true
	}

	return false
}

// SetWriteCapacityUnits gets a reference to the given int32 and assigns it to the WriteCapacityUnits field.
func (o *AwsDynamoDBDestination) SetWriteCapacityUnits(v int32) {
	o.WriteCapacityUnits = &v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *AwsDynamoDBDestination) GetTags() map[string]string {
	if o == nil || IsNil(o.Tags) {
		var ret map[string]string
		return ret
	}
	return *o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AwsDynamoDBDestination) GetTagsOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Tags) {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *AwsDynamoDBDestination) HasTags() bool {
	if o != nil && !IsNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given map[string]string and assigns it to the Tags field.
func (o *AwsDynamoDBDestination) SetTags(v map[string]string) {
	o.Tags = &v
}

func (o AwsDynamoDBDestination) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AwsDynamoDBDestination) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["restoreRegion"] = o.RestoreRegion
	toSerialize["encryptionKeyId"] = o.EncryptionKeyId
	toSerialize["restoredName"] = o.RestoredName
	if !IsNil(o.WriteCapacityUnits) {
		toSerialize["writeCapacityUnits"] = o.WriteCapacityUnits
	}
	if !IsNil(o.Tags) {
		toSerialize["tags"] = o.Tags
	}
	return toSerialize, nil
}

func (o *AwsDynamoDBDestination) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"restoreRegion",
		"encryptionKeyId",
		"restoredName",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAwsDynamoDBDestination := _AwsDynamoDBDestination{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	//decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAwsDynamoDBDestination)

	if err != nil {
		return err
	}

	*o = AwsDynamoDBDestination(varAwsDynamoDBDestination)

	return err
}

type NullableAwsDynamoDBDestination struct {
	value *AwsDynamoDBDestination
	isSet bool
}

func (v NullableAwsDynamoDBDestination) Get() *AwsDynamoDBDestination {
	return v.value
}

func (v *NullableAwsDynamoDBDestination) Set(val *AwsDynamoDBDestination) {
	v.value = val
	v.isSet = true
}

func (v NullableAwsDynamoDBDestination) IsSet() bool {
	return v.isSet
}

func (v *NullableAwsDynamoDBDestination) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAwsDynamoDBDestination(val *AwsDynamoDBDestination) *NullableAwsDynamoDBDestination {
	return &NullableAwsDynamoDBDestination{value: val, isSet: true}
}

func (v NullableAwsDynamoDBDestination) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAwsDynamoDBDestination) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


