/*
Eon API

The Eon.io REST API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eon

import (
	"encoding/json"
)

// checks if the DestinationProviderAttributes type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DestinationProviderAttributes{}

// DestinationProviderAttributes struct for DestinationProviderAttributes
type DestinationProviderAttributes struct {
	Azure NullableDestinationProviderAttributesAzure `json:"azure,omitempty"`
}

// NewDestinationProviderAttributes instantiates a new DestinationProviderAttributes object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDestinationProviderAttributes() *DestinationProviderAttributes {
	this := DestinationProviderAttributes{}
	return &this
}

// NewDestinationProviderAttributesWithDefaults instantiates a new DestinationProviderAttributes object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDestinationProviderAttributesWithDefaults() *DestinationProviderAttributes {
	this := DestinationProviderAttributes{}
	return &this
}

// GetAzure returns the Azure field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DestinationProviderAttributes) GetAzure() DestinationProviderAttributesAzure {
	if o == nil || IsNil(o.Azure.Get()) {
		var ret DestinationProviderAttributesAzure
		return ret
	}
	return *o.Azure.Get()
}

// GetAzureOk returns a tuple with the Azure field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DestinationProviderAttributes) GetAzureOk() (*DestinationProviderAttributesAzure, bool) {
	if o == nil {
		return nil, false
	}
	return o.Azure.Get(), o.Azure.IsSet()
}

// HasAzure returns a boolean if a field has been set.
func (o *DestinationProviderAttributes) HasAzure() bool {
	if o != nil && o.Azure.IsSet() {
		return true
	}

	return false
}

// SetAzure gets a reference to the given NullableDestinationProviderAttributesAzure and assigns it to the Azure field.
func (o *DestinationProviderAttributes) SetAzure(v DestinationProviderAttributesAzure) {
	o.Azure.Set(&v)
}
// SetAzureNil sets the value for Azure to be an explicit nil
func (o *DestinationProviderAttributes) SetAzureNil() {
	o.Azure.Set(nil)
}

// UnsetAzure ensures that no value is present for Azure, not even an explicit nil
func (o *DestinationProviderAttributes) UnsetAzure() {
	o.Azure.Unset()
}

func (o DestinationProviderAttributes) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DestinationProviderAttributes) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Azure.IsSet() {
		toSerialize["azure"] = o.Azure.Get()
	}
	return toSerialize, nil
}

type NullableDestinationProviderAttributes struct {
	value *DestinationProviderAttributes
	isSet bool
}

func (v NullableDestinationProviderAttributes) Get() *DestinationProviderAttributes {
	return v.value
}

func (v *NullableDestinationProviderAttributes) Set(val *DestinationProviderAttributes) {
	v.value = val
	v.isSet = true
}

func (v NullableDestinationProviderAttributes) IsSet() bool {
	return v.isSet
}

func (v *NullableDestinationProviderAttributes) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDestinationProviderAttributes(val *DestinationProviderAttributes) *NullableDestinationProviderAttributes {
	return &NullableDestinationProviderAttributes{value: val, isSet: true}
}

func (v NullableDestinationProviderAttributes) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDestinationProviderAttributes) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


