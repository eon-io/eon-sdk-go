/*
Eon API

The Eon.io REST API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eon

import (
	"encoding/json"
	"fmt"
)

// CostUnit Unit of measurement for cost
type CostUnit string

// List of CostUnit
const (
	COST_UNIT_CREDITS CostUnit = "CREDITS"
	COST_UNIT_USD CostUnit = "USD"
	COST_UNIT_UNSPECIFIED CostUnit = "UNSPECIFIED"
)

// All allowed values of CostUnit enum
var AllowedCostUnitEnumValues = []CostUnit{
	"CREDITS",
	"USD",
	"UNSPECIFIED",
}

func (v *CostUnit) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := CostUnit(value)
	for _, existing := range AllowedCostUnitEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid CostUnit", value)
}

// NewCostUnitFromValue returns a pointer to a valid CostUnit
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCostUnitFromValue(v string) (*CostUnit, error) {
	ev := CostUnit(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for CostUnit: valid values are %v", v, AllowedCostUnitEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CostUnit) IsValid() bool {
	for _, existing := range AllowedCostUnitEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to CostUnit value
func (v CostUnit) Ptr() *CostUnit {
	return &v
}

type NullableCostUnit struct {
	value *CostUnit
	isSet bool
}

func (v NullableCostUnit) Get() *CostUnit {
	return v.value
}

func (v *NullableCostUnit) Set(val *CostUnit) {
	v.value = val
	v.isSet = true
}

func (v NullableCostUnit) IsSet() bool {
	return v.isSet
}

func (v *NullableCostUnit) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCostUnit(val *CostUnit) *NullableCostUnit {
	return &NullableCostUnit{value: val, isSet: true}
}

func (v NullableCostUnit) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCostUnit) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

