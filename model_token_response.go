/*
Eon API

The Eon.io REST API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eon

import (
	"encoding/json"
)

// checks if the TokenResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TokenResponse{}

// TokenResponse struct for TokenResponse
type TokenResponse struct {
	// Access token, which you pass in the `Authorization` header when calling API methods.
	AccessToken *string `json:"accessToken,omitempty"`
	// Length of time until the token expires, in seconds.  Default: `43200` (12 hours). 
	ExpirationSeconds *int32 `json:"expirationSeconds,omitempty"`
}

// NewTokenResponse instantiates a new TokenResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTokenResponse() *TokenResponse {
	this := TokenResponse{}
	return &this
}

// NewTokenResponseWithDefaults instantiates a new TokenResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTokenResponseWithDefaults() *TokenResponse {
	this := TokenResponse{}
	return &this
}

// GetAccessToken returns the AccessToken field value if set, zero value otherwise.
func (o *TokenResponse) GetAccessToken() string {
	if o == nil || IsNil(o.AccessToken) {
		var ret string
		return ret
	}
	return *o.AccessToken
}

// GetAccessTokenOk returns a tuple with the AccessToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TokenResponse) GetAccessTokenOk() (*string, bool) {
	if o == nil || IsNil(o.AccessToken) {
		return nil, false
	}
	return o.AccessToken, true
}

// HasAccessToken returns a boolean if a field has been set.
func (o *TokenResponse) HasAccessToken() bool {
	if o != nil && !IsNil(o.AccessToken) {
		return true
	}

	return false
}

// SetAccessToken gets a reference to the given string and assigns it to the AccessToken field.
func (o *TokenResponse) SetAccessToken(v string) {
	o.AccessToken = &v
}

// GetExpirationSeconds returns the ExpirationSeconds field value if set, zero value otherwise.
func (o *TokenResponse) GetExpirationSeconds() int32 {
	if o == nil || IsNil(o.ExpirationSeconds) {
		var ret int32
		return ret
	}
	return *o.ExpirationSeconds
}

// GetExpirationSecondsOk returns a tuple with the ExpirationSeconds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TokenResponse) GetExpirationSecondsOk() (*int32, bool) {
	if o == nil || IsNil(o.ExpirationSeconds) {
		return nil, false
	}
	return o.ExpirationSeconds, true
}

// HasExpirationSeconds returns a boolean if a field has been set.
func (o *TokenResponse) HasExpirationSeconds() bool {
	if o != nil && !IsNil(o.ExpirationSeconds) {
		return true
	}

	return false
}

// SetExpirationSeconds gets a reference to the given int32 and assigns it to the ExpirationSeconds field.
func (o *TokenResponse) SetExpirationSeconds(v int32) {
	o.ExpirationSeconds = &v
}

func (o TokenResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TokenResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AccessToken) {
		toSerialize["accessToken"] = o.AccessToken
	}
	if !IsNil(o.ExpirationSeconds) {
		toSerialize["expirationSeconds"] = o.ExpirationSeconds
	}
	return toSerialize, nil
}

type NullableTokenResponse struct {
	value *TokenResponse
	isSet bool
}

func (v NullableTokenResponse) Get() *TokenResponse {
	return v.value
}

func (v *NullableTokenResponse) Set(val *TokenResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableTokenResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableTokenResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTokenResponse(val *TokenResponse) *NullableTokenResponse {
	return &NullableTokenResponse{value: val, isSet: true}
}

func (v NullableTokenResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTokenResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


