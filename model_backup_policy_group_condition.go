/*
Eon API

The Eon.io REST API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eon

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the BackupPolicyGroupCondition type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BackupPolicyGroupCondition{}

// BackupPolicyGroupCondition Group of expressions to evaluate using the logical operator specified in `operator`. Each item in the `operands` list can be either a single expression or a nested `group` expression. 
type BackupPolicyGroupCondition struct {
	Operator LogicalOperator `json:"operator"`
	// List of expressions to evaluate using the logical operator specified in `operator`. Each item in the list can be either a single expression or a nested `group` expression.  Must contain at least 2 items. 
	Operands []BackupPolicyExpression `json:"operands"`
}

type _BackupPolicyGroupCondition BackupPolicyGroupCondition

// NewBackupPolicyGroupCondition instantiates a new BackupPolicyGroupCondition object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBackupPolicyGroupCondition(operator LogicalOperator, operands []BackupPolicyExpression) *BackupPolicyGroupCondition {
	this := BackupPolicyGroupCondition{}
	this.Operator = operator
	this.Operands = operands
	return &this
}

// NewBackupPolicyGroupConditionWithDefaults instantiates a new BackupPolicyGroupCondition object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBackupPolicyGroupConditionWithDefaults() *BackupPolicyGroupCondition {
	this := BackupPolicyGroupCondition{}
	return &this
}

// GetOperator returns the Operator field value
func (o *BackupPolicyGroupCondition) GetOperator() LogicalOperator {
	if o == nil {
		var ret LogicalOperator
		return ret
	}

	return o.Operator
}

// GetOperatorOk returns a tuple with the Operator field value
// and a boolean to check if the value has been set.
func (o *BackupPolicyGroupCondition) GetOperatorOk() (*LogicalOperator, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Operator, true
}

// SetOperator sets field value
func (o *BackupPolicyGroupCondition) SetOperator(v LogicalOperator) {
	o.Operator = v
}

// GetOperands returns the Operands field value
func (o *BackupPolicyGroupCondition) GetOperands() []BackupPolicyExpression {
	if o == nil {
		var ret []BackupPolicyExpression
		return ret
	}

	return o.Operands
}

// GetOperandsOk returns a tuple with the Operands field value
// and a boolean to check if the value has been set.
func (o *BackupPolicyGroupCondition) GetOperandsOk() ([]BackupPolicyExpression, bool) {
	if o == nil {
		return nil, false
	}
	return o.Operands, true
}

// SetOperands sets field value
func (o *BackupPolicyGroupCondition) SetOperands(v []BackupPolicyExpression) {
	o.Operands = v
}

func (o BackupPolicyGroupCondition) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BackupPolicyGroupCondition) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["operator"] = o.Operator
	toSerialize["operands"] = o.Operands
	return toSerialize, nil
}

func (o *BackupPolicyGroupCondition) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"operator",
		"operands",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varBackupPolicyGroupCondition := _BackupPolicyGroupCondition{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	//decoder.DisallowUnknownFields()
	err = decoder.Decode(&varBackupPolicyGroupCondition)

	if err != nil {
		return err
	}

	*o = BackupPolicyGroupCondition(varBackupPolicyGroupCondition)

	return err
}

type NullableBackupPolicyGroupCondition struct {
	value *BackupPolicyGroupCondition
	isSet bool
}

func (v NullableBackupPolicyGroupCondition) Get() *BackupPolicyGroupCondition {
	return v.value
}

func (v *NullableBackupPolicyGroupCondition) Set(val *BackupPolicyGroupCondition) {
	v.value = val
	v.isSet = true
}

func (v NullableBackupPolicyGroupCondition) IsSet() bool {
	return v.isSet
}

func (v *NullableBackupPolicyGroupCondition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBackupPolicyGroupCondition(val *BackupPolicyGroupCondition) *NullableBackupPolicyGroupCondition {
	return &NullableBackupPolicyGroupCondition{value: val, isSet: true}
}

func (v NullableBackupPolicyGroupCondition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBackupPolicyGroupCondition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


