/*
Eon API

The Eon.io REST API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eon

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the ResourceTypeCondition type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ResourceTypeCondition{}

// ResourceTypeCondition struct for ResourceTypeCondition
type ResourceTypeCondition struct {
	Operator      ScalarOperators `json:"operator"`
	ResourceTypes []ResourceType  `json:"resourceTypes"`
}

type _ResourceTypeCondition ResourceTypeCondition

// NewResourceTypeCondition instantiates a new ResourceTypeCondition object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResourceTypeCondition(operator ScalarOperators, resourceTypes []ResourceType) *ResourceTypeCondition {
	this := ResourceTypeCondition{}
	this.Operator = operator
	this.ResourceTypes = resourceTypes
	return &this
}

// NewResourceTypeConditionWithDefaults instantiates a new ResourceTypeCondition object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResourceTypeConditionWithDefaults() *ResourceTypeCondition {
	this := ResourceTypeCondition{}
	return &this
}

// GetOperator returns the Operator field value
func (o *ResourceTypeCondition) GetOperator() ScalarOperators {
	if o == nil {
		var ret ScalarOperators
		return ret
	}

	return o.Operator
}

// GetOperatorOk returns a tuple with the Operator field value
// and a boolean to check if the value has been set.
func (o *ResourceTypeCondition) GetOperatorOk() (*ScalarOperators, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Operator, true
}

// SetOperator sets field value
func (o *ResourceTypeCondition) SetOperator(v ScalarOperators) {
	o.Operator = v
}

// GetResourceTypes returns the ResourceTypes field value
func (o *ResourceTypeCondition) GetResourceTypes() []ResourceType {
	if o == nil {
		var ret []ResourceType
		return ret
	}

	return o.ResourceTypes
}

// GetResourceTypesOk returns a tuple with the ResourceTypes field value
// and a boolean to check if the value has been set.
func (o *ResourceTypeCondition) GetResourceTypesOk() ([]ResourceType, bool) {
	if o == nil {
		return nil, false
	}
	return o.ResourceTypes, true
}

// SetResourceTypes sets field value
func (o *ResourceTypeCondition) SetResourceTypes(v []ResourceType) {
	o.ResourceTypes = v
}

func (o ResourceTypeCondition) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ResourceTypeCondition) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["operator"] = o.Operator
	toSerialize["resourceTypes"] = o.ResourceTypes
	return toSerialize, nil
}

func (o *ResourceTypeCondition) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"operator",
		"resourceTypes",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varResourceTypeCondition := _ResourceTypeCondition{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	//decoder.DisallowUnknownFields()
	err = decoder.Decode(&varResourceTypeCondition)

	if err != nil {
		return err
	}

	*o = ResourceTypeCondition(varResourceTypeCondition)

	return err
}

type NullableResourceTypeCondition struct {
	value *ResourceTypeCondition
	isSet bool
}

func (v NullableResourceTypeCondition) Get() *ResourceTypeCondition {
	return v.value
}

func (v *NullableResourceTypeCondition) Set(val *ResourceTypeCondition) {
	v.value = val
	v.isSet = true
}

func (v NullableResourceTypeCondition) IsSet() bool {
	return v.isSet
}

func (v *NullableResourceTypeCondition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResourceTypeCondition(val *ResourceTypeCondition) *NullableResourceTypeCondition {
	return &NullableResourceTypeCondition{value: val, isSet: true}
}

func (v NullableResourceTypeCondition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResourceTypeCondition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
