/*
Eon API

The Eon.io REST API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eon

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the TimeOfYear type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TimeOfYear{}

// TimeOfYear struct for TimeOfYear
type TimeOfYear struct {
	Month int32 `json:"month"`
	DayOfMonth int32 `json:"dayOfMonth"`
}

type _TimeOfYear TimeOfYear

// NewTimeOfYear instantiates a new TimeOfYear object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTimeOfYear(month int32, dayOfMonth int32) *TimeOfYear {
	this := TimeOfYear{}
	this.Month = month
	this.DayOfMonth = dayOfMonth
	return &this
}

// NewTimeOfYearWithDefaults instantiates a new TimeOfYear object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTimeOfYearWithDefaults() *TimeOfYear {
	this := TimeOfYear{}
	var month int32 = 1
	this.Month = month
	var dayOfMonth int32 = 1
	this.DayOfMonth = dayOfMonth
	return &this
}

// GetMonth returns the Month field value
func (o *TimeOfYear) GetMonth() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Month
}

// GetMonthOk returns a tuple with the Month field value
// and a boolean to check if the value has been set.
func (o *TimeOfYear) GetMonthOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Month, true
}

// SetMonth sets field value
func (o *TimeOfYear) SetMonth(v int32) {
	o.Month = v
}

// GetDayOfMonth returns the DayOfMonth field value
func (o *TimeOfYear) GetDayOfMonth() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.DayOfMonth
}

// GetDayOfMonthOk returns a tuple with the DayOfMonth field value
// and a boolean to check if the value has been set.
func (o *TimeOfYear) GetDayOfMonthOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DayOfMonth, true
}

// SetDayOfMonth sets field value
func (o *TimeOfYear) SetDayOfMonth(v int32) {
	o.DayOfMonth = v
}

func (o TimeOfYear) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TimeOfYear) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["month"] = o.Month
	toSerialize["dayOfMonth"] = o.DayOfMonth
	return toSerialize, nil
}

func (o *TimeOfYear) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"month",
		"dayOfMonth",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTimeOfYear := _TimeOfYear{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	//decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTimeOfYear)

	if err != nil {
		return err
	}

	*o = TimeOfYear(varTimeOfYear)

	return err
}

type NullableTimeOfYear struct {
	value *TimeOfYear
	isSet bool
}

func (v NullableTimeOfYear) Get() *TimeOfYear {
	return v.value
}

func (v *NullableTimeOfYear) Set(val *TimeOfYear) {
	v.value = val
	v.isSet = true
}

func (v NullableTimeOfYear) IsSet() bool {
	return v.isSet
}

func (v *NullableTimeOfYear) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTimeOfYear(val *TimeOfYear) *NullableTimeOfYear {
	return &NullableTimeOfYear{value: val, isSet: true}
}

func (v NullableTimeOfYear) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTimeOfYear) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


