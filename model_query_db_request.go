/*
Eon API

The Eon.io REST API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eon

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the QueryDBRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &QueryDBRequest{}

// QueryDBRequest struct for QueryDBRequest
type QueryDBRequest struct {
	// Name of the database to query.
	DatabaseName string `json:"databaseName"`
	// SQL query to run against the database. Support is limited to Athena [`SELECT` queries](https://docs.aws.amazon.com/athena/latest/ug/select.html). 
	Query string `json:"query"`
	// Eon-assigned ID of the [restore account](./list-restore-accounts).
	RestoreAccountId string `json:"restoreAccountId"`
	Destination QueryDBRestoreDestination `json:"destination"`
}

type _QueryDBRequest QueryDBRequest

// NewQueryDBRequest instantiates a new QueryDBRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewQueryDBRequest(databaseName string, query string, restoreAccountId string, destination QueryDBRestoreDestination) *QueryDBRequest {
	this := QueryDBRequest{}
	this.DatabaseName = databaseName
	this.Query = query
	this.RestoreAccountId = restoreAccountId
	this.Destination = destination
	return &this
}

// NewQueryDBRequestWithDefaults instantiates a new QueryDBRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewQueryDBRequestWithDefaults() *QueryDBRequest {
	this := QueryDBRequest{}
	return &this
}

// GetDatabaseName returns the DatabaseName field value
func (o *QueryDBRequest) GetDatabaseName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DatabaseName
}

// GetDatabaseNameOk returns a tuple with the DatabaseName field value
// and a boolean to check if the value has been set.
func (o *QueryDBRequest) GetDatabaseNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DatabaseName, true
}

// SetDatabaseName sets field value
func (o *QueryDBRequest) SetDatabaseName(v string) {
	o.DatabaseName = v
}

// GetQuery returns the Query field value
func (o *QueryDBRequest) GetQuery() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Query
}

// GetQueryOk returns a tuple with the Query field value
// and a boolean to check if the value has been set.
func (o *QueryDBRequest) GetQueryOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Query, true
}

// SetQuery sets field value
func (o *QueryDBRequest) SetQuery(v string) {
	o.Query = v
}

// GetRestoreAccountId returns the RestoreAccountId field value
func (o *QueryDBRequest) GetRestoreAccountId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RestoreAccountId
}

// GetRestoreAccountIdOk returns a tuple with the RestoreAccountId field value
// and a boolean to check if the value has been set.
func (o *QueryDBRequest) GetRestoreAccountIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RestoreAccountId, true
}

// SetRestoreAccountId sets field value
func (o *QueryDBRequest) SetRestoreAccountId(v string) {
	o.RestoreAccountId = v
}

// GetDestination returns the Destination field value
func (o *QueryDBRequest) GetDestination() QueryDBRestoreDestination {
	if o == nil {
		var ret QueryDBRestoreDestination
		return ret
	}

	return o.Destination
}

// GetDestinationOk returns a tuple with the Destination field value
// and a boolean to check if the value has been set.
func (o *QueryDBRequest) GetDestinationOk() (*QueryDBRestoreDestination, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Destination, true
}

// SetDestination sets field value
func (o *QueryDBRequest) SetDestination(v QueryDBRestoreDestination) {
	o.Destination = v
}

func (o QueryDBRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o QueryDBRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["databaseName"] = o.DatabaseName
	toSerialize["query"] = o.Query
	toSerialize["restoreAccountId"] = o.RestoreAccountId
	toSerialize["destination"] = o.Destination
	return toSerialize, nil
}

func (o *QueryDBRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"databaseName",
		"query",
		"restoreAccountId",
		"destination",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varQueryDBRequest := _QueryDBRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	// Allow unknown fields to handle API schema differences
	// decoder.DisallowUnknownFields()
	err = decoder.Decode(&varQueryDBRequest)

	if err != nil {
		return err
	}

	*o = QueryDBRequest(varQueryDBRequest)

	return err
}

type NullableQueryDBRequest struct {
	value *QueryDBRequest
	isSet bool
}

func (v NullableQueryDBRequest) Get() *QueryDBRequest {
	return v.value
}

func (v *NullableQueryDBRequest) Set(val *QueryDBRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableQueryDBRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableQueryDBRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableQueryDBRequest(val *QueryDBRequest) *NullableQueryDBRequest {
	return &NullableQueryDBRequest{value: val, isSet: true}
}

func (v NullableQueryDBRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableQueryDBRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


