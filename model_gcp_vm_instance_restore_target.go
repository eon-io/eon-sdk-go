/*
Eon API

The Eon.io REST API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eon

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the GcpVmInstanceRestoreTarget type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GcpVmInstanceRestoreTarget{}

// GcpVmInstanceRestoreTarget struct for GcpVmInstanceRestoreTarget
type GcpVmInstanceRestoreTarget struct {
	// The zone to restore the VM to.
	Zone string `json:"zone"`
	// The machine type to use for the restored instance.
	MachineType string `json:"machineType"`
	// The name of the VM to restore.
	Name string `json:"name"`
	// The name of the network to use.
	NetworkName string `json:"networkName"`
	// The name of the subnet to use.
	SubnetName string `json:"subnetName"`
	// The host project of the network to use (for shared VPC networks).
	NetworkHostProject *string `json:"networkHostProject,omitempty"`
	// Labels to apply to the restored VM as key-value pairs, where key and value are both strings.  **Example:** `{\"eon_api_restore\": \"true\"}` 
	Labels *map[string]string `json:"labels,omitempty"`
	// Disks to restore and attach to the restored instance. Each item in the list corresponds to a disk to be restored, where `providerDiskId` matches the disk's ID at the time of the snapshot. The boot disk must be present in the list. 
	Disks []RestoreGcpInstanceDiskInput `json:"disks"`
}

type _GcpVmInstanceRestoreTarget GcpVmInstanceRestoreTarget

// NewGcpVmInstanceRestoreTarget instantiates a new GcpVmInstanceRestoreTarget object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGcpVmInstanceRestoreTarget(zone string, machineType string, name string, networkName string, subnetName string, disks []RestoreGcpInstanceDiskInput) *GcpVmInstanceRestoreTarget {
	this := GcpVmInstanceRestoreTarget{}
	this.Zone = zone
	this.MachineType = machineType
	this.Name = name
	this.NetworkName = networkName
	this.SubnetName = subnetName
	this.Disks = disks
	return &this
}

// NewGcpVmInstanceRestoreTargetWithDefaults instantiates a new GcpVmInstanceRestoreTarget object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGcpVmInstanceRestoreTargetWithDefaults() *GcpVmInstanceRestoreTarget {
	this := GcpVmInstanceRestoreTarget{}
	return &this
}

// GetZone returns the Zone field value
func (o *GcpVmInstanceRestoreTarget) GetZone() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Zone
}

// GetZoneOk returns a tuple with the Zone field value
// and a boolean to check if the value has been set.
func (o *GcpVmInstanceRestoreTarget) GetZoneOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Zone, true
}

// SetZone sets field value
func (o *GcpVmInstanceRestoreTarget) SetZone(v string) {
	o.Zone = v
}

// GetMachineType returns the MachineType field value
func (o *GcpVmInstanceRestoreTarget) GetMachineType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MachineType
}

// GetMachineTypeOk returns a tuple with the MachineType field value
// and a boolean to check if the value has been set.
func (o *GcpVmInstanceRestoreTarget) GetMachineTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MachineType, true
}

// SetMachineType sets field value
func (o *GcpVmInstanceRestoreTarget) SetMachineType(v string) {
	o.MachineType = v
}

// GetName returns the Name field value
func (o *GcpVmInstanceRestoreTarget) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *GcpVmInstanceRestoreTarget) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *GcpVmInstanceRestoreTarget) SetName(v string) {
	o.Name = v
}

// GetNetworkName returns the NetworkName field value
func (o *GcpVmInstanceRestoreTarget) GetNetworkName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.NetworkName
}

// GetNetworkNameOk returns a tuple with the NetworkName field value
// and a boolean to check if the value has been set.
func (o *GcpVmInstanceRestoreTarget) GetNetworkNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NetworkName, true
}

// SetNetworkName sets field value
func (o *GcpVmInstanceRestoreTarget) SetNetworkName(v string) {
	o.NetworkName = v
}

// GetSubnetName returns the SubnetName field value
func (o *GcpVmInstanceRestoreTarget) GetSubnetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SubnetName
}

// GetSubnetNameOk returns a tuple with the SubnetName field value
// and a boolean to check if the value has been set.
func (o *GcpVmInstanceRestoreTarget) GetSubnetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SubnetName, true
}

// SetSubnetName sets field value
func (o *GcpVmInstanceRestoreTarget) SetSubnetName(v string) {
	o.SubnetName = v
}

// GetNetworkHostProject returns the NetworkHostProject field value if set, zero value otherwise.
func (o *GcpVmInstanceRestoreTarget) GetNetworkHostProject() string {
	if o == nil || IsNil(o.NetworkHostProject) {
		var ret string
		return ret
	}
	return *o.NetworkHostProject
}

// GetNetworkHostProjectOk returns a tuple with the NetworkHostProject field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GcpVmInstanceRestoreTarget) GetNetworkHostProjectOk() (*string, bool) {
	if o == nil || IsNil(o.NetworkHostProject) {
		return nil, false
	}
	return o.NetworkHostProject, true
}

// HasNetworkHostProject returns a boolean if a field has been set.
func (o *GcpVmInstanceRestoreTarget) HasNetworkHostProject() bool {
	if o != nil && !IsNil(o.NetworkHostProject) {
		return true
	}

	return false
}

// SetNetworkHostProject gets a reference to the given string and assigns it to the NetworkHostProject field.
func (o *GcpVmInstanceRestoreTarget) SetNetworkHostProject(v string) {
	o.NetworkHostProject = &v
}

// GetLabels returns the Labels field value if set, zero value otherwise.
func (o *GcpVmInstanceRestoreTarget) GetLabels() map[string]string {
	if o == nil || IsNil(o.Labels) {
		var ret map[string]string
		return ret
	}
	return *o.Labels
}

// GetLabelsOk returns a tuple with the Labels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GcpVmInstanceRestoreTarget) GetLabelsOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Labels) {
		return nil, false
	}
	return o.Labels, true
}

// HasLabels returns a boolean if a field has been set.
func (o *GcpVmInstanceRestoreTarget) HasLabels() bool {
	if o != nil && !IsNil(o.Labels) {
		return true
	}

	return false
}

// SetLabels gets a reference to the given map[string]string and assigns it to the Labels field.
func (o *GcpVmInstanceRestoreTarget) SetLabels(v map[string]string) {
	o.Labels = &v
}

// GetDisks returns the Disks field value
func (o *GcpVmInstanceRestoreTarget) GetDisks() []RestoreGcpInstanceDiskInput {
	if o == nil {
		var ret []RestoreGcpInstanceDiskInput
		return ret
	}

	return o.Disks
}

// GetDisksOk returns a tuple with the Disks field value
// and a boolean to check if the value has been set.
func (o *GcpVmInstanceRestoreTarget) GetDisksOk() ([]RestoreGcpInstanceDiskInput, bool) {
	if o == nil {
		return nil, false
	}
	return o.Disks, true
}

// SetDisks sets field value
func (o *GcpVmInstanceRestoreTarget) SetDisks(v []RestoreGcpInstanceDiskInput) {
	o.Disks = v
}

func (o GcpVmInstanceRestoreTarget) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GcpVmInstanceRestoreTarget) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["zone"] = o.Zone
	toSerialize["machineType"] = o.MachineType
	toSerialize["name"] = o.Name
	toSerialize["networkName"] = o.NetworkName
	toSerialize["subnetName"] = o.SubnetName
	if !IsNil(o.NetworkHostProject) {
		toSerialize["networkHostProject"] = o.NetworkHostProject
	}
	if !IsNil(o.Labels) {
		toSerialize["labels"] = o.Labels
	}
	toSerialize["disks"] = o.Disks
	return toSerialize, nil
}

func (o *GcpVmInstanceRestoreTarget) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"zone",
		"machineType",
		"name",
		"networkName",
		"subnetName",
		"disks",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varGcpVmInstanceRestoreTarget := _GcpVmInstanceRestoreTarget{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	//decoder.DisallowUnknownFields()
	err = decoder.Decode(&varGcpVmInstanceRestoreTarget)

	if err != nil {
		return err
	}

	*o = GcpVmInstanceRestoreTarget(varGcpVmInstanceRestoreTarget)

	return err
}

type NullableGcpVmInstanceRestoreTarget struct {
	value *GcpVmInstanceRestoreTarget
	isSet bool
}

func (v NullableGcpVmInstanceRestoreTarget) Get() *GcpVmInstanceRestoreTarget {
	return v.value
}

func (v *NullableGcpVmInstanceRestoreTarget) Set(val *GcpVmInstanceRestoreTarget) {
	v.value = val
	v.isSet = true
}

func (v NullableGcpVmInstanceRestoreTarget) IsSet() bool {
	return v.isSet
}

func (v *NullableGcpVmInstanceRestoreTarget) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGcpVmInstanceRestoreTarget(val *GcpVmInstanceRestoreTarget) *NullableGcpVmInstanceRestoreTarget {
	return &NullableGcpVmInstanceRestoreTarget{value: val, isSet: true}
}

func (v NullableGcpVmInstanceRestoreTarget) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGcpVmInstanceRestoreTarget) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


