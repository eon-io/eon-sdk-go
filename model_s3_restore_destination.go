/*
Eon API

The Eon.io REST API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eon

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the S3RestoreDestination type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &S3RestoreDestination{}

// S3RestoreDestination S3 bucket.
type S3RestoreDestination struct {
	// Name of an existing bucket to restore query results to. Must be in the same region as the snapshot's vault.
	BucketName string `json:"bucketName"`
	// Prefix to prepend to the restore path. If omitted, query results are restored to the bucket root.
	Prefix *string `json:"prefix,omitempty"`
}

type _S3RestoreDestination S3RestoreDestination

// NewS3RestoreDestination instantiates a new S3RestoreDestination object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewS3RestoreDestination(bucketName string) *S3RestoreDestination {
	this := S3RestoreDestination{}
	this.BucketName = bucketName
	return &this
}

// NewS3RestoreDestinationWithDefaults instantiates a new S3RestoreDestination object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewS3RestoreDestinationWithDefaults() *S3RestoreDestination {
	this := S3RestoreDestination{}
	return &this
}

// GetBucketName returns the BucketName field value
func (o *S3RestoreDestination) GetBucketName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.BucketName
}

// GetBucketNameOk returns a tuple with the BucketName field value
// and a boolean to check if the value has been set.
func (o *S3RestoreDestination) GetBucketNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BucketName, true
}

// SetBucketName sets field value
func (o *S3RestoreDestination) SetBucketName(v string) {
	o.BucketName = v
}

// GetPrefix returns the Prefix field value if set, zero value otherwise.
func (o *S3RestoreDestination) GetPrefix() string {
	if o == nil || IsNil(o.Prefix) {
		var ret string
		return ret
	}
	return *o.Prefix
}

// GetPrefixOk returns a tuple with the Prefix field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *S3RestoreDestination) GetPrefixOk() (*string, bool) {
	if o == nil || IsNil(o.Prefix) {
		return nil, false
	}
	return o.Prefix, true
}

// HasPrefix returns a boolean if a field has been set.
func (o *S3RestoreDestination) HasPrefix() bool {
	if o != nil && !IsNil(o.Prefix) {
		return true
	}

	return false
}

// SetPrefix gets a reference to the given string and assigns it to the Prefix field.
func (o *S3RestoreDestination) SetPrefix(v string) {
	o.Prefix = &v
}

func (o S3RestoreDestination) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o S3RestoreDestination) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["bucketName"] = o.BucketName
	if !IsNil(o.Prefix) {
		toSerialize["prefix"] = o.Prefix
	}
	return toSerialize, nil
}

func (o *S3RestoreDestination) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"bucketName",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varS3RestoreDestination := _S3RestoreDestination{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	//decoder.DisallowUnknownFields()
	err = decoder.Decode(&varS3RestoreDestination)

	if err != nil {
		return err
	}

	*o = S3RestoreDestination(varS3RestoreDestination)

	return err
}

type NullableS3RestoreDestination struct {
	value *S3RestoreDestination
	isSet bool
}

func (v NullableS3RestoreDestination) Get() *S3RestoreDestination {
	return v.value
}

func (v *NullableS3RestoreDestination) Set(val *S3RestoreDestination) {
	v.value = val
	v.isSet = true
}

func (v NullableS3RestoreDestination) IsSet() bool {
	return v.isSet
}

func (v *NullableS3RestoreDestination) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableS3RestoreDestination(val *S3RestoreDestination) *NullableS3RestoreDestination {
	return &NullableS3RestoreDestination{value: val, isSet: true}
}

func (v NullableS3RestoreDestination) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableS3RestoreDestination) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
