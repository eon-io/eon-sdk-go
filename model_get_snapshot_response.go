/*
Eon API

The Eon.io REST API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eon

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the GetSnapshotResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GetSnapshotResponse{}

// GetSnapshotResponse struct for GetSnapshotResponse
type GetSnapshotResponse struct {
	Snapshot Snapshot `json:"snapshot"`
}

type _GetSnapshotResponse GetSnapshotResponse

// NewGetSnapshotResponse instantiates a new GetSnapshotResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetSnapshotResponse(snapshot Snapshot) *GetSnapshotResponse {
	this := GetSnapshotResponse{}
	this.Snapshot = snapshot
	return &this
}

// NewGetSnapshotResponseWithDefaults instantiates a new GetSnapshotResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetSnapshotResponseWithDefaults() *GetSnapshotResponse {
	this := GetSnapshotResponse{}
	return &this
}

// GetSnapshot returns the Snapshot field value
func (o *GetSnapshotResponse) GetSnapshot() Snapshot {
	if o == nil {
		var ret Snapshot
		return ret
	}

	return o.Snapshot
}

// GetSnapshotOk returns a tuple with the Snapshot field value
// and a boolean to check if the value has been set.
func (o *GetSnapshotResponse) GetSnapshotOk() (*Snapshot, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Snapshot, true
}

// SetSnapshot sets field value
func (o *GetSnapshotResponse) SetSnapshot(v Snapshot) {
	o.Snapshot = v
}

func (o GetSnapshotResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GetSnapshotResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["snapshot"] = o.Snapshot
	return toSerialize, nil
}

func (o *GetSnapshotResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"snapshot",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varGetSnapshotResponse := _GetSnapshotResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	// Allow unknown fields to handle API schema differences
	// // Allow unknown fields to handle API schema differences
	// decoder.DisallowUnknownFields()
	err = decoder.Decode(&varGetSnapshotResponse)

	if err != nil {
		return err
	}

	*o = GetSnapshotResponse(varGetSnapshotResponse)

	return err
}

type NullableGetSnapshotResponse struct {
	value *GetSnapshotResponse
	isSet bool
}

func (v NullableGetSnapshotResponse) Get() *GetSnapshotResponse {
	return v.value
}

func (v *NullableGetSnapshotResponse) Set(val *GetSnapshotResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableGetSnapshotResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableGetSnapshotResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetSnapshotResponse(val *GetSnapshotResponse) *NullableGetSnapshotResponse {
	return &NullableGetSnapshotResponse{value: val, isSet: true}
}

func (v NullableGetSnapshotResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetSnapshotResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


