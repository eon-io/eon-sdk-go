/*
Eon API

The Eon.io REST API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eon

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the StandardIntervalConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StandardIntervalConfig{}

// StandardIntervalConfig struct for StandardIntervalConfig
type StandardIntervalConfig struct {
	// Backup frequency, in hours. 
	IntervalHours int32 `json:"intervalHours"`
}

type _StandardIntervalConfig StandardIntervalConfig

// NewStandardIntervalConfig instantiates a new StandardIntervalConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStandardIntervalConfig(intervalHours int32) *StandardIntervalConfig {
	this := StandardIntervalConfig{}
	this.IntervalHours = intervalHours
	return &this
}

// NewStandardIntervalConfigWithDefaults instantiates a new StandardIntervalConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStandardIntervalConfigWithDefaults() *StandardIntervalConfig {
	this := StandardIntervalConfig{}
	return &this
}

// GetIntervalHours returns the IntervalHours field value
func (o *StandardIntervalConfig) GetIntervalHours() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.IntervalHours
}

// GetIntervalHoursOk returns a tuple with the IntervalHours field value
// and a boolean to check if the value has been set.
func (o *StandardIntervalConfig) GetIntervalHoursOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IntervalHours, true
}

// SetIntervalHours sets field value
func (o *StandardIntervalConfig) SetIntervalHours(v int32) {
	o.IntervalHours = v
}

func (o StandardIntervalConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StandardIntervalConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["intervalHours"] = o.IntervalHours
	return toSerialize, nil
}

func (o *StandardIntervalConfig) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"intervalHours",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varStandardIntervalConfig := _StandardIntervalConfig{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	//decoder.DisallowUnknownFields()
	err = decoder.Decode(&varStandardIntervalConfig)

	if err != nil {
		return err
	}

	*o = StandardIntervalConfig(varStandardIntervalConfig)

	return err
}

type NullableStandardIntervalConfig struct {
	value *StandardIntervalConfig
	isSet bool
}

func (v NullableStandardIntervalConfig) Get() *StandardIntervalConfig {
	return v.value
}

func (v *NullableStandardIntervalConfig) Set(val *StandardIntervalConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableStandardIntervalConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableStandardIntervalConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStandardIntervalConfig(val *StandardIntervalConfig) *NullableStandardIntervalConfig {
	return &NullableStandardIntervalConfig{value: val, isSet: true}
}

func (v NullableStandardIntervalConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStandardIntervalConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


