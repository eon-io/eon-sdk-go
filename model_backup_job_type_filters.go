/*
Eon API

The Eon.io REST API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eon

import (
	"encoding/json"
)

// checks if the BackupJobTypeFilters type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BackupJobTypeFilters{}

// BackupJobTypeFilters struct for BackupJobTypeFilters
type BackupJobTypeFilters struct {
	// Matches if any item in this list equals `backupType`.
	In []BackupJobType `json:"in,omitempty"`
	// Matches if no item in this list equals `backupType`.
	NotIn []BackupJobType `json:"notIn,omitempty"`
}

// NewBackupJobTypeFilters instantiates a new BackupJobTypeFilters object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBackupJobTypeFilters() *BackupJobTypeFilters {
	this := BackupJobTypeFilters{}
	return &this
}

// NewBackupJobTypeFiltersWithDefaults instantiates a new BackupJobTypeFilters object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBackupJobTypeFiltersWithDefaults() *BackupJobTypeFilters {
	this := BackupJobTypeFilters{}
	return &this
}

// GetIn returns the In field value if set, zero value otherwise.
func (o *BackupJobTypeFilters) GetIn() []BackupJobType {
	if o == nil || IsNil(o.In) {
		var ret []BackupJobType
		return ret
	}
	return o.In
}

// GetInOk returns a tuple with the In field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BackupJobTypeFilters) GetInOk() ([]BackupJobType, bool) {
	if o == nil || IsNil(o.In) {
		return nil, false
	}
	return o.In, true
}

// HasIn returns a boolean if a field has been set.
func (o *BackupJobTypeFilters) HasIn() bool {
	if o != nil && !IsNil(o.In) {
		return true
	}

	return false
}

// SetIn gets a reference to the given []BackupJobType and assigns it to the In field.
func (o *BackupJobTypeFilters) SetIn(v []BackupJobType) {
	o.In = v
}

// GetNotIn returns the NotIn field value if set, zero value otherwise.
func (o *BackupJobTypeFilters) GetNotIn() []BackupJobType {
	if o == nil || IsNil(o.NotIn) {
		var ret []BackupJobType
		return ret
	}
	return o.NotIn
}

// GetNotInOk returns a tuple with the NotIn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BackupJobTypeFilters) GetNotInOk() ([]BackupJobType, bool) {
	if o == nil || IsNil(o.NotIn) {
		return nil, false
	}
	return o.NotIn, true
}

// HasNotIn returns a boolean if a field has been set.
func (o *BackupJobTypeFilters) HasNotIn() bool {
	if o != nil && !IsNil(o.NotIn) {
		return true
	}

	return false
}

// SetNotIn gets a reference to the given []BackupJobType and assigns it to the NotIn field.
func (o *BackupJobTypeFilters) SetNotIn(v []BackupJobType) {
	o.NotIn = v
}

func (o BackupJobTypeFilters) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BackupJobTypeFilters) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.In) {
		toSerialize["in"] = o.In
	}
	if !IsNil(o.NotIn) {
		toSerialize["notIn"] = o.NotIn
	}
	return toSerialize, nil
}

type NullableBackupJobTypeFilters struct {
	value *BackupJobTypeFilters
	isSet bool
}

func (v NullableBackupJobTypeFilters) Get() *BackupJobTypeFilters {
	return v.value
}

func (v *NullableBackupJobTypeFilters) Set(val *BackupJobTypeFilters) {
	v.value = val
	v.isSet = true
}

func (v NullableBackupJobTypeFilters) IsSet() bool {
	return v.isSet
}

func (v *NullableBackupJobTypeFilters) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBackupJobTypeFilters(val *BackupJobTypeFilters) *NullableBackupJobTypeFilters {
	return &NullableBackupJobTypeFilters{value: val, isSet: true}
}

func (v NullableBackupJobTypeFilters) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBackupJobTypeFilters) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


