/*
Eon API

The Eon.io REST API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eon

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the AzureDisk type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AzureDisk{}

// AzureDisk struct for AzureDisk
type AzureDisk struct {
	// Cloud-provider-assigned disk ID.
	ProviderDiskId string `json:"providerDiskId"`
	Settings AzureDiskSettings `json:"settings"`
}

type _AzureDisk AzureDisk

// NewAzureDisk instantiates a new AzureDisk object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAzureDisk(providerDiskId string, settings AzureDiskSettings) *AzureDisk {
	this := AzureDisk{}
	this.ProviderDiskId = providerDiskId
	this.Settings = settings
	return &this
}

// NewAzureDiskWithDefaults instantiates a new AzureDisk object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAzureDiskWithDefaults() *AzureDisk {
	this := AzureDisk{}
	return &this
}

// GetProviderDiskId returns the ProviderDiskId field value
func (o *AzureDisk) GetProviderDiskId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ProviderDiskId
}

// GetProviderDiskIdOk returns a tuple with the ProviderDiskId field value
// and a boolean to check if the value has been set.
func (o *AzureDisk) GetProviderDiskIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProviderDiskId, true
}

// SetProviderDiskId sets field value
func (o *AzureDisk) SetProviderDiskId(v string) {
	o.ProviderDiskId = v
}

// GetSettings returns the Settings field value
func (o *AzureDisk) GetSettings() AzureDiskSettings {
	if o == nil {
		var ret AzureDiskSettings
		return ret
	}

	return o.Settings
}

// GetSettingsOk returns a tuple with the Settings field value
// and a boolean to check if the value has been set.
func (o *AzureDisk) GetSettingsOk() (*AzureDiskSettings, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Settings, true
}

// SetSettings sets field value
func (o *AzureDisk) SetSettings(v AzureDiskSettings) {
	o.Settings = v
}

func (o AzureDisk) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AzureDisk) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["providerDiskId"] = o.ProviderDiskId
	toSerialize["settings"] = o.Settings
	return toSerialize, nil
}

func (o *AzureDisk) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"providerDiskId",
		"settings",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAzureDisk := _AzureDisk{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	//decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAzureDisk)

	if err != nil {
		return err
	}

	*o = AzureDisk(varAzureDisk)

	return err
}

type NullableAzureDisk struct {
	value *AzureDisk
	isSet bool
}

func (v NullableAzureDisk) Get() *AzureDisk {
	return v.value
}

func (v *NullableAzureDisk) Set(val *AzureDisk) {
	v.value = val
	v.isSet = true
}

func (v NullableAzureDisk) IsSet() bool {
	return v.isSet
}

func (v *NullableAzureDisk) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAzureDisk(val *AzureDisk) *NullableAzureDisk {
	return &NullableAzureDisk{value: val, isSet: true}
}

func (v NullableAzureDisk) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAzureDisk) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


