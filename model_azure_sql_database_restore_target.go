/*
Eon API

The Eon.io REST API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eon

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the AzureSqlDatabaseRestoreTarget type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AzureSqlDatabaseRestoreTarget{}

// AzureSqlDatabaseRestoreTarget struct for AzureSqlDatabaseRestoreTarget
type AzureSqlDatabaseRestoreTarget struct {
	// Region to restore to.
	Region string `json:"region"`
	// Name of the resource group to restore to.
	ResourceGroupName string `json:"resourceGroupName"`
	// Restored SQL server name.
	ServerName string `json:"serverName"`
	// Username to set for admin of user of the restored database.
	AdminUserName string `json:"adminUserName"`
	// Tags to apply to the restored instance as key-value pairs, where key and value are both strings. If not provided, defaults to an empty object, with no tags applied.  **Example:** `{\"eon_api_restore\": \"true\"}` 
	Tags *map[string]string `json:"tags,omitempty"`
}

type _AzureSqlDatabaseRestoreTarget AzureSqlDatabaseRestoreTarget

// NewAzureSqlDatabaseRestoreTarget instantiates a new AzureSqlDatabaseRestoreTarget object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAzureSqlDatabaseRestoreTarget(region string, resourceGroupName string, serverName string, adminUserName string) *AzureSqlDatabaseRestoreTarget {
	this := AzureSqlDatabaseRestoreTarget{}
	this.Region = region
	this.ResourceGroupName = resourceGroupName
	this.ServerName = serverName
	this.AdminUserName = adminUserName
	return &this
}

// NewAzureSqlDatabaseRestoreTargetWithDefaults instantiates a new AzureSqlDatabaseRestoreTarget object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAzureSqlDatabaseRestoreTargetWithDefaults() *AzureSqlDatabaseRestoreTarget {
	this := AzureSqlDatabaseRestoreTarget{}
	return &this
}

// GetRegion returns the Region field value
func (o *AzureSqlDatabaseRestoreTarget) GetRegion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Region
}

// GetRegionOk returns a tuple with the Region field value
// and a boolean to check if the value has been set.
func (o *AzureSqlDatabaseRestoreTarget) GetRegionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Region, true
}

// SetRegion sets field value
func (o *AzureSqlDatabaseRestoreTarget) SetRegion(v string) {
	o.Region = v
}

// GetResourceGroupName returns the ResourceGroupName field value
func (o *AzureSqlDatabaseRestoreTarget) GetResourceGroupName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ResourceGroupName
}

// GetResourceGroupNameOk returns a tuple with the ResourceGroupName field value
// and a boolean to check if the value has been set.
func (o *AzureSqlDatabaseRestoreTarget) GetResourceGroupNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ResourceGroupName, true
}

// SetResourceGroupName sets field value
func (o *AzureSqlDatabaseRestoreTarget) SetResourceGroupName(v string) {
	o.ResourceGroupName = v
}

// GetServerName returns the ServerName field value
func (o *AzureSqlDatabaseRestoreTarget) GetServerName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ServerName
}

// GetServerNameOk returns a tuple with the ServerName field value
// and a boolean to check if the value has been set.
func (o *AzureSqlDatabaseRestoreTarget) GetServerNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ServerName, true
}

// SetServerName sets field value
func (o *AzureSqlDatabaseRestoreTarget) SetServerName(v string) {
	o.ServerName = v
}

// GetAdminUserName returns the AdminUserName field value
func (o *AzureSqlDatabaseRestoreTarget) GetAdminUserName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AdminUserName
}

// GetAdminUserNameOk returns a tuple with the AdminUserName field value
// and a boolean to check if the value has been set.
func (o *AzureSqlDatabaseRestoreTarget) GetAdminUserNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AdminUserName, true
}

// SetAdminUserName sets field value
func (o *AzureSqlDatabaseRestoreTarget) SetAdminUserName(v string) {
	o.AdminUserName = v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *AzureSqlDatabaseRestoreTarget) GetTags() map[string]string {
	if o == nil || IsNil(o.Tags) {
		var ret map[string]string
		return ret
	}
	return *o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AzureSqlDatabaseRestoreTarget) GetTagsOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Tags) {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *AzureSqlDatabaseRestoreTarget) HasTags() bool {
	if o != nil && !IsNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given map[string]string and assigns it to the Tags field.
func (o *AzureSqlDatabaseRestoreTarget) SetTags(v map[string]string) {
	o.Tags = &v
}

func (o AzureSqlDatabaseRestoreTarget) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AzureSqlDatabaseRestoreTarget) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["region"] = o.Region
	toSerialize["resourceGroupName"] = o.ResourceGroupName
	toSerialize["serverName"] = o.ServerName
	toSerialize["adminUserName"] = o.AdminUserName
	if !IsNil(o.Tags) {
		toSerialize["tags"] = o.Tags
	}
	return toSerialize, nil
}

func (o *AzureSqlDatabaseRestoreTarget) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"region",
		"resourceGroupName",
		"serverName",
		"adminUserName",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAzureSqlDatabaseRestoreTarget := _AzureSqlDatabaseRestoreTarget{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	//decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAzureSqlDatabaseRestoreTarget)

	if err != nil {
		return err
	}

	*o = AzureSqlDatabaseRestoreTarget(varAzureSqlDatabaseRestoreTarget)

	return err
}

type NullableAzureSqlDatabaseRestoreTarget struct {
	value *AzureSqlDatabaseRestoreTarget
	isSet bool
}

func (v NullableAzureSqlDatabaseRestoreTarget) Get() *AzureSqlDatabaseRestoreTarget {
	return v.value
}

func (v *NullableAzureSqlDatabaseRestoreTarget) Set(val *AzureSqlDatabaseRestoreTarget) {
	v.value = val
	v.isSet = true
}

func (v NullableAzureSqlDatabaseRestoreTarget) IsSet() bool {
	return v.isSet
}

func (v *NullableAzureSqlDatabaseRestoreTarget) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAzureSqlDatabaseRestoreTarget(val *AzureSqlDatabaseRestoreTarget) *NullableAzureSqlDatabaseRestoreTarget {
	return &NullableAzureSqlDatabaseRestoreTarget{value: val, isSet: true}
}

func (v NullableAzureSqlDatabaseRestoreTarget) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAzureSqlDatabaseRestoreTarget) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


