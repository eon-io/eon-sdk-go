/*
Eon API

The Eon.io REST API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eon

import (
	"encoding/json"
	"fmt"
)

// ActionRequiredDetails Resource action required identifier. 
type ActionRequiredDetails string

// List of ActionRequiredDetails
const (
	CLOUD_RESOURCE_ACTION_REQUIRED_UNSPECIFIED ActionRequiredDetails = "CLOUD_RESOURCE_ACTION_REQUIRED_UNSPECIFIED"
	AZURE_SQL_VM_INVALID_CONFIGURATION ActionRequiredDetails = "AZURE_SQL_VM_INVALID_CONFIGURATION"
	DYNAMO_DB_INVALID_STREAM_VIEW_TYPE ActionRequiredDetails = "DYNAMO_DB_INVALID_STREAM_VIEW_TYPE"
	DYNAMO_DB_INSUFFICIENT_RCUS ActionRequiredDetails = "DYNAMO_DB_INSUFFICIENT_RCUS"
)

// All allowed values of ActionRequiredDetails enum
var AllowedActionRequiredDetailsEnumValues = []ActionRequiredDetails{
	"CLOUD_RESOURCE_ACTION_REQUIRED_UNSPECIFIED",
	"AZURE_SQL_VM_INVALID_CONFIGURATION",
	"DYNAMO_DB_INVALID_STREAM_VIEW_TYPE",
	"DYNAMO_DB_INSUFFICIENT_RCUS",
}

func (v *ActionRequiredDetails) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ActionRequiredDetails(value)
	for _, existing := range AllowedActionRequiredDetailsEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ActionRequiredDetails", value)
}

// NewActionRequiredDetailsFromValue returns a pointer to a valid ActionRequiredDetails
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewActionRequiredDetailsFromValue(v string) (*ActionRequiredDetails, error) {
	ev := ActionRequiredDetails(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ActionRequiredDetails: valid values are %v", v, AllowedActionRequiredDetailsEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ActionRequiredDetails) IsValid() bool {
	for _, existing := range AllowedActionRequiredDetailsEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ActionRequiredDetails value
func (v ActionRequiredDetails) Ptr() *ActionRequiredDetails {
	return &v
}

type NullableActionRequiredDetails struct {
	value *ActionRequiredDetails
	isSet bool
}

func (v NullableActionRequiredDetails) Get() *ActionRequiredDetails {
	return v.value
}

func (v *NullableActionRequiredDetails) Set(val *ActionRequiredDetails) {
	v.value = val
	v.isSet = true
}

func (v NullableActionRequiredDetails) IsSet() bool {
	return v.isSet
}

func (v *NullableActionRequiredDetails) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableActionRequiredDetails(val *ActionRequiredDetails) *NullableActionRequiredDetails {
	return &NullableActionRequiredDetails{value: val, isSet: true}
}

func (v NullableActionRequiredDetails) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableActionRequiredDetails) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

