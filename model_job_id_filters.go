/*
Eon API

The Eon.io REST API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eon

import (
	"encoding/json"
)

// checks if the JobIdFilters type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &JobIdFilters{}

// JobIdFilters struct for JobIdFilters
type JobIdFilters struct {
	// Matches if any string in this list equals `jobId`.
	In []string `json:"in,omitempty"`
	// Matches if no string in this list equals `jobId`.
	NotIn []string `json:"notIn,omitempty"`
}

// NewJobIdFilters instantiates a new JobIdFilters object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewJobIdFilters() *JobIdFilters {
	this := JobIdFilters{}
	return &this
}

// NewJobIdFiltersWithDefaults instantiates a new JobIdFilters object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewJobIdFiltersWithDefaults() *JobIdFilters {
	this := JobIdFilters{}
	return &this
}

// GetIn returns the In field value if set, zero value otherwise.
func (o *JobIdFilters) GetIn() []string {
	if o == nil || IsNil(o.In) {
		var ret []string
		return ret
	}
	return o.In
}

// GetInOk returns a tuple with the In field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JobIdFilters) GetInOk() ([]string, bool) {
	if o == nil || IsNil(o.In) {
		return nil, false
	}
	return o.In, true
}

// HasIn returns a boolean if a field has been set.
func (o *JobIdFilters) HasIn() bool {
	if o != nil && !IsNil(o.In) {
		return true
	}

	return false
}

// SetIn gets a reference to the given []string and assigns it to the In field.
func (o *JobIdFilters) SetIn(v []string) {
	o.In = v
}

// GetNotIn returns the NotIn field value if set, zero value otherwise.
func (o *JobIdFilters) GetNotIn() []string {
	if o == nil || IsNil(o.NotIn) {
		var ret []string
		return ret
	}
	return o.NotIn
}

// GetNotInOk returns a tuple with the NotIn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JobIdFilters) GetNotInOk() ([]string, bool) {
	if o == nil || IsNil(o.NotIn) {
		return nil, false
	}
	return o.NotIn, true
}

// HasNotIn returns a boolean if a field has been set.
func (o *JobIdFilters) HasNotIn() bool {
	if o != nil && !IsNil(o.NotIn) {
		return true
	}

	return false
}

// SetNotIn gets a reference to the given []string and assigns it to the NotIn field.
func (o *JobIdFilters) SetNotIn(v []string) {
	o.NotIn = v
}

func (o JobIdFilters) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o JobIdFilters) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.In) {
		toSerialize["in"] = o.In
	}
	if !IsNil(o.NotIn) {
		toSerialize["notIn"] = o.NotIn
	}
	return toSerialize, nil
}

type NullableJobIdFilters struct {
	value *JobIdFilters
	isSet bool
}

func (v NullableJobIdFilters) Get() *JobIdFilters {
	return v.value
}

func (v *NullableJobIdFilters) Set(val *JobIdFilters) {
	v.value = val
	v.isSet = true
}

func (v NullableJobIdFilters) IsSet() bool {
	return v.isSet
}

func (v *NullableJobIdFilters) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJobIdFilters(val *JobIdFilters) *NullableJobIdFilters {
	return &NullableJobIdFilters{value: val, isSet: true}
}

func (v NullableJobIdFilters) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJobIdFilters) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


