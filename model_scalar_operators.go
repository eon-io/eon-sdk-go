/*
Eon API

The Eon.io REST API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eon

import (
	"encoding/json"
	"fmt"
)

// ScalarOperators the model 'ScalarOperators'
type ScalarOperators string

// List of ScalarOperators
const (
	IN_OPERATOR     ScalarOperators = "IN"
	NOT_IN_OPERATOR ScalarOperators = "NOT_IN"
)

// All allowed values of ScalarOperators enum
var AllowedScalarOperatorsEnumValues = []ScalarOperators{
	"IN",
	"NOT_IN",
}

func (v *ScalarOperators) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ScalarOperators(value)
	for _, existing := range AllowedScalarOperatorsEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ScalarOperators", value)
}

// NewScalarOperatorsFromValue returns a pointer to a valid ScalarOperators
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewScalarOperatorsFromValue(v string) (*ScalarOperators, error) {
	ev := ScalarOperators(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ScalarOperators: valid values are %v", v, AllowedScalarOperatorsEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ScalarOperators) IsValid() bool {
	for _, existing := range AllowedScalarOperatorsEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ScalarOperators value
func (v ScalarOperators) Ptr() *ScalarOperators {
	return &v
}

type NullableScalarOperators struct {
	value *ScalarOperators
	isSet bool
}

func (v NullableScalarOperators) Get() *ScalarOperators {
	return v.value
}

func (v *NullableScalarOperators) Set(val *ScalarOperators) {
	v.value = val
	v.isSet = true
}

func (v NullableScalarOperators) IsSet() bool {
	return v.isSet
}

func (v *NullableScalarOperators) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableScalarOperators(val *ScalarOperators) *NullableScalarOperators {
	return &NullableScalarOperators{value: val, isSet: true}
}

func (v NullableScalarOperators) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableScalarOperators) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
