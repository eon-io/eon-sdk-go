/*
Eon API

The Eon.io REST API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eon

import (
	"encoding/json"
	"fmt"
)

// HighFrequencyBackupScheduleFrequency the model 'HighFrequencyBackupScheduleFrequency'
type HighFrequencyBackupScheduleFrequency string

// List of HighFrequencyBackupScheduleFrequency
const (
	HIGH_FREQUENCY_BACKUP_SCHEDULE_INTERVAL HighFrequencyBackupScheduleFrequency = "INTERVAL"
	HIGH_FREQUENCY_BACKUP_SCHEDULE_DAILY HighFrequencyBackupScheduleFrequency = "DAILY"
	HIGH_FREQUENCY_BACKUP_SCHEDULE_WEEKLY HighFrequencyBackupScheduleFrequency = "WEEKLY"
	HIGH_FREQUENCY_BACKUP_SCHEDULE_MONTHLY HighFrequencyBackupScheduleFrequency = "MONTHLY"
	HIGH_FREQUENCY_BACKUP_SCHEDULE_ANNUALLY HighFrequencyBackupScheduleFrequency = "ANNUALLY"
	HIGH_FREQUENCY_BACKUP_SCHEDULE_UNSPECIFIED HighFrequencyBackupScheduleFrequency = "UNSPECIFIED"
)

// All allowed values of HighFrequencyBackupScheduleFrequency enum
var AllowedHighFrequencyBackupScheduleFrequencyEnumValues = []HighFrequencyBackupScheduleFrequency{
	"INTERVAL",
	"DAILY",
	"WEEKLY",
	"MONTHLY",
	"ANNUALLY",
	"UNSPECIFIED",
}

func (v *HighFrequencyBackupScheduleFrequency) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := HighFrequencyBackupScheduleFrequency(value)
	for _, existing := range AllowedHighFrequencyBackupScheduleFrequencyEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid HighFrequencyBackupScheduleFrequency", value)
}

// NewHighFrequencyBackupScheduleFrequencyFromValue returns a pointer to a valid HighFrequencyBackupScheduleFrequency
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewHighFrequencyBackupScheduleFrequencyFromValue(v string) (*HighFrequencyBackupScheduleFrequency, error) {
	ev := HighFrequencyBackupScheduleFrequency(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for HighFrequencyBackupScheduleFrequency: valid values are %v", v, AllowedHighFrequencyBackupScheduleFrequencyEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v HighFrequencyBackupScheduleFrequency) IsValid() bool {
	for _, existing := range AllowedHighFrequencyBackupScheduleFrequencyEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to HighFrequencyBackupScheduleFrequency value
func (v HighFrequencyBackupScheduleFrequency) Ptr() *HighFrequencyBackupScheduleFrequency {
	return &v
}

type NullableHighFrequencyBackupScheduleFrequency struct {
	value *HighFrequencyBackupScheduleFrequency
	isSet bool
}

func (v NullableHighFrequencyBackupScheduleFrequency) Get() *HighFrequencyBackupScheduleFrequency {
	return v.value
}

func (v *NullableHighFrequencyBackupScheduleFrequency) Set(val *HighFrequencyBackupScheduleFrequency) {
	v.value = val
	v.isSet = true
}

func (v NullableHighFrequencyBackupScheduleFrequency) IsSet() bool {
	return v.isSet
}

func (v *NullableHighFrequencyBackupScheduleFrequency) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHighFrequencyBackupScheduleFrequency(val *HighFrequencyBackupScheduleFrequency) *NullableHighFrequencyBackupScheduleFrequency {
	return &NullableHighFrequencyBackupScheduleFrequency{value: val, isSet: true}
}

func (v NullableHighFrequencyBackupScheduleFrequency) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHighFrequencyBackupScheduleFrequency) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

