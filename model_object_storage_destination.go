/*
Eon API

The Eon.io REST API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eon

import (
	"encoding/json"
)

// checks if the ObjectStorageDestination type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ObjectStorageDestination{}

// ObjectStorageDestination struct for ObjectStorageDestination
type ObjectStorageDestination struct {
	S3Bucket *S3RestoreTarget `json:"s3Bucket,omitempty"`
	StorageAccount *StorageAccountRestoreTarget `json:"storageAccount,omitempty"`
}

// NewObjectStorageDestination instantiates a new ObjectStorageDestination object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewObjectStorageDestination() *ObjectStorageDestination {
	this := ObjectStorageDestination{}
	return &this
}

// NewObjectStorageDestinationWithDefaults instantiates a new ObjectStorageDestination object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewObjectStorageDestinationWithDefaults() *ObjectStorageDestination {
	this := ObjectStorageDestination{}
	return &this
}

// GetS3Bucket returns the S3Bucket field value if set, zero value otherwise.
func (o *ObjectStorageDestination) GetS3Bucket() S3RestoreTarget {
	if o == nil || IsNil(o.S3Bucket) {
		var ret S3RestoreTarget
		return ret
	}
	return *o.S3Bucket
}

// GetS3BucketOk returns a tuple with the S3Bucket field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjectStorageDestination) GetS3BucketOk() (*S3RestoreTarget, bool) {
	if o == nil || IsNil(o.S3Bucket) {
		return nil, false
	}
	return o.S3Bucket, true
}

// HasS3Bucket returns a boolean if a field has been set.
func (o *ObjectStorageDestination) HasS3Bucket() bool {
	if o != nil && !IsNil(o.S3Bucket) {
		return true
	}

	return false
}

// SetS3Bucket gets a reference to the given S3RestoreTarget and assigns it to the S3Bucket field.
func (o *ObjectStorageDestination) SetS3Bucket(v S3RestoreTarget) {
	o.S3Bucket = &v
}

// GetStorageAccount returns the StorageAccount field value if set, zero value otherwise.
func (o *ObjectStorageDestination) GetStorageAccount() StorageAccountRestoreTarget {
	if o == nil || IsNil(o.StorageAccount) {
		var ret StorageAccountRestoreTarget
		return ret
	}
	return *o.StorageAccount
}

// GetStorageAccountOk returns a tuple with the StorageAccount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjectStorageDestination) GetStorageAccountOk() (*StorageAccountRestoreTarget, bool) {
	if o == nil || IsNil(o.StorageAccount) {
		return nil, false
	}
	return o.StorageAccount, true
}

// HasStorageAccount returns a boolean if a field has been set.
func (o *ObjectStorageDestination) HasStorageAccount() bool {
	if o != nil && !IsNil(o.StorageAccount) {
		return true
	}

	return false
}

// SetStorageAccount gets a reference to the given StorageAccountRestoreTarget and assigns it to the StorageAccount field.
func (o *ObjectStorageDestination) SetStorageAccount(v StorageAccountRestoreTarget) {
	o.StorageAccount = &v
}

func (o ObjectStorageDestination) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ObjectStorageDestination) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.S3Bucket) {
		toSerialize["s3Bucket"] = o.S3Bucket
	}
	if !IsNil(o.StorageAccount) {
		toSerialize["storageAccount"] = o.StorageAccount
	}
	return toSerialize, nil
}

type NullableObjectStorageDestination struct {
	value *ObjectStorageDestination
	isSet bool
}

func (v NullableObjectStorageDestination) Get() *ObjectStorageDestination {
	return v.value
}

func (v *NullableObjectStorageDestination) Set(val *ObjectStorageDestination) {
	v.value = val
	v.isSet = true
}

func (v NullableObjectStorageDestination) IsSet() bool {
	return v.isSet
}

func (v *NullableObjectStorageDestination) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableObjectStorageDestination(val *ObjectStorageDestination) *NullableObjectStorageDestination {
	return &NullableObjectStorageDestination{value: val, isSet: true}
}

func (v NullableObjectStorageDestination) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableObjectStorageDestination) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


