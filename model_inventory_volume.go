/*
Eon API

The Eon.io REST API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eon

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the InventoryVolume type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &InventoryVolume{}

// InventoryVolume struct for InventoryVolume
type InventoryVolume struct {
	// The volume's cloud-provider-assigned resource ID.
	ProviderVolumeId string `json:"providerVolumeId"`
	// Path of the volume on the machine it's attached to.
	Path string `json:"path"`
	// Region the volume is hosted in.
	Region string `json:"region"`
	// ID of the encryption key used to encrypt the volume.
	EncryptionKeyId *string `json:"encryptionKeyId,omitempty"`
	// Volume tags as key-value pairs. Both keys and values are strings. If a tag is a key with no value, the value is presented as an empty string.  **Example:** `{\"primary\": \"\"}`
	Tags map[string]string `json:"tags"`
	// Volume availability zone.
	AvailabilityZone string         `json:"availabilityZone"`
	VolumeSettings   VolumeSettings `json:"volumeSettings"`
}

type _InventoryVolume InventoryVolume

// NewInventoryVolume instantiates a new InventoryVolume object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInventoryVolume(providerVolumeId string, path string, region string, tags map[string]string, availabilityZone string, volumeSettings VolumeSettings) *InventoryVolume {
	this := InventoryVolume{}
	this.ProviderVolumeId = providerVolumeId
	this.Path = path
	this.Region = region
	this.Tags = tags
	this.AvailabilityZone = availabilityZone
	this.VolumeSettings = volumeSettings
	return &this
}

// NewInventoryVolumeWithDefaults instantiates a new InventoryVolume object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInventoryVolumeWithDefaults() *InventoryVolume {
	this := InventoryVolume{}
	return &this
}

// GetProviderVolumeId returns the ProviderVolumeId field value
func (o *InventoryVolume) GetProviderVolumeId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ProviderVolumeId
}

// GetProviderVolumeIdOk returns a tuple with the ProviderVolumeId field value
// and a boolean to check if the value has been set.
func (o *InventoryVolume) GetProviderVolumeIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProviderVolumeId, true
}

// SetProviderVolumeId sets field value
func (o *InventoryVolume) SetProviderVolumeId(v string) {
	o.ProviderVolumeId = v
}

// GetPath returns the Path field value
func (o *InventoryVolume) GetPath() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Path
}

// GetPathOk returns a tuple with the Path field value
// and a boolean to check if the value has been set.
func (o *InventoryVolume) GetPathOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Path, true
}

// SetPath sets field value
func (o *InventoryVolume) SetPath(v string) {
	o.Path = v
}

// GetRegion returns the Region field value
func (o *InventoryVolume) GetRegion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Region
}

// GetRegionOk returns a tuple with the Region field value
// and a boolean to check if the value has been set.
func (o *InventoryVolume) GetRegionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Region, true
}

// SetRegion sets field value
func (o *InventoryVolume) SetRegion(v string) {
	o.Region = v
}

// GetEncryptionKeyId returns the EncryptionKeyId field value if set, zero value otherwise.
func (o *InventoryVolume) GetEncryptionKeyId() string {
	if o == nil || IsNil(o.EncryptionKeyId) {
		var ret string
		return ret
	}
	return *o.EncryptionKeyId
}

// GetEncryptionKeyIdOk returns a tuple with the EncryptionKeyId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InventoryVolume) GetEncryptionKeyIdOk() (*string, bool) {
	if o == nil || IsNil(o.EncryptionKeyId) {
		return nil, false
	}
	return o.EncryptionKeyId, true
}

// HasEncryptionKeyId returns a boolean if a field has been set.
func (o *InventoryVolume) HasEncryptionKeyId() bool {
	if o != nil && !IsNil(o.EncryptionKeyId) {
		return true
	}

	return false
}

// SetEncryptionKeyId gets a reference to the given string and assigns it to the EncryptionKeyId field.
func (o *InventoryVolume) SetEncryptionKeyId(v string) {
	o.EncryptionKeyId = &v
}

// GetTags returns the Tags field value
func (o *InventoryVolume) GetTags() map[string]string {
	if o == nil {
		var ret map[string]string
		return ret
	}

	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value
// and a boolean to check if the value has been set.
func (o *InventoryVolume) GetTagsOk() (*map[string]string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Tags, true
}

// SetTags sets field value
func (o *InventoryVolume) SetTags(v map[string]string) {
	o.Tags = v
}

// GetAvailabilityZone returns the AvailabilityZone field value
func (o *InventoryVolume) GetAvailabilityZone() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AvailabilityZone
}

// GetAvailabilityZoneOk returns a tuple with the AvailabilityZone field value
// and a boolean to check if the value has been set.
func (o *InventoryVolume) GetAvailabilityZoneOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AvailabilityZone, true
}

// SetAvailabilityZone sets field value
func (o *InventoryVolume) SetAvailabilityZone(v string) {
	o.AvailabilityZone = v
}

// GetVolumeSettings returns the VolumeSettings field value
func (o *InventoryVolume) GetVolumeSettings() VolumeSettings {
	if o == nil {
		var ret VolumeSettings
		return ret
	}

	return o.VolumeSettings
}

// GetVolumeSettingsOk returns a tuple with the VolumeSettings field value
// and a boolean to check if the value has been set.
func (o *InventoryVolume) GetVolumeSettingsOk() (*VolumeSettings, bool) {
	if o == nil {
		return nil, false
	}
	return &o.VolumeSettings, true
}

// SetVolumeSettings sets field value
func (o *InventoryVolume) SetVolumeSettings(v VolumeSettings) {
	o.VolumeSettings = v
}

func (o InventoryVolume) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o InventoryVolume) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["providerVolumeId"] = o.ProviderVolumeId
	toSerialize["path"] = o.Path
	toSerialize["region"] = o.Region
	if !IsNil(o.EncryptionKeyId) {
		toSerialize["encryptionKeyId"] = o.EncryptionKeyId
	}
	toSerialize["tags"] = o.Tags
	toSerialize["availabilityZone"] = o.AvailabilityZone
	toSerialize["volumeSettings"] = o.VolumeSettings
	return toSerialize, nil
}

func (o *InventoryVolume) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"providerVolumeId",
		"path",
		"region",
		"tags",
		"availabilityZone",
		"volumeSettings",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varInventoryVolume := _InventoryVolume{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	//decoder.DisallowUnknownFields()
	err = decoder.Decode(&varInventoryVolume)

	if err != nil {
		return err
	}

	*o = InventoryVolume(varInventoryVolume)

	return err
}

type NullableInventoryVolume struct {
	value *InventoryVolume
	isSet bool
}

func (v NullableInventoryVolume) Get() *InventoryVolume {
	return v.value
}

func (v *NullableInventoryVolume) Set(val *InventoryVolume) {
	v.value = val
	v.isSet = true
}

func (v NullableInventoryVolume) IsSet() bool {
	return v.isSet
}

func (v *NullableInventoryVolume) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInventoryVolume(val *InventoryVolume) *NullableInventoryVolume {
	return &NullableInventoryVolume{value: val, isSet: true}
}

func (v NullableInventoryVolume) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInventoryVolume) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
