/*
Eon API

The Eon.io REST API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eon

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the SubnetPerAvailabilityZone type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SubnetPerAvailabilityZone{}

// SubnetPerAvailabilityZone struct for SubnetPerAvailabilityZone
type SubnetPerAvailabilityZone struct {
	// Availability zone.
	AvailabilityZone string `json:"availabilityZone"`
	// Subnet ID to use.
	SubnetId string `json:"subnetId"`
}

type _SubnetPerAvailabilityZone SubnetPerAvailabilityZone

// NewSubnetPerAvailabilityZone instantiates a new SubnetPerAvailabilityZone object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSubnetPerAvailabilityZone(availabilityZone string, subnetId string) *SubnetPerAvailabilityZone {
	this := SubnetPerAvailabilityZone{}
	this.AvailabilityZone = availabilityZone
	this.SubnetId = subnetId
	return &this
}

// NewSubnetPerAvailabilityZoneWithDefaults instantiates a new SubnetPerAvailabilityZone object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSubnetPerAvailabilityZoneWithDefaults() *SubnetPerAvailabilityZone {
	this := SubnetPerAvailabilityZone{}
	return &this
}

// GetAvailabilityZone returns the AvailabilityZone field value
func (o *SubnetPerAvailabilityZone) GetAvailabilityZone() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AvailabilityZone
}

// GetAvailabilityZoneOk returns a tuple with the AvailabilityZone field value
// and a boolean to check if the value has been set.
func (o *SubnetPerAvailabilityZone) GetAvailabilityZoneOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AvailabilityZone, true
}

// SetAvailabilityZone sets field value
func (o *SubnetPerAvailabilityZone) SetAvailabilityZone(v string) {
	o.AvailabilityZone = v
}

// GetSubnetId returns the SubnetId field value
func (o *SubnetPerAvailabilityZone) GetSubnetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SubnetId
}

// GetSubnetIdOk returns a tuple with the SubnetId field value
// and a boolean to check if the value has been set.
func (o *SubnetPerAvailabilityZone) GetSubnetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SubnetId, true
}

// SetSubnetId sets field value
func (o *SubnetPerAvailabilityZone) SetSubnetId(v string) {
	o.SubnetId = v
}

func (o SubnetPerAvailabilityZone) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SubnetPerAvailabilityZone) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["availabilityZone"] = o.AvailabilityZone
	toSerialize["subnetId"] = o.SubnetId
	return toSerialize, nil
}

func (o *SubnetPerAvailabilityZone) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"availabilityZone",
		"subnetId",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSubnetPerAvailabilityZone := _SubnetPerAvailabilityZone{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	//decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSubnetPerAvailabilityZone)

	if err != nil {
		return err
	}

	*o = SubnetPerAvailabilityZone(varSubnetPerAvailabilityZone)

	return err
}

type NullableSubnetPerAvailabilityZone struct {
	value *SubnetPerAvailabilityZone
	isSet bool
}

func (v NullableSubnetPerAvailabilityZone) Get() *SubnetPerAvailabilityZone {
	return v.value
}

func (v *NullableSubnetPerAvailabilityZone) Set(val *SubnetPerAvailabilityZone) {
	v.value = val
	v.isSet = true
}

func (v NullableSubnetPerAvailabilityZone) IsSet() bool {
	return v.isSet
}

func (v *NullableSubnetPerAvailabilityZone) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSubnetPerAvailabilityZone(val *SubnetPerAvailabilityZone) *NullableSubnetPerAvailabilityZone {
	return &NullableSubnetPerAvailabilityZone{value: val, isSet: true}
}

func (v NullableSubnetPerAvailabilityZone) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSubnetPerAvailabilityZone) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
