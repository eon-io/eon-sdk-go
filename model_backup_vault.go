/*
Eon API

The Eon.io REST API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eon

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the BackupVault type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BackupVault{}

// BackupVault struct for BackupVault
type BackupVault struct {
	// Vault ID.
	Id string `json:"id"`
	// Eon-assigned ID of the vault account.
	VaultAccountId string `json:"vaultAccountId"`
	// Cloud provider-assigned ID of the vault account.
	ProviderAccountId string `json:"providerAccountId"`
	// Vault display name.
	Name string `json:"name"`
	// Region where the vault is located.
	Region string `json:"region"`
	// Whether the vault is in an Eon-managed vault account.
	IsManagedByEon bool `json:"isManagedByEon"`
	VaultAttributes VaultProviderAttributes `json:"vaultAttributes"`
}

type _BackupVault BackupVault

// NewBackupVault instantiates a new BackupVault object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBackupVault(id string, vaultAccountId string, providerAccountId string, name string, region string, isManagedByEon bool, vaultAttributes VaultProviderAttributes) *BackupVault {
	this := BackupVault{}
	this.Id = id
	this.VaultAccountId = vaultAccountId
	this.ProviderAccountId = providerAccountId
	this.Name = name
	this.Region = region
	this.IsManagedByEon = isManagedByEon
	this.VaultAttributes = vaultAttributes
	return &this
}

// NewBackupVaultWithDefaults instantiates a new BackupVault object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBackupVaultWithDefaults() *BackupVault {
	this := BackupVault{}
	return &this
}

// GetId returns the Id field value
func (o *BackupVault) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *BackupVault) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *BackupVault) SetId(v string) {
	o.Id = v
}

// GetVaultAccountId returns the VaultAccountId field value
func (o *BackupVault) GetVaultAccountId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.VaultAccountId
}

// GetVaultAccountIdOk returns a tuple with the VaultAccountId field value
// and a boolean to check if the value has been set.
func (o *BackupVault) GetVaultAccountIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.VaultAccountId, true
}

// SetVaultAccountId sets field value
func (o *BackupVault) SetVaultAccountId(v string) {
	o.VaultAccountId = v
}

// GetProviderAccountId returns the ProviderAccountId field value
func (o *BackupVault) GetProviderAccountId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ProviderAccountId
}

// GetProviderAccountIdOk returns a tuple with the ProviderAccountId field value
// and a boolean to check if the value has been set.
func (o *BackupVault) GetProviderAccountIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProviderAccountId, true
}

// SetProviderAccountId sets field value
func (o *BackupVault) SetProviderAccountId(v string) {
	o.ProviderAccountId = v
}

// GetName returns the Name field value
func (o *BackupVault) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *BackupVault) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *BackupVault) SetName(v string) {
	o.Name = v
}

// GetRegion returns the Region field value
func (o *BackupVault) GetRegion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Region
}

// GetRegionOk returns a tuple with the Region field value
// and a boolean to check if the value has been set.
func (o *BackupVault) GetRegionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Region, true
}

// SetRegion sets field value
func (o *BackupVault) SetRegion(v string) {
	o.Region = v
}

// GetIsManagedByEon returns the IsManagedByEon field value
func (o *BackupVault) GetIsManagedByEon() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsManagedByEon
}

// GetIsManagedByEonOk returns a tuple with the IsManagedByEon field value
// and a boolean to check if the value has been set.
func (o *BackupVault) GetIsManagedByEonOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsManagedByEon, true
}

// SetIsManagedByEon sets field value
func (o *BackupVault) SetIsManagedByEon(v bool) {
	o.IsManagedByEon = v
}

// GetVaultAttributes returns the VaultAttributes field value
func (o *BackupVault) GetVaultAttributes() VaultProviderAttributes {
	if o == nil {
		var ret VaultProviderAttributes
		return ret
	}

	return o.VaultAttributes
}

// GetVaultAttributesOk returns a tuple with the VaultAttributes field value
// and a boolean to check if the value has been set.
func (o *BackupVault) GetVaultAttributesOk() (*VaultProviderAttributes, bool) {
	if o == nil {
		return nil, false
	}
	return &o.VaultAttributes, true
}

// SetVaultAttributes sets field value
func (o *BackupVault) SetVaultAttributes(v VaultProviderAttributes) {
	o.VaultAttributes = v
}

func (o BackupVault) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BackupVault) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["vaultAccountId"] = o.VaultAccountId
	toSerialize["providerAccountId"] = o.ProviderAccountId
	toSerialize["name"] = o.Name
	toSerialize["region"] = o.Region
	toSerialize["isManagedByEon"] = o.IsManagedByEon
	toSerialize["vaultAttributes"] = o.VaultAttributes
	return toSerialize, nil
}

func (o *BackupVault) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"vaultAccountId",
		"providerAccountId",
		"name",
		"region",
		"isManagedByEon",
		"vaultAttributes",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varBackupVault := _BackupVault{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	//decoder.DisallowUnknownFields()
	err = decoder.Decode(&varBackupVault)

	if err != nil {
		return err
	}

	*o = BackupVault(varBackupVault)

	return err
}

type NullableBackupVault struct {
	value *BackupVault
	isSet bool
}

func (v NullableBackupVault) Get() *BackupVault {
	return v.value
}

func (v *NullableBackupVault) Set(val *BackupVault) {
	v.value = val
	v.isSet = true
}

func (v NullableBackupVault) IsSet() bool {
	return v.isSet
}

func (v *NullableBackupVault) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBackupVault(val *BackupVault) *NullableBackupVault {
	return &NullableBackupVault{value: val, isSet: true}
}

func (v NullableBackupVault) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBackupVault) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


