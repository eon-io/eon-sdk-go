/*
Eon API

The Eon.io REST API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eon

import (
	"encoding/json"
)

// checks if the AwsVaultConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AwsVaultConfig{}

// AwsVaultConfig AWS-specific vault configuration. 
type AwsVaultConfig struct {
	// ARN of the KMS key used for encryption.
	EncryptionKey *string `json:"encryptionKey,omitempty"`
}

// NewAwsVaultConfig instantiates a new AwsVaultConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAwsVaultConfig() *AwsVaultConfig {
	this := AwsVaultConfig{}
	return &this
}

// NewAwsVaultConfigWithDefaults instantiates a new AwsVaultConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAwsVaultConfigWithDefaults() *AwsVaultConfig {
	this := AwsVaultConfig{}
	return &this
}

// GetEncryptionKey returns the EncryptionKey field value if set, zero value otherwise.
func (o *AwsVaultConfig) GetEncryptionKey() string {
	if o == nil || IsNil(o.EncryptionKey) {
		var ret string
		return ret
	}
	return *o.EncryptionKey
}

// GetEncryptionKeyOk returns a tuple with the EncryptionKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AwsVaultConfig) GetEncryptionKeyOk() (*string, bool) {
	if o == nil || IsNil(o.EncryptionKey) {
		return nil, false
	}
	return o.EncryptionKey, true
}

// HasEncryptionKey returns a boolean if a field has been set.
func (o *AwsVaultConfig) HasEncryptionKey() bool {
	if o != nil && !IsNil(o.EncryptionKey) {
		return true
	}

	return false
}

// SetEncryptionKey gets a reference to the given string and assigns it to the EncryptionKey field.
func (o *AwsVaultConfig) SetEncryptionKey(v string) {
	o.EncryptionKey = &v
}

func (o AwsVaultConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AwsVaultConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.EncryptionKey) {
		toSerialize["encryptionKey"] = o.EncryptionKey
	}
	return toSerialize, nil
}

type NullableAwsVaultConfig struct {
	value *AwsVaultConfig
	isSet bool
}

func (v NullableAwsVaultConfig) Get() *AwsVaultConfig {
	return v.value
}

func (v *NullableAwsVaultConfig) Set(val *AwsVaultConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableAwsVaultConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableAwsVaultConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAwsVaultConfig(val *AwsVaultConfig) *NullableAwsVaultConfig {
	return &NullableAwsVaultConfig{value: val, isSet: true}
}

func (v NullableAwsVaultConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAwsVaultConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


