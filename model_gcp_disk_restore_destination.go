/*
Eon API

The Eon.io REST API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eon

import (
	"encoding/json"
)

// checks if the GcpDiskRestoreDestination type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GcpDiskRestoreDestination{}

// GcpDiskRestoreDestination struct for GcpDiskRestoreDestination
type GcpDiskRestoreDestination struct {
	GcpDisk *GcpDiskTarget `json:"gcpDisk,omitempty"`
}

// NewGcpDiskRestoreDestination instantiates a new GcpDiskRestoreDestination object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGcpDiskRestoreDestination() *GcpDiskRestoreDestination {
	this := GcpDiskRestoreDestination{}
	return &this
}

// NewGcpDiskRestoreDestinationWithDefaults instantiates a new GcpDiskRestoreDestination object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGcpDiskRestoreDestinationWithDefaults() *GcpDiskRestoreDestination {
	this := GcpDiskRestoreDestination{}
	return &this
}

// GetGcpDisk returns the GcpDisk field value if set, zero value otherwise.
func (o *GcpDiskRestoreDestination) GetGcpDisk() GcpDiskTarget {
	if o == nil || IsNil(o.GcpDisk) {
		var ret GcpDiskTarget
		return ret
	}
	return *o.GcpDisk
}

// GetGcpDiskOk returns a tuple with the GcpDisk field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GcpDiskRestoreDestination) GetGcpDiskOk() (*GcpDiskTarget, bool) {
	if o == nil || IsNil(o.GcpDisk) {
		return nil, false
	}
	return o.GcpDisk, true
}

// HasGcpDisk returns a boolean if a field has been set.
func (o *GcpDiskRestoreDestination) HasGcpDisk() bool {
	if o != nil && !IsNil(o.GcpDisk) {
		return true
	}

	return false
}

// SetGcpDisk gets a reference to the given GcpDiskTarget and assigns it to the GcpDisk field.
func (o *GcpDiskRestoreDestination) SetGcpDisk(v GcpDiskTarget) {
	o.GcpDisk = &v
}

func (o GcpDiskRestoreDestination) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GcpDiskRestoreDestination) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.GcpDisk) {
		toSerialize["gcpDisk"] = o.GcpDisk
	}
	return toSerialize, nil
}

type NullableGcpDiskRestoreDestination struct {
	value *GcpDiskRestoreDestination
	isSet bool
}

func (v NullableGcpDiskRestoreDestination) Get() *GcpDiskRestoreDestination {
	return v.value
}

func (v *NullableGcpDiskRestoreDestination) Set(val *GcpDiskRestoreDestination) {
	v.value = val
	v.isSet = true
}

func (v NullableGcpDiskRestoreDestination) IsSet() bool {
	return v.isSet
}

func (v *NullableGcpDiskRestoreDestination) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGcpDiskRestoreDestination(val *GcpDiskRestoreDestination) *NullableGcpDiskRestoreDestination {
	return &NullableGcpDiskRestoreDestination{value: val, isSet: true}
}

func (v NullableGcpDiskRestoreDestination) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGcpDiskRestoreDestination) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


