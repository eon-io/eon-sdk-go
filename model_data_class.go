/*
Eon API

The Eon.io REST API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eon

import (
	"encoding/json"
	"fmt"
)

// DataClass Data classes.
type DataClass string

// List of DataClass
const (
	FI DataClass = "FI"
	PHI DataClass = "PHI"
	PII DataClass = "PII"
	DATA_CLASS_UNSPECIFIED DataClass = "DATA_CLASS_UNSPECIFIED"
)

// All allowed values of DataClass enum
var AllowedDataClassEnumValues = []DataClass{
	"FI",
	"PHI",
	"PII",
	"DATA_CLASS_UNSPECIFIED",
}

func (v *DataClass) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := DataClass(value)
	for _, existing := range AllowedDataClassEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid DataClass", value)
}

// NewDataClassFromValue returns a pointer to a valid DataClass
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewDataClassFromValue(v string) (*DataClass, error) {
	ev := DataClass(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for DataClass: valid values are %v", v, AllowedDataClassEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v DataClass) IsValid() bool {
	for _, existing := range AllowedDataClassEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to DataClass value
func (v DataClass) Ptr() *DataClass {
	return &v
}

type NullableDataClass struct {
	value *DataClass
	isSet bool
}

func (v NullableDataClass) Get() *DataClass {
	return v.value
}

func (v *NullableDataClass) Set(val *DataClass) {
	v.value = val
	v.isSet = true
}

func (v NullableDataClass) IsSet() bool {
	return v.isSet
}

func (v *NullableDataClass) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDataClass(val *DataClass) *NullableDataClass {
	return &NullableDataClass{value: val, isSet: true}
}

func (v NullableDataClass) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDataClass) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

