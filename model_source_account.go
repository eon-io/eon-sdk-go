/*
Eon API

The Eon.io REST API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eon

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the SourceAccount type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SourceAccount{}

// SourceAccount struct for SourceAccount
type SourceAccount struct {
	// Eon-assigned account ID.
	Id string `json:"id"`
	// Account display name in Eon.
	Name string `json:"name"`
	// Cloud-provider-assigned account ID.
	ProviderAccountId string `json:"providerAccountId"`
	Status AccountState `json:"status"`
	SourceAccountConfig AccountConfig `json:"sourceAccountConfig"`
}

type _SourceAccount SourceAccount

// NewSourceAccount instantiates a new SourceAccount object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSourceAccount(id string, name string, providerAccountId string, status AccountState, sourceAccountConfig AccountConfig) *SourceAccount {
	this := SourceAccount{}
	this.Id = id
	this.Name = name
	this.ProviderAccountId = providerAccountId
	this.Status = status
	this.SourceAccountConfig = sourceAccountConfig
	return &this
}

// NewSourceAccountWithDefaults instantiates a new SourceAccount object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSourceAccountWithDefaults() *SourceAccount {
	this := SourceAccount{}
	return &this
}

// GetId returns the Id field value
func (o *SourceAccount) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *SourceAccount) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *SourceAccount) SetId(v string) {
	o.Id = v
}

// GetName returns the Name field value
func (o *SourceAccount) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *SourceAccount) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *SourceAccount) SetName(v string) {
	o.Name = v
}

// GetProviderAccountId returns the ProviderAccountId field value
func (o *SourceAccount) GetProviderAccountId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ProviderAccountId
}

// GetProviderAccountIdOk returns a tuple with the ProviderAccountId field value
// and a boolean to check if the value has been set.
func (o *SourceAccount) GetProviderAccountIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProviderAccountId, true
}

// SetProviderAccountId sets field value
func (o *SourceAccount) SetProviderAccountId(v string) {
	o.ProviderAccountId = v
}

// GetStatus returns the Status field value
func (o *SourceAccount) GetStatus() AccountState {
	if o == nil {
		var ret AccountState
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *SourceAccount) GetStatusOk() (*AccountState, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *SourceAccount) SetStatus(v AccountState) {
	o.Status = v
}

// GetSourceAccountConfig returns the SourceAccountConfig field value
func (o *SourceAccount) GetSourceAccountConfig() AccountConfig {
	if o == nil {
		var ret AccountConfig
		return ret
	}

	return o.SourceAccountConfig
}

// GetSourceAccountConfigOk returns a tuple with the SourceAccountConfig field value
// and a boolean to check if the value has been set.
func (o *SourceAccount) GetSourceAccountConfigOk() (*AccountConfig, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SourceAccountConfig, true
}

// SetSourceAccountConfig sets field value
func (o *SourceAccount) SetSourceAccountConfig(v AccountConfig) {
	o.SourceAccountConfig = v
}

func (o SourceAccount) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SourceAccount) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["name"] = o.Name
	toSerialize["providerAccountId"] = o.ProviderAccountId
	toSerialize["status"] = o.Status
	toSerialize["sourceAccountConfig"] = o.SourceAccountConfig
	return toSerialize, nil
}

func (o *SourceAccount) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"name",
		"providerAccountId",
		"status",
		"sourceAccountConfig",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSourceAccount := _SourceAccount{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	// Allow unknown fields to handle API schema differences
	// decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSourceAccount)

	if err != nil {
		return err
	}

	*o = SourceAccount(varSourceAccount)

	return err
}

type NullableSourceAccount struct {
	value *SourceAccount
	isSet bool
}

func (v NullableSourceAccount) Get() *SourceAccount {
	return v.value
}

func (v *NullableSourceAccount) Set(val *SourceAccount) {
	v.value = val
	v.isSet = true
}

func (v NullableSourceAccount) IsSet() bool {
	return v.isSet
}

func (v *NullableSourceAccount) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSourceAccount(val *SourceAccount) *NullableSourceAccount {
	return &NullableSourceAccount{value: val, isSet: true}
}

func (v NullableSourceAccount) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSourceAccount) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


