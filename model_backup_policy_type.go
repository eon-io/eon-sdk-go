/*
Eon API

The Eon.io REST API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eon

import (
	"encoding/json"
	"fmt"
)

// BackupPolicyType The type of the policy. 
type BackupPolicyType string

// List of BackupPolicyType
const (
	BACKUP_POLICY_TYPE_UNSPECIFIED BackupPolicyType = "UNSPECIFIED"
	BACKUP_POLICY_TYPE_STANDARD BackupPolicyType = "STANDARD"
	BACKUP_POLICY_TYPE_HIGH_FREQUENCY BackupPolicyType = "HIGH_FREQUENCY"
	BACKUP_POLICY_TYPE_PITR BackupPolicyType = "PITR"
	BACKUP_POLICY_TYPE_DLSG BackupPolicyType = "DLSG"
)

// All allowed values of BackupPolicyType enum
var AllowedBackupPolicyTypeEnumValues = []BackupPolicyType{
	"UNSPECIFIED",
	"STANDARD",
	"HIGH_FREQUENCY",
	"PITR",
	"DLSG",
}

func (v *BackupPolicyType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := BackupPolicyType(value)
	for _, existing := range AllowedBackupPolicyTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid BackupPolicyType", value)
}

// NewBackupPolicyTypeFromValue returns a pointer to a valid BackupPolicyType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewBackupPolicyTypeFromValue(v string) (*BackupPolicyType, error) {
	ev := BackupPolicyType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for BackupPolicyType: valid values are %v", v, AllowedBackupPolicyTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v BackupPolicyType) IsValid() bool {
	for _, existing := range AllowedBackupPolicyTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to BackupPolicyType value
func (v BackupPolicyType) Ptr() *BackupPolicyType {
	return &v
}

type NullableBackupPolicyType struct {
	value *BackupPolicyType
	isSet bool
}

func (v NullableBackupPolicyType) Get() *BackupPolicyType {
	return v.value
}

func (v *NullableBackupPolicyType) Set(val *BackupPolicyType) {
	v.value = val
	v.isSet = true
}

func (v NullableBackupPolicyType) IsSet() bool {
	return v.isSet
}

func (v *NullableBackupPolicyType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBackupPolicyType(val *BackupPolicyType) *NullableBackupPolicyType {
	return &NullableBackupPolicyType{value: val, isSet: true}
}

func (v NullableBackupPolicyType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBackupPolicyType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

