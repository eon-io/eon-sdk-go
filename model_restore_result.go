/*
Eon API

The Eon.io REST API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eon

import (
	"encoding/json"
)

// checks if the RestoreResult type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RestoreResult{}

// RestoreResult struct for RestoreResult
type RestoreResult struct {
	AwsEc2Instance NullableAwsEc2InstanceRestoreResult `json:"awsEc2Instance,omitempty"`
	AwsEbsVolume NullableAwsEbsVolumeRestoreResult `json:"awsEbsVolume,omitempty"`
	AzureDisk NullableAzureDiskRestoreResult `json:"azureDisk,omitempty"`
	AzureVmInstance NullableAzureVmInstanceRestoreResult `json:"azureVmInstance,omitempty"`
}

// NewRestoreResult instantiates a new RestoreResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRestoreResult() *RestoreResult {
	this := RestoreResult{}
	return &this
}

// NewRestoreResultWithDefaults instantiates a new RestoreResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRestoreResultWithDefaults() *RestoreResult {
	this := RestoreResult{}
	return &this
}

// GetAwsEc2Instance returns the AwsEc2Instance field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RestoreResult) GetAwsEc2Instance() AwsEc2InstanceRestoreResult {
	if o == nil || IsNil(o.AwsEc2Instance.Get()) {
		var ret AwsEc2InstanceRestoreResult
		return ret
	}
	return *o.AwsEc2Instance.Get()
}

// GetAwsEc2InstanceOk returns a tuple with the AwsEc2Instance field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RestoreResult) GetAwsEc2InstanceOk() (*AwsEc2InstanceRestoreResult, bool) {
	if o == nil {
		return nil, false
	}
	return o.AwsEc2Instance.Get(), o.AwsEc2Instance.IsSet()
}

// HasAwsEc2Instance returns a boolean if a field has been set.
func (o *RestoreResult) HasAwsEc2Instance() bool {
	if o != nil && o.AwsEc2Instance.IsSet() {
		return true
	}

	return false
}

// SetAwsEc2Instance gets a reference to the given NullableAwsEc2InstanceRestoreResult and assigns it to the AwsEc2Instance field.
func (o *RestoreResult) SetAwsEc2Instance(v AwsEc2InstanceRestoreResult) {
	o.AwsEc2Instance.Set(&v)
}
// SetAwsEc2InstanceNil sets the value for AwsEc2Instance to be an explicit nil
func (o *RestoreResult) SetAwsEc2InstanceNil() {
	o.AwsEc2Instance.Set(nil)
}

// UnsetAwsEc2Instance ensures that no value is present for AwsEc2Instance, not even an explicit nil
func (o *RestoreResult) UnsetAwsEc2Instance() {
	o.AwsEc2Instance.Unset()
}

// GetAwsEbsVolume returns the AwsEbsVolume field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RestoreResult) GetAwsEbsVolume() AwsEbsVolumeRestoreResult {
	if o == nil || IsNil(o.AwsEbsVolume.Get()) {
		var ret AwsEbsVolumeRestoreResult
		return ret
	}
	return *o.AwsEbsVolume.Get()
}

// GetAwsEbsVolumeOk returns a tuple with the AwsEbsVolume field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RestoreResult) GetAwsEbsVolumeOk() (*AwsEbsVolumeRestoreResult, bool) {
	if o == nil {
		return nil, false
	}
	return o.AwsEbsVolume.Get(), o.AwsEbsVolume.IsSet()
}

// HasAwsEbsVolume returns a boolean if a field has been set.
func (o *RestoreResult) HasAwsEbsVolume() bool {
	if o != nil && o.AwsEbsVolume.IsSet() {
		return true
	}

	return false
}

// SetAwsEbsVolume gets a reference to the given NullableAwsEbsVolumeRestoreResult and assigns it to the AwsEbsVolume field.
func (o *RestoreResult) SetAwsEbsVolume(v AwsEbsVolumeRestoreResult) {
	o.AwsEbsVolume.Set(&v)
}
// SetAwsEbsVolumeNil sets the value for AwsEbsVolume to be an explicit nil
func (o *RestoreResult) SetAwsEbsVolumeNil() {
	o.AwsEbsVolume.Set(nil)
}

// UnsetAwsEbsVolume ensures that no value is present for AwsEbsVolume, not even an explicit nil
func (o *RestoreResult) UnsetAwsEbsVolume() {
	o.AwsEbsVolume.Unset()
}

// GetAzureDisk returns the AzureDisk field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RestoreResult) GetAzureDisk() AzureDiskRestoreResult {
	if o == nil || IsNil(o.AzureDisk.Get()) {
		var ret AzureDiskRestoreResult
		return ret
	}
	return *o.AzureDisk.Get()
}

// GetAzureDiskOk returns a tuple with the AzureDisk field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RestoreResult) GetAzureDiskOk() (*AzureDiskRestoreResult, bool) {
	if o == nil {
		return nil, false
	}
	return o.AzureDisk.Get(), o.AzureDisk.IsSet()
}

// HasAzureDisk returns a boolean if a field has been set.
func (o *RestoreResult) HasAzureDisk() bool {
	if o != nil && o.AzureDisk.IsSet() {
		return true
	}

	return false
}

// SetAzureDisk gets a reference to the given NullableAzureDiskRestoreResult and assigns it to the AzureDisk field.
func (o *RestoreResult) SetAzureDisk(v AzureDiskRestoreResult) {
	o.AzureDisk.Set(&v)
}
// SetAzureDiskNil sets the value for AzureDisk to be an explicit nil
func (o *RestoreResult) SetAzureDiskNil() {
	o.AzureDisk.Set(nil)
}

// UnsetAzureDisk ensures that no value is present for AzureDisk, not even an explicit nil
func (o *RestoreResult) UnsetAzureDisk() {
	o.AzureDisk.Unset()
}

// GetAzureVmInstance returns the AzureVmInstance field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RestoreResult) GetAzureVmInstance() AzureVmInstanceRestoreResult {
	if o == nil || IsNil(o.AzureVmInstance.Get()) {
		var ret AzureVmInstanceRestoreResult
		return ret
	}
	return *o.AzureVmInstance.Get()
}

// GetAzureVmInstanceOk returns a tuple with the AzureVmInstance field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RestoreResult) GetAzureVmInstanceOk() (*AzureVmInstanceRestoreResult, bool) {
	if o == nil {
		return nil, false
	}
	return o.AzureVmInstance.Get(), o.AzureVmInstance.IsSet()
}

// HasAzureVmInstance returns a boolean if a field has been set.
func (o *RestoreResult) HasAzureVmInstance() bool {
	if o != nil && o.AzureVmInstance.IsSet() {
		return true
	}

	return false
}

// SetAzureVmInstance gets a reference to the given NullableAzureVmInstanceRestoreResult and assigns it to the AzureVmInstance field.
func (o *RestoreResult) SetAzureVmInstance(v AzureVmInstanceRestoreResult) {
	o.AzureVmInstance.Set(&v)
}
// SetAzureVmInstanceNil sets the value for AzureVmInstance to be an explicit nil
func (o *RestoreResult) SetAzureVmInstanceNil() {
	o.AzureVmInstance.Set(nil)
}

// UnsetAzureVmInstance ensures that no value is present for AzureVmInstance, not even an explicit nil
func (o *RestoreResult) UnsetAzureVmInstance() {
	o.AzureVmInstance.Unset()
}

func (o RestoreResult) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RestoreResult) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.AwsEc2Instance.IsSet() {
		toSerialize["awsEc2Instance"] = o.AwsEc2Instance.Get()
	}
	if o.AwsEbsVolume.IsSet() {
		toSerialize["awsEbsVolume"] = o.AwsEbsVolume.Get()
	}
	if o.AzureDisk.IsSet() {
		toSerialize["azureDisk"] = o.AzureDisk.Get()
	}
	if o.AzureVmInstance.IsSet() {
		toSerialize["azureVmInstance"] = o.AzureVmInstance.Get()
	}
	return toSerialize, nil
}

type NullableRestoreResult struct {
	value *RestoreResult
	isSet bool
}

func (v NullableRestoreResult) Get() *RestoreResult {
	return v.value
}

func (v *NullableRestoreResult) Set(val *RestoreResult) {
	v.value = val
	v.isSet = true
}

func (v NullableRestoreResult) IsSet() bool {
	return v.isSet
}

func (v *NullableRestoreResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRestoreResult(val *RestoreResult) *NullableRestoreResult {
	return &NullableRestoreResult{value: val, isSet: true}
}

func (v NullableRestoreResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRestoreResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


