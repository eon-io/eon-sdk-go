/*
Eon API

The Eon.io REST API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eon

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the GcpSubnetPerRegion type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GcpSubnetPerRegion{}

// GcpSubnetPerRegion struct for GcpSubnetPerRegion
type GcpSubnetPerRegion struct {
	// Region.
	Region string `json:"region"`
	// Subnet Name.
	SubnetName string `json:"subnetName"`
}

type _GcpSubnetPerRegion GcpSubnetPerRegion

// NewGcpSubnetPerRegion instantiates a new GcpSubnetPerRegion object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGcpSubnetPerRegion(region string, subnetName string) *GcpSubnetPerRegion {
	this := GcpSubnetPerRegion{}
	this.Region = region
	this.SubnetName = subnetName
	return &this
}

// NewGcpSubnetPerRegionWithDefaults instantiates a new GcpSubnetPerRegion object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGcpSubnetPerRegionWithDefaults() *GcpSubnetPerRegion {
	this := GcpSubnetPerRegion{}
	return &this
}

// GetRegion returns the Region field value
func (o *GcpSubnetPerRegion) GetRegion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Region
}

// GetRegionOk returns a tuple with the Region field value
// and a boolean to check if the value has been set.
func (o *GcpSubnetPerRegion) GetRegionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Region, true
}

// SetRegion sets field value
func (o *GcpSubnetPerRegion) SetRegion(v string) {
	o.Region = v
}

// GetSubnetName returns the SubnetName field value
func (o *GcpSubnetPerRegion) GetSubnetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SubnetName
}

// GetSubnetNameOk returns a tuple with the SubnetName field value
// and a boolean to check if the value has been set.
func (o *GcpSubnetPerRegion) GetSubnetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SubnetName, true
}

// SetSubnetName sets field value
func (o *GcpSubnetPerRegion) SetSubnetName(v string) {
	o.SubnetName = v
}

func (o GcpSubnetPerRegion) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GcpSubnetPerRegion) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["region"] = o.Region
	toSerialize["subnetName"] = o.SubnetName
	return toSerialize, nil
}

func (o *GcpSubnetPerRegion) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"region",
		"subnetName",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varGcpSubnetPerRegion := _GcpSubnetPerRegion{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	//decoder.DisallowUnknownFields()
	err = decoder.Decode(&varGcpSubnetPerRegion)

	if err != nil {
		return err
	}

	*o = GcpSubnetPerRegion(varGcpSubnetPerRegion)

	return err
}

type NullableGcpSubnetPerRegion struct {
	value *GcpSubnetPerRegion
	isSet bool
}

func (v NullableGcpSubnetPerRegion) Get() *GcpSubnetPerRegion {
	return v.value
}

func (v *NullableGcpSubnetPerRegion) Set(val *GcpSubnetPerRegion) {
	v.value = val
	v.isSet = true
}

func (v NullableGcpSubnetPerRegion) IsSet() bool {
	return v.isSet
}

func (v *NullableGcpSubnetPerRegion) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGcpSubnetPerRegion(val *GcpSubnetPerRegion) *NullableGcpSubnetPerRegion {
	return &NullableGcpSubnetPerRegion{value: val, isSet: true}
}

func (v NullableGcpSubnetPerRegion) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGcpSubnetPerRegion) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


