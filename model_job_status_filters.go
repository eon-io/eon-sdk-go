/*
Eon API

The Eon.io REST API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eon

import (
	"encoding/json"
)

// checks if the JobStatusFilters type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &JobStatusFilters{}

// JobStatusFilters struct for JobStatusFilters
type JobStatusFilters struct {
	In []JobStatus `json:"in,omitempty"`
	NotIn []JobStatus `json:"notIn,omitempty"`
}

// NewJobStatusFilters instantiates a new JobStatusFilters object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewJobStatusFilters() *JobStatusFilters {
	this := JobStatusFilters{}
	return &this
}

// NewJobStatusFiltersWithDefaults instantiates a new JobStatusFilters object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewJobStatusFiltersWithDefaults() *JobStatusFilters {
	this := JobStatusFilters{}
	return &this
}

// GetIn returns the In field value if set, zero value otherwise.
func (o *JobStatusFilters) GetIn() []JobStatus {
	if o == nil || IsNil(o.In) {
		var ret []JobStatus
		return ret
	}
	return o.In
}

// GetInOk returns a tuple with the In field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JobStatusFilters) GetInOk() ([]JobStatus, bool) {
	if o == nil || IsNil(o.In) {
		return nil, false
	}
	return o.In, true
}

// HasIn returns a boolean if a field has been set.
func (o *JobStatusFilters) HasIn() bool {
	if o != nil && !IsNil(o.In) {
		return true
	}

	return false
}

// SetIn gets a reference to the given []JobStatus and assigns it to the In field.
func (o *JobStatusFilters) SetIn(v []JobStatus) {
	o.In = v
}

// GetNotIn returns the NotIn field value if set, zero value otherwise.
func (o *JobStatusFilters) GetNotIn() []JobStatus {
	if o == nil || IsNil(o.NotIn) {
		var ret []JobStatus
		return ret
	}
	return o.NotIn
}

// GetNotInOk returns a tuple with the NotIn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JobStatusFilters) GetNotInOk() ([]JobStatus, bool) {
	if o == nil || IsNil(o.NotIn) {
		return nil, false
	}
	return o.NotIn, true
}

// HasNotIn returns a boolean if a field has been set.
func (o *JobStatusFilters) HasNotIn() bool {
	if o != nil && !IsNil(o.NotIn) {
		return true
	}

	return false
}

// SetNotIn gets a reference to the given []JobStatus and assigns it to the NotIn field.
func (o *JobStatusFilters) SetNotIn(v []JobStatus) {
	o.NotIn = v
}

func (o JobStatusFilters) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o JobStatusFilters) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.In) {
		toSerialize["in"] = o.In
	}
	if !IsNil(o.NotIn) {
		toSerialize["notIn"] = o.NotIn
	}
	return toSerialize, nil
}

type NullableJobStatusFilters struct {
	value *JobStatusFilters
	isSet bool
}

func (v NullableJobStatusFilters) Get() *JobStatusFilters {
	return v.value
}

func (v *NullableJobStatusFilters) Set(val *JobStatusFilters) {
	v.value = val
	v.isSet = true
}

func (v NullableJobStatusFilters) IsSet() bool {
	return v.isSet
}

func (v *NullableJobStatusFilters) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJobStatusFilters(val *JobStatusFilters) *NullableJobStatusFilters {
	return &NullableJobStatusFilters{value: val, isSet: true}
}

func (v NullableJobStatusFilters) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJobStatusFilters) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


