/*
Eon API

The Eon.io REST API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eon

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the BackupPolicy type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BackupPolicy{}

// BackupPolicy struct for BackupPolicy
type BackupPolicy struct {
	// Backup policy ID.
	Id string `json:"id"`
	// Backup policy display name.
	Name string `json:"name"`
	// Whether the backup policy is enabled.
	Enabled bool `json:"enabled"`
	ResourceSelector BackupPolicyResourceSelector `json:"resourceSelector"`
	BackupPlan BackupPolicyPlan `json:"backupPlan"`
}

type _BackupPolicy BackupPolicy

// NewBackupPolicy instantiates a new BackupPolicy object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBackupPolicy(id string, name string, enabled bool, resourceSelector BackupPolicyResourceSelector, backupPlan BackupPolicyPlan) *BackupPolicy {
	this := BackupPolicy{}
	this.Id = id
	this.Name = name
	this.Enabled = enabled
	this.ResourceSelector = resourceSelector
	this.BackupPlan = backupPlan
	return &this
}

// NewBackupPolicyWithDefaults instantiates a new BackupPolicy object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBackupPolicyWithDefaults() *BackupPolicy {
	this := BackupPolicy{}
	return &this
}

// GetId returns the Id field value
func (o *BackupPolicy) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *BackupPolicy) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *BackupPolicy) SetId(v string) {
	o.Id = v
}

// GetName returns the Name field value
func (o *BackupPolicy) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *BackupPolicy) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *BackupPolicy) SetName(v string) {
	o.Name = v
}

// GetEnabled returns the Enabled field value
func (o *BackupPolicy) GetEnabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value
// and a boolean to check if the value has been set.
func (o *BackupPolicy) GetEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Enabled, true
}

// SetEnabled sets field value
func (o *BackupPolicy) SetEnabled(v bool) {
	o.Enabled = v
}

// GetResourceSelector returns the ResourceSelector field value
func (o *BackupPolicy) GetResourceSelector() BackupPolicyResourceSelector {
	if o == nil {
		var ret BackupPolicyResourceSelector
		return ret
	}

	return o.ResourceSelector
}

// GetResourceSelectorOk returns a tuple with the ResourceSelector field value
// and a boolean to check if the value has been set.
func (o *BackupPolicy) GetResourceSelectorOk() (*BackupPolicyResourceSelector, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ResourceSelector, true
}

// SetResourceSelector sets field value
func (o *BackupPolicy) SetResourceSelector(v BackupPolicyResourceSelector) {
	o.ResourceSelector = v
}

// GetBackupPlan returns the BackupPlan field value
func (o *BackupPolicy) GetBackupPlan() BackupPolicyPlan {
	if o == nil {
		var ret BackupPolicyPlan
		return ret
	}

	return o.BackupPlan
}

// GetBackupPlanOk returns a tuple with the BackupPlan field value
// and a boolean to check if the value has been set.
func (o *BackupPolicy) GetBackupPlanOk() (*BackupPolicyPlan, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BackupPlan, true
}

// SetBackupPlan sets field value
func (o *BackupPolicy) SetBackupPlan(v BackupPolicyPlan) {
	o.BackupPlan = v
}

func (o BackupPolicy) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BackupPolicy) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["name"] = o.Name
	toSerialize["enabled"] = o.Enabled
	toSerialize["resourceSelector"] = o.ResourceSelector
	toSerialize["backupPlan"] = o.BackupPlan
	return toSerialize, nil
}

func (o *BackupPolicy) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"name",
		"enabled",
		"resourceSelector",
		"backupPlan",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varBackupPolicy := _BackupPolicy{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	//decoder.DisallowUnknownFields()
	err = decoder.Decode(&varBackupPolicy)

	if err != nil {
		return err
	}

	*o = BackupPolicy(varBackupPolicy)

	return err
}

type NullableBackupPolicy struct {
	value *BackupPolicy
	isSet bool
}

func (v NullableBackupPolicy) Get() *BackupPolicy {
	return v.value
}

func (v *NullableBackupPolicy) Set(val *BackupPolicy) {
	v.value = val
	v.isSet = true
}

func (v NullableBackupPolicy) IsSet() bool {
	return v.isSet
}

func (v *NullableBackupPolicy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBackupPolicy(val *BackupPolicy) *NullableBackupPolicy {
	return &NullableBackupPolicy{value: val, isSet: true}
}

func (v NullableBackupPolicy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBackupPolicy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


