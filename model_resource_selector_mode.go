/*
Eon API

The Eon.io REST API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eon

import (
	"encoding/json"
	"fmt"
)

// ResourceSelectorMode the model 'ResourceSelectorMode'
type ResourceSelectorMode string

// List of ResourceSelectorMode
const (
	RESOURCE_SELECTOR_MODE_ALL         ResourceSelectorMode = "ALL"
	RESOURCE_SELECTOR_MODE_NONE        ResourceSelectorMode = "NONE"
	RESOURCE_SELECTOR_MODE_CONDITIONAL ResourceSelectorMode = "CONDITIONAL"
)

// All allowed values of ResourceSelectorMode enum
var AllowedResourceSelectorModeEnumValues = []ResourceSelectorMode{
	"ALL",
	"NONE",
	"CONDITIONAL",
}

func (v *ResourceSelectorMode) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ResourceSelectorMode(value)
	for _, existing := range AllowedResourceSelectorModeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ResourceSelectorMode", value)
}

// NewResourceSelectorModeFromValue returns a pointer to a valid ResourceSelectorMode
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewResourceSelectorModeFromValue(v string) (*ResourceSelectorMode, error) {
	ev := ResourceSelectorMode(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ResourceSelectorMode: valid values are %v", v, AllowedResourceSelectorModeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ResourceSelectorMode) IsValid() bool {
	for _, existing := range AllowedResourceSelectorModeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ResourceSelectorMode value
func (v ResourceSelectorMode) Ptr() *ResourceSelectorMode {
	return &v
}

type NullableResourceSelectorMode struct {
	value *ResourceSelectorMode
	isSet bool
}

func (v NullableResourceSelectorMode) Get() *ResourceSelectorMode {
	return v.value
}

func (v *NullableResourceSelectorMode) Set(val *ResourceSelectorMode) {
	v.value = val
	v.isSet = true
}

func (v NullableResourceSelectorMode) IsSet() bool {
	return v.isSet
}

func (v *NullableResourceSelectorMode) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResourceSelectorMode(val *ResourceSelectorMode) *NullableResourceSelectorMode {
	return &NullableResourceSelectorMode{value: val, isSet: true}
}

func (v NullableResourceSelectorMode) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResourceSelectorMode) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
