/*
Eon API

The Eon.io REST API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eon

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ConnectSourceAccountRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConnectSourceAccountRequest{}

// ConnectSourceAccountRequest struct for ConnectSourceAccountRequest
type ConnectSourceAccountRequest struct {
	// Account display name in Eon.
	Name *string `json:"name,omitempty"`
	SourceAccountAttributes AccountConfigInput `json:"sourceAccountAttributes"`
}

type _ConnectSourceAccountRequest ConnectSourceAccountRequest

// NewConnectSourceAccountRequest instantiates a new ConnectSourceAccountRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConnectSourceAccountRequest(sourceAccountAttributes AccountConfigInput) *ConnectSourceAccountRequest {
	this := ConnectSourceAccountRequest{}
	this.SourceAccountAttributes = sourceAccountAttributes
	return &this
}

// NewConnectSourceAccountRequestWithDefaults instantiates a new ConnectSourceAccountRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConnectSourceAccountRequestWithDefaults() *ConnectSourceAccountRequest {
	this := ConnectSourceAccountRequest{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ConnectSourceAccountRequest) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectSourceAccountRequest) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ConnectSourceAccountRequest) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ConnectSourceAccountRequest) SetName(v string) {
	o.Name = &v
}

// GetSourceAccountAttributes returns the SourceAccountAttributes field value
func (o *ConnectSourceAccountRequest) GetSourceAccountAttributes() AccountConfigInput {
	if o == nil {
		var ret AccountConfigInput
		return ret
	}

	return o.SourceAccountAttributes
}

// GetSourceAccountAttributesOk returns a tuple with the SourceAccountAttributes field value
// and a boolean to check if the value has been set.
func (o *ConnectSourceAccountRequest) GetSourceAccountAttributesOk() (*AccountConfigInput, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SourceAccountAttributes, true
}

// SetSourceAccountAttributes sets field value
func (o *ConnectSourceAccountRequest) SetSourceAccountAttributes(v AccountConfigInput) {
	o.SourceAccountAttributes = v
}

func (o ConnectSourceAccountRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConnectSourceAccountRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	toSerialize["sourceAccountAttributes"] = o.SourceAccountAttributes
	return toSerialize, nil
}

func (o *ConnectSourceAccountRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"sourceAccountAttributes",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varConnectSourceAccountRequest := _ConnectSourceAccountRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	//decoder.DisallowUnknownFields()
	err = decoder.Decode(&varConnectSourceAccountRequest)

	if err != nil {
		return err
	}

	*o = ConnectSourceAccountRequest(varConnectSourceAccountRequest)

	return err
}

type NullableConnectSourceAccountRequest struct {
	value *ConnectSourceAccountRequest
	isSet bool
}

func (v NullableConnectSourceAccountRequest) Get() *ConnectSourceAccountRequest {
	return v.value
}

func (v *NullableConnectSourceAccountRequest) Set(val *ConnectSourceAccountRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableConnectSourceAccountRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableConnectSourceAccountRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConnectSourceAccountRequest(val *ConnectSourceAccountRequest) *NullableConnectSourceAccountRequest {
	return &NullableConnectSourceAccountRequest{value: val, isSet: true}
}

func (v NullableConnectSourceAccountRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConnectSourceAccountRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


