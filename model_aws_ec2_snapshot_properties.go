/*
Eon API

The Eon.io REST API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eon

import (
	"encoding/json"
)

// checks if the AwsEc2SnapshotProperties type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AwsEc2SnapshotProperties{}

// AwsEc2SnapshotProperties Properties of the original AWS EC2 instance at the time the snapshot was taken. Present only when `resourceType` is set to `AWS_EC2`. 
type AwsEc2SnapshotProperties struct {
	// Instance type.
	InstanceType *string `json:"instanceType,omitempty"`
	// ID of the subnet the instance is in.
	SubnetId *string `json:"subnetId,omitempty"`
	// IDs of security groups associated with the resource.
	SecurityGroupIds []string `json:"securityGroupIds,omitempty"`
	// The resource's instance profile.
	InstanceProfileName *string `json:"instanceProfileName,omitempty"`
	// List of volumes attached to the resource.
	Volumes []InventorySnapshotVolume `json:"volumes,omitempty"`
}

// NewAwsEc2SnapshotProperties instantiates a new AwsEc2SnapshotProperties object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAwsEc2SnapshotProperties() *AwsEc2SnapshotProperties {
	this := AwsEc2SnapshotProperties{}
	return &this
}

// NewAwsEc2SnapshotPropertiesWithDefaults instantiates a new AwsEc2SnapshotProperties object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAwsEc2SnapshotPropertiesWithDefaults() *AwsEc2SnapshotProperties {
	this := AwsEc2SnapshotProperties{}
	return &this
}

// GetInstanceType returns the InstanceType field value if set, zero value otherwise.
func (o *AwsEc2SnapshotProperties) GetInstanceType() string {
	if o == nil || IsNil(o.InstanceType) {
		var ret string
		return ret
	}
	return *o.InstanceType
}

// GetInstanceTypeOk returns a tuple with the InstanceType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AwsEc2SnapshotProperties) GetInstanceTypeOk() (*string, bool) {
	if o == nil || IsNil(o.InstanceType) {
		return nil, false
	}
	return o.InstanceType, true
}

// HasInstanceType returns a boolean if a field has been set.
func (o *AwsEc2SnapshotProperties) HasInstanceType() bool {
	if o != nil && !IsNil(o.InstanceType) {
		return true
	}

	return false
}

// SetInstanceType gets a reference to the given string and assigns it to the InstanceType field.
func (o *AwsEc2SnapshotProperties) SetInstanceType(v string) {
	o.InstanceType = &v
}

// GetSubnetId returns the SubnetId field value if set, zero value otherwise.
func (o *AwsEc2SnapshotProperties) GetSubnetId() string {
	if o == nil || IsNil(o.SubnetId) {
		var ret string
		return ret
	}
	return *o.SubnetId
}

// GetSubnetIdOk returns a tuple with the SubnetId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AwsEc2SnapshotProperties) GetSubnetIdOk() (*string, bool) {
	if o == nil || IsNil(o.SubnetId) {
		return nil, false
	}
	return o.SubnetId, true
}

// HasSubnetId returns a boolean if a field has been set.
func (o *AwsEc2SnapshotProperties) HasSubnetId() bool {
	if o != nil && !IsNil(o.SubnetId) {
		return true
	}

	return false
}

// SetSubnetId gets a reference to the given string and assigns it to the SubnetId field.
func (o *AwsEc2SnapshotProperties) SetSubnetId(v string) {
	o.SubnetId = &v
}

// GetSecurityGroupIds returns the SecurityGroupIds field value if set, zero value otherwise.
func (o *AwsEc2SnapshotProperties) GetSecurityGroupIds() []string {
	if o == nil || IsNil(o.SecurityGroupIds) {
		var ret []string
		return ret
	}
	return o.SecurityGroupIds
}

// GetSecurityGroupIdsOk returns a tuple with the SecurityGroupIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AwsEc2SnapshotProperties) GetSecurityGroupIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.SecurityGroupIds) {
		return nil, false
	}
	return o.SecurityGroupIds, true
}

// HasSecurityGroupIds returns a boolean if a field has been set.
func (o *AwsEc2SnapshotProperties) HasSecurityGroupIds() bool {
	if o != nil && !IsNil(o.SecurityGroupIds) {
		return true
	}

	return false
}

// SetSecurityGroupIds gets a reference to the given []string and assigns it to the SecurityGroupIds field.
func (o *AwsEc2SnapshotProperties) SetSecurityGroupIds(v []string) {
	o.SecurityGroupIds = v
}

// GetInstanceProfileName returns the InstanceProfileName field value if set, zero value otherwise.
func (o *AwsEc2SnapshotProperties) GetInstanceProfileName() string {
	if o == nil || IsNil(o.InstanceProfileName) {
		var ret string
		return ret
	}
	return *o.InstanceProfileName
}

// GetInstanceProfileNameOk returns a tuple with the InstanceProfileName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AwsEc2SnapshotProperties) GetInstanceProfileNameOk() (*string, bool) {
	if o == nil || IsNil(o.InstanceProfileName) {
		return nil, false
	}
	return o.InstanceProfileName, true
}

// HasInstanceProfileName returns a boolean if a field has been set.
func (o *AwsEc2SnapshotProperties) HasInstanceProfileName() bool {
	if o != nil && !IsNil(o.InstanceProfileName) {
		return true
	}

	return false
}

// SetInstanceProfileName gets a reference to the given string and assigns it to the InstanceProfileName field.
func (o *AwsEc2SnapshotProperties) SetInstanceProfileName(v string) {
	o.InstanceProfileName = &v
}

// GetVolumes returns the Volumes field value if set, zero value otherwise.
func (o *AwsEc2SnapshotProperties) GetVolumes() []InventorySnapshotVolume {
	if o == nil || IsNil(o.Volumes) {
		var ret []InventorySnapshotVolume
		return ret
	}
	return o.Volumes
}

// GetVolumesOk returns a tuple with the Volumes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AwsEc2SnapshotProperties) GetVolumesOk() ([]InventorySnapshotVolume, bool) {
	if o == nil || IsNil(o.Volumes) {
		return nil, false
	}
	return o.Volumes, true
}

// HasVolumes returns a boolean if a field has been set.
func (o *AwsEc2SnapshotProperties) HasVolumes() bool {
	if o != nil && !IsNil(o.Volumes) {
		return true
	}

	return false
}

// SetVolumes gets a reference to the given []InventorySnapshotVolume and assigns it to the Volumes field.
func (o *AwsEc2SnapshotProperties) SetVolumes(v []InventorySnapshotVolume) {
	o.Volumes = v
}

func (o AwsEc2SnapshotProperties) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AwsEc2SnapshotProperties) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.InstanceType) {
		toSerialize["instanceType"] = o.InstanceType
	}
	if !IsNil(o.SubnetId) {
		toSerialize["subnetId"] = o.SubnetId
	}
	if !IsNil(o.SecurityGroupIds) {
		toSerialize["securityGroupIds"] = o.SecurityGroupIds
	}
	if !IsNil(o.InstanceProfileName) {
		toSerialize["instanceProfileName"] = o.InstanceProfileName
	}
	if !IsNil(o.Volumes) {
		toSerialize["volumes"] = o.Volumes
	}
	return toSerialize, nil
}

type NullableAwsEc2SnapshotProperties struct {
	value *AwsEc2SnapshotProperties
	isSet bool
}

func (v NullableAwsEc2SnapshotProperties) Get() *AwsEc2SnapshotProperties {
	return v.value
}

func (v *NullableAwsEc2SnapshotProperties) Set(val *AwsEc2SnapshotProperties) {
	v.value = val
	v.isSet = true
}

func (v NullableAwsEc2SnapshotProperties) IsSet() bool {
	return v.isSet
}

func (v *NullableAwsEc2SnapshotProperties) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAwsEc2SnapshotProperties(val *AwsEc2SnapshotProperties) *NullableAwsEc2SnapshotProperties {
	return &NullableAwsEc2SnapshotProperties{value: val, isSet: true}
}

func (v NullableAwsEc2SnapshotProperties) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAwsEc2SnapshotProperties) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


