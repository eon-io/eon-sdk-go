/*
Eon API

The Eon.io REST API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eon

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the GcpNetworkConnectivityConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GcpNetworkConnectivityConfig{}

// GcpNetworkConnectivityConfig struct for GcpNetworkConnectivityConfig
type GcpNetworkConnectivityConfig struct {
	// Network name.
	Network string `json:"network"`
	// Subnets to configure for regions in the network. For regions not specified in this list, Eon attempts to use the default subnet. 
	SubnetsPerRegion []GcpSubnetPerRegion `json:"subnetsPerRegion,omitempty"`
}

type _GcpNetworkConnectivityConfig GcpNetworkConnectivityConfig

// NewGcpNetworkConnectivityConfig instantiates a new GcpNetworkConnectivityConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGcpNetworkConnectivityConfig(network string) *GcpNetworkConnectivityConfig {
	this := GcpNetworkConnectivityConfig{}
	this.Network = network
	return &this
}

// NewGcpNetworkConnectivityConfigWithDefaults instantiates a new GcpNetworkConnectivityConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGcpNetworkConnectivityConfigWithDefaults() *GcpNetworkConnectivityConfig {
	this := GcpNetworkConnectivityConfig{}
	return &this
}

// GetNetwork returns the Network field value
func (o *GcpNetworkConnectivityConfig) GetNetwork() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Network
}

// GetNetworkOk returns a tuple with the Network field value
// and a boolean to check if the value has been set.
func (o *GcpNetworkConnectivityConfig) GetNetworkOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Network, true
}

// SetNetwork sets field value
func (o *GcpNetworkConnectivityConfig) SetNetwork(v string) {
	o.Network = v
}

// GetSubnetsPerRegion returns the SubnetsPerRegion field value if set, zero value otherwise.
func (o *GcpNetworkConnectivityConfig) GetSubnetsPerRegion() []GcpSubnetPerRegion {
	if o == nil || IsNil(o.SubnetsPerRegion) {
		var ret []GcpSubnetPerRegion
		return ret
	}
	return o.SubnetsPerRegion
}

// GetSubnetsPerRegionOk returns a tuple with the SubnetsPerRegion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GcpNetworkConnectivityConfig) GetSubnetsPerRegionOk() ([]GcpSubnetPerRegion, bool) {
	if o == nil || IsNil(o.SubnetsPerRegion) {
		return nil, false
	}
	return o.SubnetsPerRegion, true
}

// HasSubnetsPerRegion returns a boolean if a field has been set.
func (o *GcpNetworkConnectivityConfig) HasSubnetsPerRegion() bool {
	if o != nil && !IsNil(o.SubnetsPerRegion) {
		return true
	}

	return false
}

// SetSubnetsPerRegion gets a reference to the given []GcpSubnetPerRegion and assigns it to the SubnetsPerRegion field.
func (o *GcpNetworkConnectivityConfig) SetSubnetsPerRegion(v []GcpSubnetPerRegion) {
	o.SubnetsPerRegion = v
}

func (o GcpNetworkConnectivityConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GcpNetworkConnectivityConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["network"] = o.Network
	if !IsNil(o.SubnetsPerRegion) {
		toSerialize["subnetsPerRegion"] = o.SubnetsPerRegion
	}
	return toSerialize, nil
}

func (o *GcpNetworkConnectivityConfig) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"network",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varGcpNetworkConnectivityConfig := _GcpNetworkConnectivityConfig{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	//decoder.DisallowUnknownFields()
	err = decoder.Decode(&varGcpNetworkConnectivityConfig)

	if err != nil {
		return err
	}

	*o = GcpNetworkConnectivityConfig(varGcpNetworkConnectivityConfig)

	return err
}

type NullableGcpNetworkConnectivityConfig struct {
	value *GcpNetworkConnectivityConfig
	isSet bool
}

func (v NullableGcpNetworkConnectivityConfig) Get() *GcpNetworkConnectivityConfig {
	return v.value
}

func (v *NullableGcpNetworkConnectivityConfig) Set(val *GcpNetworkConnectivityConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableGcpNetworkConnectivityConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableGcpNetworkConnectivityConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGcpNetworkConnectivityConfig(val *GcpNetworkConnectivityConfig) *NullableGcpNetworkConnectivityConfig {
	return &NullableGcpNetworkConnectivityConfig{value: val, isSet: true}
}

func (v NullableGcpNetworkConnectivityConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGcpNetworkConnectivityConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


