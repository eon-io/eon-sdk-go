/*
Eon API

The Eon.io REST API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eon

import (
	"encoding/json"
)

// checks if the BackupPolicyExpression type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BackupPolicyExpression{}

// BackupPolicyExpression struct for BackupPolicyExpression
type BackupPolicyExpression struct {
	Group             NullableBackupPolicyGroupCondition `json:"group,omitempty"`
	ResourceType      NullableResourceTypeCondition      `json:"resourceType,omitempty"`
	DataClasses       NullableDataClassesCondition       `json:"dataClasses,omitempty"`
	Environment       NullableEnvironmentCondition       `json:"environment,omitempty"`
	Apps              NullableAppsCondition              `json:"apps,omitempty"`
	CloudProvider     NullableCloudProviderCondition     `json:"cloudProvider,omitempty"`
	AccountId         NullableAccountIdCondition         `json:"accountId,omitempty"`
	SourceRegion      NullableRegionCondition            `json:"sourceRegion,omitempty"`
	Vpc               NullableVpcCondition               `json:"vpc,omitempty"`
	Subnets           NullableSubnetsCondition           `json:"subnets,omitempty"`
	ResourceGroupName NullableResourceGroupNameCondition `json:"resourceGroupName,omitempty"`
	ResourceName      NullableResourceNameCondition      `json:"resourceName,omitempty"`
	ResourceId        NullableResourceIdCondition        `json:"resourceId,omitempty"`
	TagKeys           NullableTagKeysCondition           `json:"tagKeys,omitempty"`
	TagKeyValues      NullableTagKeyValuesCondition      `json:"tagKeyValues,omitempty"`
}

// NewBackupPolicyExpression instantiates a new BackupPolicyExpression object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBackupPolicyExpression() *BackupPolicyExpression {
	this := BackupPolicyExpression{}
	return &this
}

// NewBackupPolicyExpressionWithDefaults instantiates a new BackupPolicyExpression object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBackupPolicyExpressionWithDefaults() *BackupPolicyExpression {
	this := BackupPolicyExpression{}
	return &this
}

// GetGroup returns the Group field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BackupPolicyExpression) GetGroup() BackupPolicyGroupCondition {
	if o == nil || IsNil(o.Group.Get()) {
		var ret BackupPolicyGroupCondition
		return ret
	}
	return *o.Group.Get()
}

// GetGroupOk returns a tuple with the Group field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BackupPolicyExpression) GetGroupOk() (*BackupPolicyGroupCondition, bool) {
	if o == nil {
		return nil, false
	}
	return o.Group.Get(), o.Group.IsSet()
}

// HasGroup returns a boolean if a field has been set.
func (o *BackupPolicyExpression) HasGroup() bool {
	if o != nil && o.Group.IsSet() {
		return true
	}

	return false
}

// SetGroup gets a reference to the given NullableBackupPolicyGroupCondition and assigns it to the Group field.
func (o *BackupPolicyExpression) SetGroup(v BackupPolicyGroupCondition) {
	o.Group.Set(&v)
}

// SetGroupNil sets the value for Group to be an explicit nil
func (o *BackupPolicyExpression) SetGroupNil() {
	o.Group.Set(nil)
}

// UnsetGroup ensures that no value is present for Group, not even an explicit nil
func (o *BackupPolicyExpression) UnsetGroup() {
	o.Group.Unset()
}

// GetResourceType returns the ResourceType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BackupPolicyExpression) GetResourceType() ResourceTypeCondition {
	if o == nil || IsNil(o.ResourceType.Get()) {
		var ret ResourceTypeCondition
		return ret
	}
	return *o.ResourceType.Get()
}

// GetResourceTypeOk returns a tuple with the ResourceType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BackupPolicyExpression) GetResourceTypeOk() (*ResourceTypeCondition, bool) {
	if o == nil {
		return nil, false
	}
	return o.ResourceType.Get(), o.ResourceType.IsSet()
}

// HasResourceType returns a boolean if a field has been set.
func (o *BackupPolicyExpression) HasResourceType() bool {
	if o != nil && o.ResourceType.IsSet() {
		return true
	}

	return false
}

// SetResourceType gets a reference to the given NullableResourceTypeCondition and assigns it to the ResourceType field.
func (o *BackupPolicyExpression) SetResourceType(v ResourceTypeCondition) {
	o.ResourceType.Set(&v)
}

// SetResourceTypeNil sets the value for ResourceType to be an explicit nil
func (o *BackupPolicyExpression) SetResourceTypeNil() {
	o.ResourceType.Set(nil)
}

// UnsetResourceType ensures that no value is present for ResourceType, not even an explicit nil
func (o *BackupPolicyExpression) UnsetResourceType() {
	o.ResourceType.Unset()
}

// GetDataClasses returns the DataClasses field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BackupPolicyExpression) GetDataClasses() DataClassesCondition {
	if o == nil || IsNil(o.DataClasses.Get()) {
		var ret DataClassesCondition
		return ret
	}
	return *o.DataClasses.Get()
}

// GetDataClassesOk returns a tuple with the DataClasses field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BackupPolicyExpression) GetDataClassesOk() (*DataClassesCondition, bool) {
	if o == nil {
		return nil, false
	}
	return o.DataClasses.Get(), o.DataClasses.IsSet()
}

// HasDataClasses returns a boolean if a field has been set.
func (o *BackupPolicyExpression) HasDataClasses() bool {
	if o != nil && o.DataClasses.IsSet() {
		return true
	}

	return false
}

// SetDataClasses gets a reference to the given NullableDataClassesCondition and assigns it to the DataClasses field.
func (o *BackupPolicyExpression) SetDataClasses(v DataClassesCondition) {
	o.DataClasses.Set(&v)
}

// SetDataClassesNil sets the value for DataClasses to be an explicit nil
func (o *BackupPolicyExpression) SetDataClassesNil() {
	o.DataClasses.Set(nil)
}

// UnsetDataClasses ensures that no value is present for DataClasses, not even an explicit nil
func (o *BackupPolicyExpression) UnsetDataClasses() {
	o.DataClasses.Unset()
}

// GetEnvironment returns the Environment field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BackupPolicyExpression) GetEnvironment() EnvironmentCondition {
	if o == nil || IsNil(o.Environment.Get()) {
		var ret EnvironmentCondition
		return ret
	}
	return *o.Environment.Get()
}

// GetEnvironmentOk returns a tuple with the Environment field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BackupPolicyExpression) GetEnvironmentOk() (*EnvironmentCondition, bool) {
	if o == nil {
		return nil, false
	}
	return o.Environment.Get(), o.Environment.IsSet()
}

// HasEnvironment returns a boolean if a field has been set.
func (o *BackupPolicyExpression) HasEnvironment() bool {
	if o != nil && o.Environment.IsSet() {
		return true
	}

	return false
}

// SetEnvironment gets a reference to the given NullableEnvironmentCondition and assigns it to the Environment field.
func (o *BackupPolicyExpression) SetEnvironment(v EnvironmentCondition) {
	o.Environment.Set(&v)
}

// SetEnvironmentNil sets the value for Environment to be an explicit nil
func (o *BackupPolicyExpression) SetEnvironmentNil() {
	o.Environment.Set(nil)
}

// UnsetEnvironment ensures that no value is present for Environment, not even an explicit nil
func (o *BackupPolicyExpression) UnsetEnvironment() {
	o.Environment.Unset()
}

// GetApps returns the Apps field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BackupPolicyExpression) GetApps() AppsCondition {
	if o == nil || IsNil(o.Apps.Get()) {
		var ret AppsCondition
		return ret
	}
	return *o.Apps.Get()
}

// GetAppsOk returns a tuple with the Apps field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BackupPolicyExpression) GetAppsOk() (*AppsCondition, bool) {
	if o == nil {
		return nil, false
	}
	return o.Apps.Get(), o.Apps.IsSet()
}

// HasApps returns a boolean if a field has been set.
func (o *BackupPolicyExpression) HasApps() bool {
	if o != nil && o.Apps.IsSet() {
		return true
	}

	return false
}

// SetApps gets a reference to the given NullableAppsCondition and assigns it to the Apps field.
func (o *BackupPolicyExpression) SetApps(v AppsCondition) {
	o.Apps.Set(&v)
}

// SetAppsNil sets the value for Apps to be an explicit nil
func (o *BackupPolicyExpression) SetAppsNil() {
	o.Apps.Set(nil)
}

// UnsetApps ensures that no value is present for Apps, not even an explicit nil
func (o *BackupPolicyExpression) UnsetApps() {
	o.Apps.Unset()
}

// GetCloudProvider returns the CloudProvider field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BackupPolicyExpression) GetCloudProvider() CloudProviderCondition {
	if o == nil || IsNil(o.CloudProvider.Get()) {
		var ret CloudProviderCondition
		return ret
	}
	return *o.CloudProvider.Get()
}

// GetCloudProviderOk returns a tuple with the CloudProvider field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BackupPolicyExpression) GetCloudProviderOk() (*CloudProviderCondition, bool) {
	if o == nil {
		return nil, false
	}
	return o.CloudProvider.Get(), o.CloudProvider.IsSet()
}

// HasCloudProvider returns a boolean if a field has been set.
func (o *BackupPolicyExpression) HasCloudProvider() bool {
	if o != nil && o.CloudProvider.IsSet() {
		return true
	}

	return false
}

// SetCloudProvider gets a reference to the given NullableCloudProviderCondition and assigns it to the CloudProvider field.
func (o *BackupPolicyExpression) SetCloudProvider(v CloudProviderCondition) {
	o.CloudProvider.Set(&v)
}

// SetCloudProviderNil sets the value for CloudProvider to be an explicit nil
func (o *BackupPolicyExpression) SetCloudProviderNil() {
	o.CloudProvider.Set(nil)
}

// UnsetCloudProvider ensures that no value is present for CloudProvider, not even an explicit nil
func (o *BackupPolicyExpression) UnsetCloudProvider() {
	o.CloudProvider.Unset()
}

// GetAccountId returns the AccountId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BackupPolicyExpression) GetAccountId() AccountIdCondition {
	if o == nil || IsNil(o.AccountId.Get()) {
		var ret AccountIdCondition
		return ret
	}
	return *o.AccountId.Get()
}

// GetAccountIdOk returns a tuple with the AccountId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BackupPolicyExpression) GetAccountIdOk() (*AccountIdCondition, bool) {
	if o == nil {
		return nil, false
	}
	return o.AccountId.Get(), o.AccountId.IsSet()
}

// HasAccountId returns a boolean if a field has been set.
func (o *BackupPolicyExpression) HasAccountId() bool {
	if o != nil && o.AccountId.IsSet() {
		return true
	}

	return false
}

// SetAccountId gets a reference to the given NullableAccountIdCondition and assigns it to the AccountId field.
func (o *BackupPolicyExpression) SetAccountId(v AccountIdCondition) {
	o.AccountId.Set(&v)
}

// SetAccountIdNil sets the value for AccountId to be an explicit nil
func (o *BackupPolicyExpression) SetAccountIdNil() {
	o.AccountId.Set(nil)
}

// UnsetAccountId ensures that no value is present for AccountId, not even an explicit nil
func (o *BackupPolicyExpression) UnsetAccountId() {
	o.AccountId.Unset()
}

// GetSourceRegion returns the SourceRegion field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BackupPolicyExpression) GetSourceRegion() RegionCondition {
	if o == nil || IsNil(o.SourceRegion.Get()) {
		var ret RegionCondition
		return ret
	}
	return *o.SourceRegion.Get()
}

// GetSourceRegionOk returns a tuple with the SourceRegion field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BackupPolicyExpression) GetSourceRegionOk() (*RegionCondition, bool) {
	if o == nil {
		return nil, false
	}
	return o.SourceRegion.Get(), o.SourceRegion.IsSet()
}

// HasSourceRegion returns a boolean if a field has been set.
func (o *BackupPolicyExpression) HasSourceRegion() bool {
	if o != nil && o.SourceRegion.IsSet() {
		return true
	}

	return false
}

// SetSourceRegion gets a reference to the given NullableRegionCondition and assigns it to the SourceRegion field.
func (o *BackupPolicyExpression) SetSourceRegion(v RegionCondition) {
	o.SourceRegion.Set(&v)
}

// SetSourceRegionNil sets the value for SourceRegion to be an explicit nil
func (o *BackupPolicyExpression) SetSourceRegionNil() {
	o.SourceRegion.Set(nil)
}

// UnsetSourceRegion ensures that no value is present for SourceRegion, not even an explicit nil
func (o *BackupPolicyExpression) UnsetSourceRegion() {
	o.SourceRegion.Unset()
}

// GetVpc returns the Vpc field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BackupPolicyExpression) GetVpc() VpcCondition {
	if o == nil || IsNil(o.Vpc.Get()) {
		var ret VpcCondition
		return ret
	}
	return *o.Vpc.Get()
}

// GetVpcOk returns a tuple with the Vpc field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BackupPolicyExpression) GetVpcOk() (*VpcCondition, bool) {
	if o == nil {
		return nil, false
	}
	return o.Vpc.Get(), o.Vpc.IsSet()
}

// HasVpc returns a boolean if a field has been set.
func (o *BackupPolicyExpression) HasVpc() bool {
	if o != nil && o.Vpc.IsSet() {
		return true
	}

	return false
}

// SetVpc gets a reference to the given NullableVpcCondition and assigns it to the Vpc field.
func (o *BackupPolicyExpression) SetVpc(v VpcCondition) {
	o.Vpc.Set(&v)
}

// SetVpcNil sets the value for Vpc to be an explicit nil
func (o *BackupPolicyExpression) SetVpcNil() {
	o.Vpc.Set(nil)
}

// UnsetVpc ensures that no value is present for Vpc, not even an explicit nil
func (o *BackupPolicyExpression) UnsetVpc() {
	o.Vpc.Unset()
}

// GetSubnets returns the Subnets field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BackupPolicyExpression) GetSubnets() SubnetsCondition {
	if o == nil || IsNil(o.Subnets.Get()) {
		var ret SubnetsCondition
		return ret
	}
	return *o.Subnets.Get()
}

// GetSubnetsOk returns a tuple with the Subnets field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BackupPolicyExpression) GetSubnetsOk() (*SubnetsCondition, bool) {
	if o == nil {
		return nil, false
	}
	return o.Subnets.Get(), o.Subnets.IsSet()
}

// HasSubnets returns a boolean if a field has been set.
func (o *BackupPolicyExpression) HasSubnets() bool {
	if o != nil && o.Subnets.IsSet() {
		return true
	}

	return false
}

// SetSubnets gets a reference to the given NullableSubnetsCondition and assigns it to the Subnets field.
func (o *BackupPolicyExpression) SetSubnets(v SubnetsCondition) {
	o.Subnets.Set(&v)
}

// SetSubnetsNil sets the value for Subnets to be an explicit nil
func (o *BackupPolicyExpression) SetSubnetsNil() {
	o.Subnets.Set(nil)
}

// UnsetSubnets ensures that no value is present for Subnets, not even an explicit nil
func (o *BackupPolicyExpression) UnsetSubnets() {
	o.Subnets.Unset()
}

// GetResourceGroupName returns the ResourceGroupName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BackupPolicyExpression) GetResourceGroupName() ResourceGroupNameCondition {
	if o == nil || IsNil(o.ResourceGroupName.Get()) {
		var ret ResourceGroupNameCondition
		return ret
	}
	return *o.ResourceGroupName.Get()
}

// GetResourceGroupNameOk returns a tuple with the ResourceGroupName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BackupPolicyExpression) GetResourceGroupNameOk() (*ResourceGroupNameCondition, bool) {
	if o == nil {
		return nil, false
	}
	return o.ResourceGroupName.Get(), o.ResourceGroupName.IsSet()
}

// HasResourceGroupName returns a boolean if a field has been set.
func (o *BackupPolicyExpression) HasResourceGroupName() bool {
	if o != nil && o.ResourceGroupName.IsSet() {
		return true
	}

	return false
}

// SetResourceGroupName gets a reference to the given NullableResourceGroupNameCondition and assigns it to the ResourceGroupName field.
func (o *BackupPolicyExpression) SetResourceGroupName(v ResourceGroupNameCondition) {
	o.ResourceGroupName.Set(&v)
}

// SetResourceGroupNameNil sets the value for ResourceGroupName to be an explicit nil
func (o *BackupPolicyExpression) SetResourceGroupNameNil() {
	o.ResourceGroupName.Set(nil)
}

// UnsetResourceGroupName ensures that no value is present for ResourceGroupName, not even an explicit nil
func (o *BackupPolicyExpression) UnsetResourceGroupName() {
	o.ResourceGroupName.Unset()
}

// GetResourceName returns the ResourceName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BackupPolicyExpression) GetResourceName() ResourceNameCondition {
	if o == nil || IsNil(o.ResourceName.Get()) {
		var ret ResourceNameCondition
		return ret
	}
	return *o.ResourceName.Get()
}

// GetResourceNameOk returns a tuple with the ResourceName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BackupPolicyExpression) GetResourceNameOk() (*ResourceNameCondition, bool) {
	if o == nil {
		return nil, false
	}
	return o.ResourceName.Get(), o.ResourceName.IsSet()
}

// HasResourceName returns a boolean if a field has been set.
func (o *BackupPolicyExpression) HasResourceName() bool {
	if o != nil && o.ResourceName.IsSet() {
		return true
	}

	return false
}

// SetResourceName gets a reference to the given NullableResourceNameCondition and assigns it to the ResourceName field.
func (o *BackupPolicyExpression) SetResourceName(v ResourceNameCondition) {
	o.ResourceName.Set(&v)
}

// SetResourceNameNil sets the value for ResourceName to be an explicit nil
func (o *BackupPolicyExpression) SetResourceNameNil() {
	o.ResourceName.Set(nil)
}

// UnsetResourceName ensures that no value is present for ResourceName, not even an explicit nil
func (o *BackupPolicyExpression) UnsetResourceName() {
	o.ResourceName.Unset()
}

// GetResourceId returns the ResourceId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BackupPolicyExpression) GetResourceId() ResourceIdCondition {
	if o == nil || IsNil(o.ResourceId.Get()) {
		var ret ResourceIdCondition
		return ret
	}
	return *o.ResourceId.Get()
}

// GetResourceIdOk returns a tuple with the ResourceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BackupPolicyExpression) GetResourceIdOk() (*ResourceIdCondition, bool) {
	if o == nil {
		return nil, false
	}
	return o.ResourceId.Get(), o.ResourceId.IsSet()
}

// HasResourceId returns a boolean if a field has been set.
func (o *BackupPolicyExpression) HasResourceId() bool {
	if o != nil && o.ResourceId.IsSet() {
		return true
	}

	return false
}

// SetResourceId gets a reference to the given NullableResourceIdCondition and assigns it to the ResourceId field.
func (o *BackupPolicyExpression) SetResourceId(v ResourceIdCondition) {
	o.ResourceId.Set(&v)
}

// SetResourceIdNil sets the value for ResourceId to be an explicit nil
func (o *BackupPolicyExpression) SetResourceIdNil() {
	o.ResourceId.Set(nil)
}

// UnsetResourceId ensures that no value is present for ResourceId, not even an explicit nil
func (o *BackupPolicyExpression) UnsetResourceId() {
	o.ResourceId.Unset()
}

// GetTagKeys returns the TagKeys field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BackupPolicyExpression) GetTagKeys() TagKeysCondition {
	if o == nil || IsNil(o.TagKeys.Get()) {
		var ret TagKeysCondition
		return ret
	}
	return *o.TagKeys.Get()
}

// GetTagKeysOk returns a tuple with the TagKeys field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BackupPolicyExpression) GetTagKeysOk() (*TagKeysCondition, bool) {
	if o == nil {
		return nil, false
	}
	return o.TagKeys.Get(), o.TagKeys.IsSet()
}

// HasTagKeys returns a boolean if a field has been set.
func (o *BackupPolicyExpression) HasTagKeys() bool {
	if o != nil && o.TagKeys.IsSet() {
		return true
	}

	return false
}

// SetTagKeys gets a reference to the given NullableTagKeysCondition and assigns it to the TagKeys field.
func (o *BackupPolicyExpression) SetTagKeys(v TagKeysCondition) {
	o.TagKeys.Set(&v)
}

// SetTagKeysNil sets the value for TagKeys to be an explicit nil
func (o *BackupPolicyExpression) SetTagKeysNil() {
	o.TagKeys.Set(nil)
}

// UnsetTagKeys ensures that no value is present for TagKeys, not even an explicit nil
func (o *BackupPolicyExpression) UnsetTagKeys() {
	o.TagKeys.Unset()
}

// GetTagKeyValues returns the TagKeyValues field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BackupPolicyExpression) GetTagKeyValues() TagKeyValuesCondition {
	if o == nil || IsNil(o.TagKeyValues.Get()) {
		var ret TagKeyValuesCondition
		return ret
	}
	return *o.TagKeyValues.Get()
}

// GetTagKeyValuesOk returns a tuple with the TagKeyValues field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BackupPolicyExpression) GetTagKeyValuesOk() (*TagKeyValuesCondition, bool) {
	if o == nil {
		return nil, false
	}
	return o.TagKeyValues.Get(), o.TagKeyValues.IsSet()
}

// HasTagKeyValues returns a boolean if a field has been set.
func (o *BackupPolicyExpression) HasTagKeyValues() bool {
	if o != nil && o.TagKeyValues.IsSet() {
		return true
	}

	return false
}

// SetTagKeyValues gets a reference to the given NullableTagKeyValuesCondition and assigns it to the TagKeyValues field.
func (o *BackupPolicyExpression) SetTagKeyValues(v TagKeyValuesCondition) {
	o.TagKeyValues.Set(&v)
}

// SetTagKeyValuesNil sets the value for TagKeyValues to be an explicit nil
func (o *BackupPolicyExpression) SetTagKeyValuesNil() {
	o.TagKeyValues.Set(nil)
}

// UnsetTagKeyValues ensures that no value is present for TagKeyValues, not even an explicit nil
func (o *BackupPolicyExpression) UnsetTagKeyValues() {
	o.TagKeyValues.Unset()
}

func (o BackupPolicyExpression) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BackupPolicyExpression) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Group.IsSet() {
		toSerialize["group"] = o.Group.Get()
	}
	if o.ResourceType.IsSet() {
		toSerialize["resourceType"] = o.ResourceType.Get()
	}
	if o.DataClasses.IsSet() {
		toSerialize["dataClasses"] = o.DataClasses.Get()
	}
	if o.Environment.IsSet() {
		toSerialize["environment"] = o.Environment.Get()
	}
	if o.Apps.IsSet() {
		toSerialize["apps"] = o.Apps.Get()
	}
	if o.CloudProvider.IsSet() {
		toSerialize["cloudProvider"] = o.CloudProvider.Get()
	}
	if o.AccountId.IsSet() {
		toSerialize["accountId"] = o.AccountId.Get()
	}
	if o.SourceRegion.IsSet() {
		toSerialize["sourceRegion"] = o.SourceRegion.Get()
	}
	if o.Vpc.IsSet() {
		toSerialize["vpc"] = o.Vpc.Get()
	}
	if o.Subnets.IsSet() {
		toSerialize["subnets"] = o.Subnets.Get()
	}
	if o.ResourceGroupName.IsSet() {
		toSerialize["resourceGroupName"] = o.ResourceGroupName.Get()
	}
	if o.ResourceName.IsSet() {
		toSerialize["resourceName"] = o.ResourceName.Get()
	}
	if o.ResourceId.IsSet() {
		toSerialize["resourceId"] = o.ResourceId.Get()
	}
	if o.TagKeys.IsSet() {
		toSerialize["tagKeys"] = o.TagKeys.Get()
	}
	if o.TagKeyValues.IsSet() {
		toSerialize["tagKeyValues"] = o.TagKeyValues.Get()
	}
	return toSerialize, nil
}

type NullableBackupPolicyExpression struct {
	value *BackupPolicyExpression
	isSet bool
}

func (v NullableBackupPolicyExpression) Get() *BackupPolicyExpression {
	return v.value
}

func (v *NullableBackupPolicyExpression) Set(val *BackupPolicyExpression) {
	v.value = val
	v.isSet = true
}

func (v NullableBackupPolicyExpression) IsSet() bool {
	return v.isSet
}

func (v *NullableBackupPolicyExpression) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBackupPolicyExpression(val *BackupPolicyExpression) *NullableBackupPolicyExpression {
	return &NullableBackupPolicyExpression{value: val, isSet: true}
}

func (v NullableBackupPolicyExpression) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBackupPolicyExpression) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
