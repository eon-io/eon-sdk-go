/*
Eon API

The Eon.io REST API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eon

import (
	"encoding/json"
	"fmt"
)

// BackupStatus Eon backup status. For an explanation of statuses, see [Backup Statuses](/docs/user-guide/monitoring/backup-statuses). 
type BackupStatus string

// List of BackupStatus
const (
	BACKUP_POSTURE_STATUS_UNSPECIFIED BackupStatus = "BACKUP_POSTURE_STATUS_UNSPECIFIED"
	NOT_BACKED_UP BackupStatus = "NOT_BACKED_UP"
	VIOLATIONS_DETECTED BackupStatus = "VIOLATIONS_DETECTED"
	GENERIC_BACKUPS BackupStatus = "GENERIC_BACKUPS"
	EXCLUDED_FROM_BACKUP BackupStatus = "EXCLUDED_FROM_BACKUP"
	ALL_VIOLATIONS_MUTED BackupStatus = "ALL_VIOLATIONS_MUTED"
	PROTECTED BackupStatus = "PROTECTED"
	INITIAL_CLASSIFICATION BackupStatus = "INITIAL_CLASSIFICATION"
	TERMINATED BackupStatus = "TERMINATED"
	UNSUPPORTED BackupStatus = "UNSUPPORTED"
	DISCONNECTED BackupStatus = "DISCONNECTED"
	ACTION_REQUIRED BackupStatus = "ACTION_REQUIRED"
	DLSG BackupStatus = "DLSG"
	LIMIT_EXCEEDED BackupStatus = "LIMIT_EXCEEDED"
)

// All allowed values of BackupStatus enum
var AllowedBackupStatusEnumValues = []BackupStatus{
	"BACKUP_POSTURE_STATUS_UNSPECIFIED",
	"NOT_BACKED_UP",
	"VIOLATIONS_DETECTED",
	"GENERIC_BACKUPS",
	"EXCLUDED_FROM_BACKUP",
	"ALL_VIOLATIONS_MUTED",
	"PROTECTED",
	"INITIAL_CLASSIFICATION",
	"TERMINATED",
	"UNSUPPORTED",
	"DISCONNECTED",
	"ACTION_REQUIRED",
	"DLSG",
	"LIMIT_EXCEEDED",
}

func (v *BackupStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := BackupStatus(value)
	for _, existing := range AllowedBackupStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid BackupStatus", value)
}

// NewBackupStatusFromValue returns a pointer to a valid BackupStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewBackupStatusFromValue(v string) (*BackupStatus, error) {
	ev := BackupStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for BackupStatus: valid values are %v", v, AllowedBackupStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v BackupStatus) IsValid() bool {
	for _, existing := range AllowedBackupStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to BackupStatus value
func (v BackupStatus) Ptr() *BackupStatus {
	return &v
}

type NullableBackupStatus struct {
	value *BackupStatus
	isSet bool
}

func (v NullableBackupStatus) Get() *BackupStatus {
	return v.value
}

func (v *NullableBackupStatus) Set(val *BackupStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableBackupStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableBackupStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBackupStatus(val *BackupStatus) *NullableBackupStatus {
	return &NullableBackupStatus{value: val, isSet: true}
}

func (v NullableBackupStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBackupStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

