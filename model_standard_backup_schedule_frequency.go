/*
Eon API

The Eon.io REST API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eon

import (
	"encoding/json"
	"fmt"
)

// StandardBackupScheduleFrequency the model 'StandardBackupScheduleFrequency'
type StandardBackupScheduleFrequency string

// List of StandardBackupScheduleFrequency
const (
	STANDARD_BACKUP_SCHEDULE_INTERVAL StandardBackupScheduleFrequency = "INTERVAL"
	STANDARD_BACKUP_SCHEDULE_DAILY StandardBackupScheduleFrequency = "DAILY"
	STANDARD_BACKUP_SCHEDULE_WEEKLY StandardBackupScheduleFrequency = "WEEKLY"
	STANDARD_BACKUP_SCHEDULE_MONTHLY StandardBackupScheduleFrequency = "MONTHLY"
	STANDARD_BACKUP_SCHEDULE_ANNUALLY StandardBackupScheduleFrequency = "ANNUALLY"
	STANDARD_BACKUP_SCHEDULE_UNSPECIFIED StandardBackupScheduleFrequency = "UNSPECIFIED"
)

// All allowed values of StandardBackupScheduleFrequency enum
var AllowedStandardBackupScheduleFrequencyEnumValues = []StandardBackupScheduleFrequency{
	"INTERVAL",
	"DAILY",
	"WEEKLY",
	"MONTHLY",
	"ANNUALLY",
	"UNSPECIFIED",
}

func (v *StandardBackupScheduleFrequency) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := StandardBackupScheduleFrequency(value)
	for _, existing := range AllowedStandardBackupScheduleFrequencyEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid StandardBackupScheduleFrequency", value)
}

// NewStandardBackupScheduleFrequencyFromValue returns a pointer to a valid StandardBackupScheduleFrequency
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewStandardBackupScheduleFrequencyFromValue(v string) (*StandardBackupScheduleFrequency, error) {
	ev := StandardBackupScheduleFrequency(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for StandardBackupScheduleFrequency: valid values are %v", v, AllowedStandardBackupScheduleFrequencyEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v StandardBackupScheduleFrequency) IsValid() bool {
	for _, existing := range AllowedStandardBackupScheduleFrequencyEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to StandardBackupScheduleFrequency value
func (v StandardBackupScheduleFrequency) Ptr() *StandardBackupScheduleFrequency {
	return &v
}

type NullableStandardBackupScheduleFrequency struct {
	value *StandardBackupScheduleFrequency
	isSet bool
}

func (v NullableStandardBackupScheduleFrequency) Get() *StandardBackupScheduleFrequency {
	return v.value
}

func (v *NullableStandardBackupScheduleFrequency) Set(val *StandardBackupScheduleFrequency) {
	v.value = val
	v.isSet = true
}

func (v NullableStandardBackupScheduleFrequency) IsSet() bool {
	return v.isSet
}

func (v *NullableStandardBackupScheduleFrequency) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStandardBackupScheduleFrequency(val *StandardBackupScheduleFrequency) *NullableStandardBackupScheduleFrequency {
	return &NullableStandardBackupScheduleFrequency{value: val, isSet: true}
}

func (v NullableStandardBackupScheduleFrequency) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStandardBackupScheduleFrequency) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

