/*
Eon API

The Eon.io REST API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eon

import (
	"bytes"
	"encoding/json"
	"fmt"
	"time"
)

// checks if the JobExecutionDetails type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &JobExecutionDetails{}

// JobExecutionDetails struct for JobExecutionDetails
type JobExecutionDetails struct {
	// Job ID.
	JobId  string    `json:"jobId"`
	Status JobStatus `json:"status"`
	// Date and time the job was created.
	CreatedTime time.Time `json:"createdTime"`
	// Date and time the job is expected to start. Returned only for pending jobs.
	ExpectedStartTime NullableTime `json:"expectedStartTime,omitempty"`
	// Date and time the job started.
	StartTime NullableTime `json:"startTime,omitempty"`
	// Date and time the job finished.
	EndTime NullableTime `json:"endTime,omitempty"`
	// How long the job took, in seconds.
	DurationSeconds NullableInt64 `json:"durationSeconds,omitempty"`
	// Message that gives additional details about the job status, if applicable.
	StatusMessage *string `json:"statusMessage,omitempty"`
}

type _JobExecutionDetails JobExecutionDetails

// NewJobExecutionDetails instantiates a new JobExecutionDetails object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewJobExecutionDetails(jobId string, status JobStatus, createdTime time.Time) *JobExecutionDetails {
	this := JobExecutionDetails{}
	this.JobId = jobId
	this.Status = status
	this.CreatedTime = createdTime
	return &this
}

// NewJobExecutionDetailsWithDefaults instantiates a new JobExecutionDetails object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewJobExecutionDetailsWithDefaults() *JobExecutionDetails {
	this := JobExecutionDetails{}
	return &this
}

// GetJobId returns the JobId field value
func (o *JobExecutionDetails) GetJobId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.JobId
}

// GetJobIdOk returns a tuple with the JobId field value
// and a boolean to check if the value has been set.
func (o *JobExecutionDetails) GetJobIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.JobId, true
}

// SetJobId sets field value
func (o *JobExecutionDetails) SetJobId(v string) {
	o.JobId = v
}

// GetStatus returns the Status field value
func (o *JobExecutionDetails) GetStatus() JobStatus {
	if o == nil {
		var ret JobStatus
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *JobExecutionDetails) GetStatusOk() (*JobStatus, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *JobExecutionDetails) SetStatus(v JobStatus) {
	o.Status = v
}

// GetCreatedTime returns the CreatedTime field value
func (o *JobExecutionDetails) GetCreatedTime() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedTime
}

// GetCreatedTimeOk returns a tuple with the CreatedTime field value
// and a boolean to check if the value has been set.
func (o *JobExecutionDetails) GetCreatedTimeOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedTime, true
}

// SetCreatedTime sets field value
func (o *JobExecutionDetails) SetCreatedTime(v time.Time) {
	o.CreatedTime = v
}

// GetExpectedStartTime returns the ExpectedStartTime field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *JobExecutionDetails) GetExpectedStartTime() time.Time {
	if o == nil || IsNil(o.ExpectedStartTime.Get()) {
		var ret time.Time
		return ret
	}
	return *o.ExpectedStartTime.Get()
}

// GetExpectedStartTimeOk returns a tuple with the ExpectedStartTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *JobExecutionDetails) GetExpectedStartTimeOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.ExpectedStartTime.Get(), o.ExpectedStartTime.IsSet()
}

// HasExpectedStartTime returns a boolean if a field has been set.
func (o *JobExecutionDetails) HasExpectedStartTime() bool {
	if o != nil && o.ExpectedStartTime.IsSet() {
		return true
	}

	return false
}

// SetExpectedStartTime gets a reference to the given NullableTime and assigns it to the ExpectedStartTime field.
func (o *JobExecutionDetails) SetExpectedStartTime(v time.Time) {
	o.ExpectedStartTime.Set(&v)
}

// SetExpectedStartTimeNil sets the value for ExpectedStartTime to be an explicit nil
func (o *JobExecutionDetails) SetExpectedStartTimeNil() {
	o.ExpectedStartTime.Set(nil)
}

// UnsetExpectedStartTime ensures that no value is present for ExpectedStartTime, not even an explicit nil
func (o *JobExecutionDetails) UnsetExpectedStartTime() {
	o.ExpectedStartTime.Unset()
}

// GetStartTime returns the StartTime field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *JobExecutionDetails) GetStartTime() time.Time {
	if o == nil || IsNil(o.StartTime.Get()) {
		var ret time.Time
		return ret
	}
	return *o.StartTime.Get()
}

// GetStartTimeOk returns a tuple with the StartTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *JobExecutionDetails) GetStartTimeOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.StartTime.Get(), o.StartTime.IsSet()
}

// HasStartTime returns a boolean if a field has been set.
func (o *JobExecutionDetails) HasStartTime() bool {
	if o != nil && o.StartTime.IsSet() {
		return true
	}

	return false
}

// SetStartTime gets a reference to the given NullableTime and assigns it to the StartTime field.
func (o *JobExecutionDetails) SetStartTime(v time.Time) {
	o.StartTime.Set(&v)
}

// SetStartTimeNil sets the value for StartTime to be an explicit nil
func (o *JobExecutionDetails) SetStartTimeNil() {
	o.StartTime.Set(nil)
}

// UnsetStartTime ensures that no value is present for StartTime, not even an explicit nil
func (o *JobExecutionDetails) UnsetStartTime() {
	o.StartTime.Unset()
}

// GetEndTime returns the EndTime field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *JobExecutionDetails) GetEndTime() time.Time {
	if o == nil || IsNil(o.EndTime.Get()) {
		var ret time.Time
		return ret
	}
	return *o.EndTime.Get()
}

// GetEndTimeOk returns a tuple with the EndTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *JobExecutionDetails) GetEndTimeOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.EndTime.Get(), o.EndTime.IsSet()
}

// HasEndTime returns a boolean if a field has been set.
func (o *JobExecutionDetails) HasEndTime() bool {
	if o != nil && o.EndTime.IsSet() {
		return true
	}

	return false
}

// SetEndTime gets a reference to the given NullableTime and assigns it to the EndTime field.
func (o *JobExecutionDetails) SetEndTime(v time.Time) {
	o.EndTime.Set(&v)
}

// SetEndTimeNil sets the value for EndTime to be an explicit nil
func (o *JobExecutionDetails) SetEndTimeNil() {
	o.EndTime.Set(nil)
}

// UnsetEndTime ensures that no value is present for EndTime, not even an explicit nil
func (o *JobExecutionDetails) UnsetEndTime() {
	o.EndTime.Unset()
}

// GetDurationSeconds returns the DurationSeconds field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *JobExecutionDetails) GetDurationSeconds() int64 {
	if o == nil || IsNil(o.DurationSeconds.Get()) {
		var ret int64
		return ret
	}
	return *o.DurationSeconds.Get()
}

// GetDurationSecondsOk returns a tuple with the DurationSeconds field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *JobExecutionDetails) GetDurationSecondsOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.DurationSeconds.Get(), o.DurationSeconds.IsSet()
}

// HasDurationSeconds returns a boolean if a field has been set.
func (o *JobExecutionDetails) HasDurationSeconds() bool {
	if o != nil && o.DurationSeconds.IsSet() {
		return true
	}

	return false
}

// SetDurationSeconds gets a reference to the given NullableInt64 and assigns it to the DurationSeconds field.
func (o *JobExecutionDetails) SetDurationSeconds(v int64) {
	o.DurationSeconds.Set(&v)
}

// SetDurationSecondsNil sets the value for DurationSeconds to be an explicit nil
func (o *JobExecutionDetails) SetDurationSecondsNil() {
	o.DurationSeconds.Set(nil)
}

// UnsetDurationSeconds ensures that no value is present for DurationSeconds, not even an explicit nil
func (o *JobExecutionDetails) UnsetDurationSeconds() {
	o.DurationSeconds.Unset()
}

// GetStatusMessage returns the StatusMessage field value if set, zero value otherwise.
func (o *JobExecutionDetails) GetStatusMessage() string {
	if o == nil || IsNil(o.StatusMessage) {
		var ret string
		return ret
	}
	return *o.StatusMessage
}

// GetStatusMessageOk returns a tuple with the StatusMessage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JobExecutionDetails) GetStatusMessageOk() (*string, bool) {
	if o == nil || IsNil(o.StatusMessage) {
		return nil, false
	}
	return o.StatusMessage, true
}

// HasStatusMessage returns a boolean if a field has been set.
func (o *JobExecutionDetails) HasStatusMessage() bool {
	if o != nil && !IsNil(o.StatusMessage) {
		return true
	}

	return false
}

// SetStatusMessage gets a reference to the given string and assigns it to the StatusMessage field.
func (o *JobExecutionDetails) SetStatusMessage(v string) {
	o.StatusMessage = &v
}

func (o JobExecutionDetails) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o JobExecutionDetails) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["jobId"] = o.JobId
	toSerialize["status"] = o.Status
	toSerialize["createdTime"] = o.CreatedTime
	if o.ExpectedStartTime.IsSet() {
		toSerialize["expectedStartTime"] = o.ExpectedStartTime.Get()
	}
	if o.StartTime.IsSet() {
		toSerialize["startTime"] = o.StartTime.Get()
	}
	if o.EndTime.IsSet() {
		toSerialize["endTime"] = o.EndTime.Get()
	}
	if o.DurationSeconds.IsSet() {
		toSerialize["durationSeconds"] = o.DurationSeconds.Get()
	}
	if !IsNil(o.StatusMessage) {
		toSerialize["statusMessage"] = o.StatusMessage
	}
	return toSerialize, nil
}

func (o *JobExecutionDetails) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"jobId",
		"status",
		"createdTime",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varJobExecutionDetails := _JobExecutionDetails{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	//decoder.DisallowUnknownFields()
	err = decoder.Decode(&varJobExecutionDetails)

	if err != nil {
		return err
	}

	*o = JobExecutionDetails(varJobExecutionDetails)

	return err
}

type NullableJobExecutionDetails struct {
	value *JobExecutionDetails
	isSet bool
}

func (v NullableJobExecutionDetails) Get() *JobExecutionDetails {
	return v.value
}

func (v *NullableJobExecutionDetails) Set(val *JobExecutionDetails) {
	v.value = val
	v.isSet = true
}

func (v NullableJobExecutionDetails) IsSet() bool {
	return v.isSet
}

func (v *NullableJobExecutionDetails) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJobExecutionDetails(val *JobExecutionDetails) *NullableJobExecutionDetails {
	return &NullableJobExecutionDetails{value: val, isSet: true}
}

func (v NullableJobExecutionDetails) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJobExecutionDetails) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
