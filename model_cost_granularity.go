/*
Eon API

The Eon.io REST API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eon

import (
	"encoding/json"
	"fmt"
)

// CostGranularity Time granularity for aggregating cost data.
type CostGranularity string

// List of CostGranularity
const (
	COST_GRANULARITY_HOURLY CostGranularity = "HOURLY"
	COST_GRANULARITY_DAILY CostGranularity = "DAILY"
	COST_GRANULARITY_MONTHLY CostGranularity = "MONTHLY"
	COST_GRANULARITY_TOTAL CostGranularity = "TOTAL"
)

// All allowed values of CostGranularity enum
var AllowedCostGranularityEnumValues = []CostGranularity{
	"HOURLY",
	"DAILY",
	"MONTHLY",
	"TOTAL",
}

func (v *CostGranularity) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := CostGranularity(value)
	for _, existing := range AllowedCostGranularityEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid CostGranularity", value)
}

// NewCostGranularityFromValue returns a pointer to a valid CostGranularity
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCostGranularityFromValue(v string) (*CostGranularity, error) {
	ev := CostGranularity(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for CostGranularity: valid values are %v", v, AllowedCostGranularityEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CostGranularity) IsValid() bool {
	for _, existing := range AllowedCostGranularityEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to CostGranularity value
func (v CostGranularity) Ptr() *CostGranularity {
	return &v
}

type NullableCostGranularity struct {
	value *CostGranularity
	isSet bool
}

func (v NullableCostGranularity) Get() *CostGranularity {
	return v.value
}

func (v *NullableCostGranularity) Set(val *CostGranularity) {
	v.value = val
	v.isSet = true
}

func (v NullableCostGranularity) IsSet() bool {
	return v.isSet
}

func (v *NullableCostGranularity) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCostGranularity(val *CostGranularity) *NullableCostGranularity {
	return &NullableCostGranularity{value: val, isSet: true}
}

func (v NullableCostGranularity) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCostGranularity) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

