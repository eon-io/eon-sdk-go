/*
Eon API

The Eon.io REST API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eon

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the QueryCostDataResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &QueryCostDataResponse{}

// QueryCostDataResponse struct for QueryCostDataResponse
type QueryCostDataResponse struct {
	// Array of cost records based on requested filters and grouping
	Records []QueryCostDataResponseRecordsInner `json:"records"`
	// Total number of records available
	TotalCount int32 `json:"totalCount"`
	// Total number of unique resources in time range
	TotalUniqueResources int32 `json:"totalUniqueResources"`
	// Number of unique resources after applying filters in time range
	FilteredUniqueResources int32 `json:"filteredUniqueResources"`
	// Token for retrieving next page of results
	NextToken *string `json:"nextToken,omitempty"`
}

type _QueryCostDataResponse QueryCostDataResponse

// NewQueryCostDataResponse instantiates a new QueryCostDataResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewQueryCostDataResponse(records []QueryCostDataResponseRecordsInner, totalCount int32, totalUniqueResources int32, filteredUniqueResources int32) *QueryCostDataResponse {
	this := QueryCostDataResponse{}
	this.Records = records
	this.TotalCount = totalCount
	this.TotalUniqueResources = totalUniqueResources
	this.FilteredUniqueResources = filteredUniqueResources
	return &this
}

// NewQueryCostDataResponseWithDefaults instantiates a new QueryCostDataResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewQueryCostDataResponseWithDefaults() *QueryCostDataResponse {
	this := QueryCostDataResponse{}
	return &this
}

// GetRecords returns the Records field value
func (o *QueryCostDataResponse) GetRecords() []QueryCostDataResponseRecordsInner {
	if o == nil {
		var ret []QueryCostDataResponseRecordsInner
		return ret
	}

	return o.Records
}

// GetRecordsOk returns a tuple with the Records field value
// and a boolean to check if the value has been set.
func (o *QueryCostDataResponse) GetRecordsOk() ([]QueryCostDataResponseRecordsInner, bool) {
	if o == nil {
		return nil, false
	}
	return o.Records, true
}

// SetRecords sets field value
func (o *QueryCostDataResponse) SetRecords(v []QueryCostDataResponseRecordsInner) {
	o.Records = v
}

// GetTotalCount returns the TotalCount field value
func (o *QueryCostDataResponse) GetTotalCount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.TotalCount
}

// GetTotalCountOk returns a tuple with the TotalCount field value
// and a boolean to check if the value has been set.
func (o *QueryCostDataResponse) GetTotalCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TotalCount, true
}

// SetTotalCount sets field value
func (o *QueryCostDataResponse) SetTotalCount(v int32) {
	o.TotalCount = v
}

// GetTotalUniqueResources returns the TotalUniqueResources field value
func (o *QueryCostDataResponse) GetTotalUniqueResources() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.TotalUniqueResources
}

// GetTotalUniqueResourcesOk returns a tuple with the TotalUniqueResources field value
// and a boolean to check if the value has been set.
func (o *QueryCostDataResponse) GetTotalUniqueResourcesOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TotalUniqueResources, true
}

// SetTotalUniqueResources sets field value
func (o *QueryCostDataResponse) SetTotalUniqueResources(v int32) {
	o.TotalUniqueResources = v
}

// GetFilteredUniqueResources returns the FilteredUniqueResources field value
func (o *QueryCostDataResponse) GetFilteredUniqueResources() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.FilteredUniqueResources
}

// GetFilteredUniqueResourcesOk returns a tuple with the FilteredUniqueResources field value
// and a boolean to check if the value has been set.
func (o *QueryCostDataResponse) GetFilteredUniqueResourcesOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FilteredUniqueResources, true
}

// SetFilteredUniqueResources sets field value
func (o *QueryCostDataResponse) SetFilteredUniqueResources(v int32) {
	o.FilteredUniqueResources = v
}

// GetNextToken returns the NextToken field value if set, zero value otherwise.
func (o *QueryCostDataResponse) GetNextToken() string {
	if o == nil || IsNil(o.NextToken) {
		var ret string
		return ret
	}
	return *o.NextToken
}

// GetNextTokenOk returns a tuple with the NextToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QueryCostDataResponse) GetNextTokenOk() (*string, bool) {
	if o == nil || IsNil(o.NextToken) {
		return nil, false
	}
	return o.NextToken, true
}

// HasNextToken returns a boolean if a field has been set.
func (o *QueryCostDataResponse) HasNextToken() bool {
	if o != nil && !IsNil(o.NextToken) {
		return true
	}

	return false
}

// SetNextToken gets a reference to the given string and assigns it to the NextToken field.
func (o *QueryCostDataResponse) SetNextToken(v string) {
	o.NextToken = &v
}

func (o QueryCostDataResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o QueryCostDataResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["records"] = o.Records
	toSerialize["totalCount"] = o.TotalCount
	toSerialize["totalUniqueResources"] = o.TotalUniqueResources
	toSerialize["filteredUniqueResources"] = o.FilteredUniqueResources
	if !IsNil(o.NextToken) {
		toSerialize["nextToken"] = o.NextToken
	}
	return toSerialize, nil
}

func (o *QueryCostDataResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"records",
		"totalCount",
		"totalUniqueResources",
		"filteredUniqueResources",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varQueryCostDataResponse := _QueryCostDataResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	//decoder.DisallowUnknownFields()
	err = decoder.Decode(&varQueryCostDataResponse)

	if err != nil {
		return err
	}

	*o = QueryCostDataResponse(varQueryCostDataResponse)

	return err
}

type NullableQueryCostDataResponse struct {
	value *QueryCostDataResponse
	isSet bool
}

func (v NullableQueryCostDataResponse) Get() *QueryCostDataResponse {
	return v.value
}

func (v *NullableQueryCostDataResponse) Set(val *QueryCostDataResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableQueryCostDataResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableQueryCostDataResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableQueryCostDataResponse(val *QueryCostDataResponse) *NullableQueryCostDataResponse {
	return &NullableQueryCostDataResponse{value: val, isSet: true}
}

func (v NullableQueryCostDataResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableQueryCostDataResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


