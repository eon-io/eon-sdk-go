/*
Eon API

The Eon.io REST API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eon

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the AzureVmInstanceRestoreTarget type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AzureVmInstanceRestoreTarget{}

// AzureVmInstanceRestoreTarget struct for AzureVmInstanceRestoreTarget
type AzureVmInstanceRestoreTarget struct {
	// Region to restore the instance to.
	Region string `json:"region"`
	// Name of the resource group to restore the vm to
	ResourceGroupName string `json:"resourceGroupName"`
	// Name of the VM to restore.
	VmName string `json:"vmName"`
	// Size of the VM to restore.
	VmSize string `json:"vmSize"`
	// Name of the network interface to use.
	NetworkInterface string `json:"networkInterface"`
	// Tags to apply to the restored instance as key-value pairs, where key and value are both strings.  **Example:** `{\"eon_api_restore\": \"true\"}` 
	Tags *map[string]string `json:"tags,omitempty"`
	Disks []RestoreAzureInstanceDiskInput `json:"disks"`
}

type _AzureVmInstanceRestoreTarget AzureVmInstanceRestoreTarget

// NewAzureVmInstanceRestoreTarget instantiates a new AzureVmInstanceRestoreTarget object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAzureVmInstanceRestoreTarget(region string, resourceGroupName string, vmName string, vmSize string, networkInterface string, disks []RestoreAzureInstanceDiskInput) *AzureVmInstanceRestoreTarget {
	this := AzureVmInstanceRestoreTarget{}
	this.Region = region
	this.ResourceGroupName = resourceGroupName
	this.VmName = vmName
	this.VmSize = vmSize
	this.NetworkInterface = networkInterface
	this.Disks = disks
	return &this
}

// NewAzureVmInstanceRestoreTargetWithDefaults instantiates a new AzureVmInstanceRestoreTarget object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAzureVmInstanceRestoreTargetWithDefaults() *AzureVmInstanceRestoreTarget {
	this := AzureVmInstanceRestoreTarget{}
	return &this
}

// GetRegion returns the Region field value
func (o *AzureVmInstanceRestoreTarget) GetRegion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Region
}

// GetRegionOk returns a tuple with the Region field value
// and a boolean to check if the value has been set.
func (o *AzureVmInstanceRestoreTarget) GetRegionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Region, true
}

// SetRegion sets field value
func (o *AzureVmInstanceRestoreTarget) SetRegion(v string) {
	o.Region = v
}

// GetResourceGroupName returns the ResourceGroupName field value
func (o *AzureVmInstanceRestoreTarget) GetResourceGroupName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ResourceGroupName
}

// GetResourceGroupNameOk returns a tuple with the ResourceGroupName field value
// and a boolean to check if the value has been set.
func (o *AzureVmInstanceRestoreTarget) GetResourceGroupNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ResourceGroupName, true
}

// SetResourceGroupName sets field value
func (o *AzureVmInstanceRestoreTarget) SetResourceGroupName(v string) {
	o.ResourceGroupName = v
}

// GetVmName returns the VmName field value
func (o *AzureVmInstanceRestoreTarget) GetVmName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.VmName
}

// GetVmNameOk returns a tuple with the VmName field value
// and a boolean to check if the value has been set.
func (o *AzureVmInstanceRestoreTarget) GetVmNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.VmName, true
}

// SetVmName sets field value
func (o *AzureVmInstanceRestoreTarget) SetVmName(v string) {
	o.VmName = v
}

// GetVmSize returns the VmSize field value
func (o *AzureVmInstanceRestoreTarget) GetVmSize() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.VmSize
}

// GetVmSizeOk returns a tuple with the VmSize field value
// and a boolean to check if the value has been set.
func (o *AzureVmInstanceRestoreTarget) GetVmSizeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.VmSize, true
}

// SetVmSize sets field value
func (o *AzureVmInstanceRestoreTarget) SetVmSize(v string) {
	o.VmSize = v
}

// GetNetworkInterface returns the NetworkInterface field value
func (o *AzureVmInstanceRestoreTarget) GetNetworkInterface() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.NetworkInterface
}

// GetNetworkInterfaceOk returns a tuple with the NetworkInterface field value
// and a boolean to check if the value has been set.
func (o *AzureVmInstanceRestoreTarget) GetNetworkInterfaceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NetworkInterface, true
}

// SetNetworkInterface sets field value
func (o *AzureVmInstanceRestoreTarget) SetNetworkInterface(v string) {
	o.NetworkInterface = v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *AzureVmInstanceRestoreTarget) GetTags() map[string]string {
	if o == nil || IsNil(o.Tags) {
		var ret map[string]string
		return ret
	}
	return *o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AzureVmInstanceRestoreTarget) GetTagsOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Tags) {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *AzureVmInstanceRestoreTarget) HasTags() bool {
	if o != nil && !IsNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given map[string]string and assigns it to the Tags field.
func (o *AzureVmInstanceRestoreTarget) SetTags(v map[string]string) {
	o.Tags = &v
}

// GetDisks returns the Disks field value
func (o *AzureVmInstanceRestoreTarget) GetDisks() []RestoreAzureInstanceDiskInput {
	if o == nil {
		var ret []RestoreAzureInstanceDiskInput
		return ret
	}

	return o.Disks
}

// GetDisksOk returns a tuple with the Disks field value
// and a boolean to check if the value has been set.
func (o *AzureVmInstanceRestoreTarget) GetDisksOk() ([]RestoreAzureInstanceDiskInput, bool) {
	if o == nil {
		return nil, false
	}
	return o.Disks, true
}

// SetDisks sets field value
func (o *AzureVmInstanceRestoreTarget) SetDisks(v []RestoreAzureInstanceDiskInput) {
	o.Disks = v
}

func (o AzureVmInstanceRestoreTarget) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AzureVmInstanceRestoreTarget) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["region"] = o.Region
	toSerialize["resourceGroupName"] = o.ResourceGroupName
	toSerialize["vmName"] = o.VmName
	toSerialize["vmSize"] = o.VmSize
	toSerialize["networkInterface"] = o.NetworkInterface
	if !IsNil(o.Tags) {
		toSerialize["tags"] = o.Tags
	}
	toSerialize["disks"] = o.Disks
	return toSerialize, nil
}

func (o *AzureVmInstanceRestoreTarget) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"region",
		"resourceGroupName",
		"vmName",
		"vmSize",
		"networkInterface",
		"disks",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAzureVmInstanceRestoreTarget := _AzureVmInstanceRestoreTarget{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	//decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAzureVmInstanceRestoreTarget)

	if err != nil {
		return err
	}

	*o = AzureVmInstanceRestoreTarget(varAzureVmInstanceRestoreTarget)

	return err
}

type NullableAzureVmInstanceRestoreTarget struct {
	value *AzureVmInstanceRestoreTarget
	isSet bool
}

func (v NullableAzureVmInstanceRestoreTarget) Get() *AzureVmInstanceRestoreTarget {
	return v.value
}

func (v *NullableAzureVmInstanceRestoreTarget) Set(val *AzureVmInstanceRestoreTarget) {
	v.value = val
	v.isSet = true
}

func (v NullableAzureVmInstanceRestoreTarget) IsSet() bool {
	return v.isSet
}

func (v *NullableAzureVmInstanceRestoreTarget) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAzureVmInstanceRestoreTarget(val *AzureVmInstanceRestoreTarget) *NullableAzureVmInstanceRestoreTarget {
	return &NullableAzureVmInstanceRestoreTarget{value: val, isSet: true}
}

func (v NullableAzureVmInstanceRestoreTarget) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAzureVmInstanceRestoreTarget) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


