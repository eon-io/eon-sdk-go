/*
Eon API

The Eon.io REST API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eon

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the RestoreAzureInstanceDiskInput type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RestoreAzureInstanceDiskInput{}

// RestoreAzureInstanceDiskInput struct for RestoreAzureInstanceDiskInput
type RestoreAzureInstanceDiskInput struct {
	// Cloud-provider-assigned ID of the disk to restore
	ProviderDiskId string `json:"providerDiskId"`
	// Name of the disk to restore.
	Name string `json:"name"`
	// Type of the disk to restore.
	Type string `json:"type"`
	// Tier of the disk to restore.
	Tier string `json:"tier"`
	// Hyper-V generation of the disk to restore.
	HyperVGeneration *string `json:"hyperVGeneration,omitempty"`
	// Size of the disk to restore, in bytes.
	SizeBytes *int64 `json:"sizeBytes,omitempty"`
	// Optional tags to apply to the output instance
	Tags *map[string]string `json:"tags,omitempty"`
}

type _RestoreAzureInstanceDiskInput RestoreAzureInstanceDiskInput

// NewRestoreAzureInstanceDiskInput instantiates a new RestoreAzureInstanceDiskInput object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRestoreAzureInstanceDiskInput(providerDiskId string, name string, type_ string, tier string) *RestoreAzureInstanceDiskInput {
	this := RestoreAzureInstanceDiskInput{}
	this.ProviderDiskId = providerDiskId
	this.Name = name
	this.Type = type_
	this.Tier = tier
	return &this
}

// NewRestoreAzureInstanceDiskInputWithDefaults instantiates a new RestoreAzureInstanceDiskInput object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRestoreAzureInstanceDiskInputWithDefaults() *RestoreAzureInstanceDiskInput {
	this := RestoreAzureInstanceDiskInput{}
	return &this
}

// GetProviderDiskId returns the ProviderDiskId field value
func (o *RestoreAzureInstanceDiskInput) GetProviderDiskId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ProviderDiskId
}

// GetProviderDiskIdOk returns a tuple with the ProviderDiskId field value
// and a boolean to check if the value has been set.
func (o *RestoreAzureInstanceDiskInput) GetProviderDiskIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProviderDiskId, true
}

// SetProviderDiskId sets field value
func (o *RestoreAzureInstanceDiskInput) SetProviderDiskId(v string) {
	o.ProviderDiskId = v
}

// GetName returns the Name field value
func (o *RestoreAzureInstanceDiskInput) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *RestoreAzureInstanceDiskInput) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *RestoreAzureInstanceDiskInput) SetName(v string) {
	o.Name = v
}

// GetType returns the Type field value
func (o *RestoreAzureInstanceDiskInput) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *RestoreAzureInstanceDiskInput) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *RestoreAzureInstanceDiskInput) SetType(v string) {
	o.Type = v
}

// GetTier returns the Tier field value
func (o *RestoreAzureInstanceDiskInput) GetTier() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Tier
}

// GetTierOk returns a tuple with the Tier field value
// and a boolean to check if the value has been set.
func (o *RestoreAzureInstanceDiskInput) GetTierOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Tier, true
}

// SetTier sets field value
func (o *RestoreAzureInstanceDiskInput) SetTier(v string) {
	o.Tier = v
}

// GetHyperVGeneration returns the HyperVGeneration field value if set, zero value otherwise.
func (o *RestoreAzureInstanceDiskInput) GetHyperVGeneration() string {
	if o == nil || IsNil(o.HyperVGeneration) {
		var ret string
		return ret
	}
	return *o.HyperVGeneration
}

// GetHyperVGenerationOk returns a tuple with the HyperVGeneration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestoreAzureInstanceDiskInput) GetHyperVGenerationOk() (*string, bool) {
	if o == nil || IsNil(o.HyperVGeneration) {
		return nil, false
	}
	return o.HyperVGeneration, true
}

// HasHyperVGeneration returns a boolean if a field has been set.
func (o *RestoreAzureInstanceDiskInput) HasHyperVGeneration() bool {
	if o != nil && !IsNil(o.HyperVGeneration) {
		return true
	}

	return false
}

// SetHyperVGeneration gets a reference to the given string and assigns it to the HyperVGeneration field.
func (o *RestoreAzureInstanceDiskInput) SetHyperVGeneration(v string) {
	o.HyperVGeneration = &v
}

// GetSizeBytes returns the SizeBytes field value if set, zero value otherwise.
func (o *RestoreAzureInstanceDiskInput) GetSizeBytes() int64 {
	if o == nil || IsNil(o.SizeBytes) {
		var ret int64
		return ret
	}
	return *o.SizeBytes
}

// GetSizeBytesOk returns a tuple with the SizeBytes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestoreAzureInstanceDiskInput) GetSizeBytesOk() (*int64, bool) {
	if o == nil || IsNil(o.SizeBytes) {
		return nil, false
	}
	return o.SizeBytes, true
}

// HasSizeBytes returns a boolean if a field has been set.
func (o *RestoreAzureInstanceDiskInput) HasSizeBytes() bool {
	if o != nil && !IsNil(o.SizeBytes) {
		return true
	}

	return false
}

// SetSizeBytes gets a reference to the given int64 and assigns it to the SizeBytes field.
func (o *RestoreAzureInstanceDiskInput) SetSizeBytes(v int64) {
	o.SizeBytes = &v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *RestoreAzureInstanceDiskInput) GetTags() map[string]string {
	if o == nil || IsNil(o.Tags) {
		var ret map[string]string
		return ret
	}
	return *o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestoreAzureInstanceDiskInput) GetTagsOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Tags) {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *RestoreAzureInstanceDiskInput) HasTags() bool {
	if o != nil && !IsNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given map[string]string and assigns it to the Tags field.
func (o *RestoreAzureInstanceDiskInput) SetTags(v map[string]string) {
	o.Tags = &v
}

func (o RestoreAzureInstanceDiskInput) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RestoreAzureInstanceDiskInput) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["providerDiskId"] = o.ProviderDiskId
	toSerialize["name"] = o.Name
	toSerialize["type"] = o.Type
	toSerialize["tier"] = o.Tier
	if !IsNil(o.HyperVGeneration) {
		toSerialize["hyperVGeneration"] = o.HyperVGeneration
	}
	if !IsNil(o.SizeBytes) {
		toSerialize["sizeBytes"] = o.SizeBytes
	}
	if !IsNil(o.Tags) {
		toSerialize["tags"] = o.Tags
	}
	return toSerialize, nil
}

func (o *RestoreAzureInstanceDiskInput) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"providerDiskId",
		"name",
		"type",
		"tier",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRestoreAzureInstanceDiskInput := _RestoreAzureInstanceDiskInput{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	//decoder.DisallowUnknownFields()
	err = decoder.Decode(&varRestoreAzureInstanceDiskInput)

	if err != nil {
		return err
	}

	*o = RestoreAzureInstanceDiskInput(varRestoreAzureInstanceDiskInput)

	return err
}

type NullableRestoreAzureInstanceDiskInput struct {
	value *RestoreAzureInstanceDiskInput
	isSet bool
}

func (v NullableRestoreAzureInstanceDiskInput) Get() *RestoreAzureInstanceDiskInput {
	return v.value
}

func (v *NullableRestoreAzureInstanceDiskInput) Set(val *RestoreAzureInstanceDiskInput) {
	v.value = val
	v.isSet = true
}

func (v NullableRestoreAzureInstanceDiskInput) IsSet() bool {
	return v.isSet
}

func (v *NullableRestoreAzureInstanceDiskInput) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRestoreAzureInstanceDiskInput(val *RestoreAzureInstanceDiskInput) *NullableRestoreAzureInstanceDiskInput {
	return &NullableRestoreAzureInstanceDiskInput{value: val, isSet: true}
}

func (v NullableRestoreAzureInstanceDiskInput) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRestoreAzureInstanceDiskInput) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


