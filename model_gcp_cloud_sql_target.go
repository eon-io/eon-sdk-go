/*
Eon API

The Eon.io REST API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eon

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the GcpCloudSqlTarget type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GcpCloudSqlTarget{}

// GcpCloudSqlTarget struct for GcpCloudSqlTarget
type GcpCloudSqlTarget struct {
	// The zone to restore the Cloud SQL instance to.
	Zone string `json:"zone"`
	// The name of the Cloud SQL instance to restore.
	Name string `json:"name"`
	NetworkType GcpNetworkType `json:"networkType"`
	// The VPC network name (required for private networking).
	NetworkName *string `json:"networkName,omitempty"`
	// The subnet name for the compute node (required for private networking).
	SubnetName *string `json:"subnetName,omitempty"`
	// Host project ID for shared VPC (only required for private networking).
	NetworkHostProject *string `json:"networkHostProject,omitempty"`
	// Labels to apply to the restored Cloud SQL instance as key-value pairs, where key and value are both strings.  **Example:** `{\"eon_api_restore\": \"true\"}` 
	Labels *map[string]string `json:"labels,omitempty"`
}

type _GcpCloudSqlTarget GcpCloudSqlTarget

// NewGcpCloudSqlTarget instantiates a new GcpCloudSqlTarget object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGcpCloudSqlTarget(zone string, name string, networkType GcpNetworkType) *GcpCloudSqlTarget {
	this := GcpCloudSqlTarget{}
	this.Zone = zone
	this.Name = name
	this.NetworkType = networkType
	return &this
}

// NewGcpCloudSqlTargetWithDefaults instantiates a new GcpCloudSqlTarget object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGcpCloudSqlTargetWithDefaults() *GcpCloudSqlTarget {
	this := GcpCloudSqlTarget{}
	return &this
}

// GetZone returns the Zone field value
func (o *GcpCloudSqlTarget) GetZone() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Zone
}

// GetZoneOk returns a tuple with the Zone field value
// and a boolean to check if the value has been set.
func (o *GcpCloudSqlTarget) GetZoneOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Zone, true
}

// SetZone sets field value
func (o *GcpCloudSqlTarget) SetZone(v string) {
	o.Zone = v
}

// GetName returns the Name field value
func (o *GcpCloudSqlTarget) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *GcpCloudSqlTarget) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *GcpCloudSqlTarget) SetName(v string) {
	o.Name = v
}

// GetNetworkType returns the NetworkType field value
func (o *GcpCloudSqlTarget) GetNetworkType() GcpNetworkType {
	if o == nil {
		var ret GcpNetworkType
		return ret
	}

	return o.NetworkType
}

// GetNetworkTypeOk returns a tuple with the NetworkType field value
// and a boolean to check if the value has been set.
func (o *GcpCloudSqlTarget) GetNetworkTypeOk() (*GcpNetworkType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NetworkType, true
}

// SetNetworkType sets field value
func (o *GcpCloudSqlTarget) SetNetworkType(v GcpNetworkType) {
	o.NetworkType = v
}

// GetNetworkName returns the NetworkName field value if set, zero value otherwise.
func (o *GcpCloudSqlTarget) GetNetworkName() string {
	if o == nil || IsNil(o.NetworkName) {
		var ret string
		return ret
	}
	return *o.NetworkName
}

// GetNetworkNameOk returns a tuple with the NetworkName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GcpCloudSqlTarget) GetNetworkNameOk() (*string, bool) {
	if o == nil || IsNil(o.NetworkName) {
		return nil, false
	}
	return o.NetworkName, true
}

// HasNetworkName returns a boolean if a field has been set.
func (o *GcpCloudSqlTarget) HasNetworkName() bool {
	if o != nil && !IsNil(o.NetworkName) {
		return true
	}

	return false
}

// SetNetworkName gets a reference to the given string and assigns it to the NetworkName field.
func (o *GcpCloudSqlTarget) SetNetworkName(v string) {
	o.NetworkName = &v
}

// GetSubnetName returns the SubnetName field value if set, zero value otherwise.
func (o *GcpCloudSqlTarget) GetSubnetName() string {
	if o == nil || IsNil(o.SubnetName) {
		var ret string
		return ret
	}
	return *o.SubnetName
}

// GetSubnetNameOk returns a tuple with the SubnetName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GcpCloudSqlTarget) GetSubnetNameOk() (*string, bool) {
	if o == nil || IsNil(o.SubnetName) {
		return nil, false
	}
	return o.SubnetName, true
}

// HasSubnetName returns a boolean if a field has been set.
func (o *GcpCloudSqlTarget) HasSubnetName() bool {
	if o != nil && !IsNil(o.SubnetName) {
		return true
	}

	return false
}

// SetSubnetName gets a reference to the given string and assigns it to the SubnetName field.
func (o *GcpCloudSqlTarget) SetSubnetName(v string) {
	o.SubnetName = &v
}

// GetNetworkHostProject returns the NetworkHostProject field value if set, zero value otherwise.
func (o *GcpCloudSqlTarget) GetNetworkHostProject() string {
	if o == nil || IsNil(o.NetworkHostProject) {
		var ret string
		return ret
	}
	return *o.NetworkHostProject
}

// GetNetworkHostProjectOk returns a tuple with the NetworkHostProject field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GcpCloudSqlTarget) GetNetworkHostProjectOk() (*string, bool) {
	if o == nil || IsNil(o.NetworkHostProject) {
		return nil, false
	}
	return o.NetworkHostProject, true
}

// HasNetworkHostProject returns a boolean if a field has been set.
func (o *GcpCloudSqlTarget) HasNetworkHostProject() bool {
	if o != nil && !IsNil(o.NetworkHostProject) {
		return true
	}

	return false
}

// SetNetworkHostProject gets a reference to the given string and assigns it to the NetworkHostProject field.
func (o *GcpCloudSqlTarget) SetNetworkHostProject(v string) {
	o.NetworkHostProject = &v
}

// GetLabels returns the Labels field value if set, zero value otherwise.
func (o *GcpCloudSqlTarget) GetLabels() map[string]string {
	if o == nil || IsNil(o.Labels) {
		var ret map[string]string
		return ret
	}
	return *o.Labels
}

// GetLabelsOk returns a tuple with the Labels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GcpCloudSqlTarget) GetLabelsOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Labels) {
		return nil, false
	}
	return o.Labels, true
}

// HasLabels returns a boolean if a field has been set.
func (o *GcpCloudSqlTarget) HasLabels() bool {
	if o != nil && !IsNil(o.Labels) {
		return true
	}

	return false
}

// SetLabels gets a reference to the given map[string]string and assigns it to the Labels field.
func (o *GcpCloudSqlTarget) SetLabels(v map[string]string) {
	o.Labels = &v
}

func (o GcpCloudSqlTarget) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GcpCloudSqlTarget) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["zone"] = o.Zone
	toSerialize["name"] = o.Name
	toSerialize["networkType"] = o.NetworkType
	if !IsNil(o.NetworkName) {
		toSerialize["networkName"] = o.NetworkName
	}
	if !IsNil(o.SubnetName) {
		toSerialize["subnetName"] = o.SubnetName
	}
	if !IsNil(o.NetworkHostProject) {
		toSerialize["networkHostProject"] = o.NetworkHostProject
	}
	if !IsNil(o.Labels) {
		toSerialize["labels"] = o.Labels
	}
	return toSerialize, nil
}

func (o *GcpCloudSqlTarget) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"zone",
		"name",
		"networkType",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varGcpCloudSqlTarget := _GcpCloudSqlTarget{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	//decoder.DisallowUnknownFields()
	err = decoder.Decode(&varGcpCloudSqlTarget)

	if err != nil {
		return err
	}

	*o = GcpCloudSqlTarget(varGcpCloudSqlTarget)

	return err
}

type NullableGcpCloudSqlTarget struct {
	value *GcpCloudSqlTarget
	isSet bool
}

func (v NullableGcpCloudSqlTarget) Get() *GcpCloudSqlTarget {
	return v.value
}

func (v *NullableGcpCloudSqlTarget) Set(val *GcpCloudSqlTarget) {
	v.value = val
	v.isSet = true
}

func (v NullableGcpCloudSqlTarget) IsSet() bool {
	return v.isSet
}

func (v *NullableGcpCloudSqlTarget) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGcpCloudSqlTarget(val *GcpCloudSqlTarget) *NullableGcpCloudSqlTarget {
	return &NullableGcpCloudSqlTarget{value: val, isSet: true}
}

func (v NullableGcpCloudSqlTarget) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGcpCloudSqlTarget) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


