/*
Eon API

The Eon.io REST API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eon

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CancelExclusionFromBackupResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CancelExclusionFromBackupResponse{}

// CancelExclusionFromBackupResponse struct for CancelExclusionFromBackupResponse
type CancelExclusionFromBackupResponse struct {
	// Whether the call was successful. Expected to be `true`. 
	IsExclusionCanceled bool `json:"isExclusionCanceled"`
}

type _CancelExclusionFromBackupResponse CancelExclusionFromBackupResponse

// NewCancelExclusionFromBackupResponse instantiates a new CancelExclusionFromBackupResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCancelExclusionFromBackupResponse(isExclusionCanceled bool) *CancelExclusionFromBackupResponse {
	this := CancelExclusionFromBackupResponse{}
	this.IsExclusionCanceled = isExclusionCanceled
	return &this
}

// NewCancelExclusionFromBackupResponseWithDefaults instantiates a new CancelExclusionFromBackupResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCancelExclusionFromBackupResponseWithDefaults() *CancelExclusionFromBackupResponse {
	this := CancelExclusionFromBackupResponse{}
	return &this
}

// GetIsExclusionCanceled returns the IsExclusionCanceled field value
func (o *CancelExclusionFromBackupResponse) GetIsExclusionCanceled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsExclusionCanceled
}

// GetIsExclusionCanceledOk returns a tuple with the IsExclusionCanceled field value
// and a boolean to check if the value has been set.
func (o *CancelExclusionFromBackupResponse) GetIsExclusionCanceledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsExclusionCanceled, true
}

// SetIsExclusionCanceled sets field value
func (o *CancelExclusionFromBackupResponse) SetIsExclusionCanceled(v bool) {
	o.IsExclusionCanceled = v
}

func (o CancelExclusionFromBackupResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CancelExclusionFromBackupResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["isExclusionCanceled"] = o.IsExclusionCanceled
	return toSerialize, nil
}

func (o *CancelExclusionFromBackupResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"isExclusionCanceled",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCancelExclusionFromBackupResponse := _CancelExclusionFromBackupResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCancelExclusionFromBackupResponse)

	if err != nil {
		return err
	}

	*o = CancelExclusionFromBackupResponse(varCancelExclusionFromBackupResponse)

	return err
}

type NullableCancelExclusionFromBackupResponse struct {
	value *CancelExclusionFromBackupResponse
	isSet bool
}

func (v NullableCancelExclusionFromBackupResponse) Get() *CancelExclusionFromBackupResponse {
	return v.value
}

func (v *NullableCancelExclusionFromBackupResponse) Set(val *CancelExclusionFromBackupResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableCancelExclusionFromBackupResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableCancelExclusionFromBackupResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCancelExclusionFromBackupResponse(val *CancelExclusionFromBackupResponse) *NullableCancelExclusionFromBackupResponse {
	return &NullableCancelExclusionFromBackupResponse{value: val, isSet: true}
}

func (v NullableCancelExclusionFromBackupResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCancelExclusionFromBackupResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


