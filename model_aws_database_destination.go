/*
Eon API

The Eon.io REST API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eon

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the AwsDatabaseDestination type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AwsDatabaseDestination{}

// AwsDatabaseDestination Configuration for restoring to RDS.
type AwsDatabaseDestination struct {
	// Region to restore to.
	RestoreRegion string `json:"restoreRegion"`
	// ID of the key you want Eon to use for encrypting the restored resource.
	EncryptionKeyId string `json:"encryptionKeyId"`
	// Name to assign to the restored resource.
	RestoredName string `json:"restoredName"`
	// List of security group IDs to associate with the restored resource. Must be in the same VPC of `subnetGroup`. 
	SecurityGroups []string `json:"securityGroups,omitempty"`
	// Subnet group ID to associate with the restored resource. Must be in the same VPC of `securityGroup`. 
	SubnetGroup *string `json:"subnetGroup,omitempty"`
	// Tags to apply to the restored instance as key-value pairs, where key and value are both strings.  **Example:** `{\"eon_api_restore\": \"true\"}` 
	Tags *map[string]string `json:"tags,omitempty"`
}

type _AwsDatabaseDestination AwsDatabaseDestination

// NewAwsDatabaseDestination instantiates a new AwsDatabaseDestination object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAwsDatabaseDestination(restoreRegion string, encryptionKeyId string, restoredName string) *AwsDatabaseDestination {
	this := AwsDatabaseDestination{}
	this.RestoreRegion = restoreRegion
	this.EncryptionKeyId = encryptionKeyId
	this.RestoredName = restoredName
	return &this
}

// NewAwsDatabaseDestinationWithDefaults instantiates a new AwsDatabaseDestination object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAwsDatabaseDestinationWithDefaults() *AwsDatabaseDestination {
	this := AwsDatabaseDestination{}
	return &this
}

// GetRestoreRegion returns the RestoreRegion field value
func (o *AwsDatabaseDestination) GetRestoreRegion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RestoreRegion
}

// GetRestoreRegionOk returns a tuple with the RestoreRegion field value
// and a boolean to check if the value has been set.
func (o *AwsDatabaseDestination) GetRestoreRegionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RestoreRegion, true
}

// SetRestoreRegion sets field value
func (o *AwsDatabaseDestination) SetRestoreRegion(v string) {
	o.RestoreRegion = v
}

// GetEncryptionKeyId returns the EncryptionKeyId field value
func (o *AwsDatabaseDestination) GetEncryptionKeyId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EncryptionKeyId
}

// GetEncryptionKeyIdOk returns a tuple with the EncryptionKeyId field value
// and a boolean to check if the value has been set.
func (o *AwsDatabaseDestination) GetEncryptionKeyIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EncryptionKeyId, true
}

// SetEncryptionKeyId sets field value
func (o *AwsDatabaseDestination) SetEncryptionKeyId(v string) {
	o.EncryptionKeyId = v
}

// GetRestoredName returns the RestoredName field value
func (o *AwsDatabaseDestination) GetRestoredName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RestoredName
}

// GetRestoredNameOk returns a tuple with the RestoredName field value
// and a boolean to check if the value has been set.
func (o *AwsDatabaseDestination) GetRestoredNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RestoredName, true
}

// SetRestoredName sets field value
func (o *AwsDatabaseDestination) SetRestoredName(v string) {
	o.RestoredName = v
}

// GetSecurityGroups returns the SecurityGroups field value if set, zero value otherwise.
func (o *AwsDatabaseDestination) GetSecurityGroups() []string {
	if o == nil || IsNil(o.SecurityGroups) {
		var ret []string
		return ret
	}
	return o.SecurityGroups
}

// GetSecurityGroupsOk returns a tuple with the SecurityGroups field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AwsDatabaseDestination) GetSecurityGroupsOk() ([]string, bool) {
	if o == nil || IsNil(o.SecurityGroups) {
		return nil, false
	}
	return o.SecurityGroups, true
}

// HasSecurityGroups returns a boolean if a field has been set.
func (o *AwsDatabaseDestination) HasSecurityGroups() bool {
	if o != nil && !IsNil(o.SecurityGroups) {
		return true
	}

	return false
}

// SetSecurityGroups gets a reference to the given []string and assigns it to the SecurityGroups field.
func (o *AwsDatabaseDestination) SetSecurityGroups(v []string) {
	o.SecurityGroups = v
}

// GetSubnetGroup returns the SubnetGroup field value if set, zero value otherwise.
func (o *AwsDatabaseDestination) GetSubnetGroup() string {
	if o == nil || IsNil(o.SubnetGroup) {
		var ret string
		return ret
	}
	return *o.SubnetGroup
}

// GetSubnetGroupOk returns a tuple with the SubnetGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AwsDatabaseDestination) GetSubnetGroupOk() (*string, bool) {
	if o == nil || IsNil(o.SubnetGroup) {
		return nil, false
	}
	return o.SubnetGroup, true
}

// HasSubnetGroup returns a boolean if a field has been set.
func (o *AwsDatabaseDestination) HasSubnetGroup() bool {
	if o != nil && !IsNil(o.SubnetGroup) {
		return true
	}

	return false
}

// SetSubnetGroup gets a reference to the given string and assigns it to the SubnetGroup field.
func (o *AwsDatabaseDestination) SetSubnetGroup(v string) {
	o.SubnetGroup = &v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *AwsDatabaseDestination) GetTags() map[string]string {
	if o == nil || IsNil(o.Tags) {
		var ret map[string]string
		return ret
	}
	return *o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AwsDatabaseDestination) GetTagsOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Tags) {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *AwsDatabaseDestination) HasTags() bool {
	if o != nil && !IsNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given map[string]string and assigns it to the Tags field.
func (o *AwsDatabaseDestination) SetTags(v map[string]string) {
	o.Tags = &v
}

func (o AwsDatabaseDestination) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AwsDatabaseDestination) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["restoreRegion"] = o.RestoreRegion
	toSerialize["encryptionKeyId"] = o.EncryptionKeyId
	toSerialize["restoredName"] = o.RestoredName
	if !IsNil(o.SecurityGroups) {
		toSerialize["securityGroups"] = o.SecurityGroups
	}
	if !IsNil(o.SubnetGroup) {
		toSerialize["subnetGroup"] = o.SubnetGroup
	}
	if !IsNil(o.Tags) {
		toSerialize["tags"] = o.Tags
	}
	return toSerialize, nil
}

func (o *AwsDatabaseDestination) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"restoreRegion",
		"encryptionKeyId",
		"restoredName",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAwsDatabaseDestination := _AwsDatabaseDestination{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAwsDatabaseDestination)

	if err != nil {
		return err
	}

	*o = AwsDatabaseDestination(varAwsDatabaseDestination)

	return err
}

type NullableAwsDatabaseDestination struct {
	value *AwsDatabaseDestination
	isSet bool
}

func (v NullableAwsDatabaseDestination) Get() *AwsDatabaseDestination {
	return v.value
}

func (v *NullableAwsDatabaseDestination) Set(val *AwsDatabaseDestination) {
	v.value = val
	v.isSet = true
}

func (v NullableAwsDatabaseDestination) IsSet() bool {
	return v.isSet
}

func (v *NullableAwsDatabaseDestination) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAwsDatabaseDestination(val *AwsDatabaseDestination) *NullableAwsDatabaseDestination {
	return &NullableAwsDatabaseDestination{value: val, isSet: true}
}

func (v NullableAwsDatabaseDestination) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAwsDatabaseDestination) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


