/*
Eon API

The Eon.io REST API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eon

import (
	"encoding/json"
)

// checks if the ResourceTypeFilters type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ResourceTypeFilters{}

// ResourceTypeFilters struct for ResourceTypeFilters
type ResourceTypeFilters struct {
	// Matches if any value in this list equals `resourceType`.
	In []ResourceType `json:"in,omitempty"`
	// Matches if no value in this list equals `resourceType`.
	NotIn []ResourceType `json:"notIn,omitempty"`
}

// NewResourceTypeFilters instantiates a new ResourceTypeFilters object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResourceTypeFilters() *ResourceTypeFilters {
	this := ResourceTypeFilters{}
	return &this
}

// NewResourceTypeFiltersWithDefaults instantiates a new ResourceTypeFilters object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResourceTypeFiltersWithDefaults() *ResourceTypeFilters {
	this := ResourceTypeFilters{}
	return &this
}

// GetIn returns the In field value if set, zero value otherwise.
func (o *ResourceTypeFilters) GetIn() []ResourceType {
	if o == nil || IsNil(o.In) {
		var ret []ResourceType
		return ret
	}
	return o.In
}

// GetInOk returns a tuple with the In field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResourceTypeFilters) GetInOk() ([]ResourceType, bool) {
	if o == nil || IsNil(o.In) {
		return nil, false
	}
	return o.In, true
}

// HasIn returns a boolean if a field has been set.
func (o *ResourceTypeFilters) HasIn() bool {
	if o != nil && !IsNil(o.In) {
		return true
	}

	return false
}

// SetIn gets a reference to the given []ResourceType and assigns it to the In field.
func (o *ResourceTypeFilters) SetIn(v []ResourceType) {
	o.In = v
}

// GetNotIn returns the NotIn field value if set, zero value otherwise.
func (o *ResourceTypeFilters) GetNotIn() []ResourceType {
	if o == nil || IsNil(o.NotIn) {
		var ret []ResourceType
		return ret
	}
	return o.NotIn
}

// GetNotInOk returns a tuple with the NotIn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResourceTypeFilters) GetNotInOk() ([]ResourceType, bool) {
	if o == nil || IsNil(o.NotIn) {
		return nil, false
	}
	return o.NotIn, true
}

// HasNotIn returns a boolean if a field has been set.
func (o *ResourceTypeFilters) HasNotIn() bool {
	if o != nil && !IsNil(o.NotIn) {
		return true
	}

	return false
}

// SetNotIn gets a reference to the given []ResourceType and assigns it to the NotIn field.
func (o *ResourceTypeFilters) SetNotIn(v []ResourceType) {
	o.NotIn = v
}

func (o ResourceTypeFilters) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ResourceTypeFilters) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.In) {
		toSerialize["in"] = o.In
	}
	if !IsNil(o.NotIn) {
		toSerialize["notIn"] = o.NotIn
	}
	return toSerialize, nil
}

type NullableResourceTypeFilters struct {
	value *ResourceTypeFilters
	isSet bool
}

func (v NullableResourceTypeFilters) Get() *ResourceTypeFilters {
	return v.value
}

func (v *NullableResourceTypeFilters) Set(val *ResourceTypeFilters) {
	v.value = val
	v.isSet = true
}

func (v NullableResourceTypeFilters) IsSet() bool {
	return v.isSet
}

func (v *NullableResourceTypeFilters) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResourceTypeFilters(val *ResourceTypeFilters) *NullableResourceTypeFilters {
	return &NullableResourceTypeFilters{value: val, isSet: true}
}

func (v NullableResourceTypeFilters) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResourceTypeFilters) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


