/*
Eon API

The Eon.io REST API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eon

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the QueryCostDataRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &QueryCostDataRequest{}

// QueryCostDataRequest struct for QueryCostDataRequest
type QueryCostDataRequest struct {
	CostUnit *CostUnit `json:"costUnit,omitempty"`
	TimeFrame TimeFrame `json:"timeFrame"`
	Granularity *CostGranularity `json:"granularity,omitempty"`
	Filters *CostDataFilters `json:"filters,omitempty"`
	GroupBy *CostDataGroupBy `json:"groupBy,omitempty"`
}

type _QueryCostDataRequest QueryCostDataRequest

// NewQueryCostDataRequest instantiates a new QueryCostDataRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewQueryCostDataRequest(timeFrame TimeFrame) *QueryCostDataRequest {
	this := QueryCostDataRequest{}
	var costUnit CostUnit = COST_UNIT_CREDITS
	this.CostUnit = &costUnit
	this.TimeFrame = timeFrame
	var granularity CostGranularity = COST_GRANULARITY_MONTHLY
	this.Granularity = &granularity
	var groupBy CostDataGroupBy = COST_GROUP_BY_SOURCE_ACCOUNT
	this.GroupBy = &groupBy
	return &this
}

// NewQueryCostDataRequestWithDefaults instantiates a new QueryCostDataRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewQueryCostDataRequestWithDefaults() *QueryCostDataRequest {
	this := QueryCostDataRequest{}
	var costUnit CostUnit = COST_UNIT_CREDITS
	this.CostUnit = &costUnit
	var granularity CostGranularity = COST_GRANULARITY_MONTHLY
	this.Granularity = &granularity
	var groupBy CostDataGroupBy = COST_GROUP_BY_SOURCE_ACCOUNT
	this.GroupBy = &groupBy
	return &this
}

// GetCostUnit returns the CostUnit field value if set, zero value otherwise.
func (o *QueryCostDataRequest) GetCostUnit() CostUnit {
	if o == nil || IsNil(o.CostUnit) {
		var ret CostUnit
		return ret
	}
	return *o.CostUnit
}

// GetCostUnitOk returns a tuple with the CostUnit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QueryCostDataRequest) GetCostUnitOk() (*CostUnit, bool) {
	if o == nil || IsNil(o.CostUnit) {
		return nil, false
	}
	return o.CostUnit, true
}

// HasCostUnit returns a boolean if a field has been set.
func (o *QueryCostDataRequest) HasCostUnit() bool {
	if o != nil && !IsNil(o.CostUnit) {
		return true
	}

	return false
}

// SetCostUnit gets a reference to the given CostUnit and assigns it to the CostUnit field.
func (o *QueryCostDataRequest) SetCostUnit(v CostUnit) {
	o.CostUnit = &v
}

// GetTimeFrame returns the TimeFrame field value
func (o *QueryCostDataRequest) GetTimeFrame() TimeFrame {
	if o == nil {
		var ret TimeFrame
		return ret
	}

	return o.TimeFrame
}

// GetTimeFrameOk returns a tuple with the TimeFrame field value
// and a boolean to check if the value has been set.
func (o *QueryCostDataRequest) GetTimeFrameOk() (*TimeFrame, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TimeFrame, true
}

// SetTimeFrame sets field value
func (o *QueryCostDataRequest) SetTimeFrame(v TimeFrame) {
	o.TimeFrame = v
}

// GetGranularity returns the Granularity field value if set, zero value otherwise.
func (o *QueryCostDataRequest) GetGranularity() CostGranularity {
	if o == nil || IsNil(o.Granularity) {
		var ret CostGranularity
		return ret
	}
	return *o.Granularity
}

// GetGranularityOk returns a tuple with the Granularity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QueryCostDataRequest) GetGranularityOk() (*CostGranularity, bool) {
	if o == nil || IsNil(o.Granularity) {
		return nil, false
	}
	return o.Granularity, true
}

// HasGranularity returns a boolean if a field has been set.
func (o *QueryCostDataRequest) HasGranularity() bool {
	if o != nil && !IsNil(o.Granularity) {
		return true
	}

	return false
}

// SetGranularity gets a reference to the given CostGranularity and assigns it to the Granularity field.
func (o *QueryCostDataRequest) SetGranularity(v CostGranularity) {
	o.Granularity = &v
}

// GetFilters returns the Filters field value if set, zero value otherwise.
func (o *QueryCostDataRequest) GetFilters() CostDataFilters {
	if o == nil || IsNil(o.Filters) {
		var ret CostDataFilters
		return ret
	}
	return *o.Filters
}

// GetFiltersOk returns a tuple with the Filters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QueryCostDataRequest) GetFiltersOk() (*CostDataFilters, bool) {
	if o == nil || IsNil(o.Filters) {
		return nil, false
	}
	return o.Filters, true
}

// HasFilters returns a boolean if a field has been set.
func (o *QueryCostDataRequest) HasFilters() bool {
	if o != nil && !IsNil(o.Filters) {
		return true
	}

	return false
}

// SetFilters gets a reference to the given CostDataFilters and assigns it to the Filters field.
func (o *QueryCostDataRequest) SetFilters(v CostDataFilters) {
	o.Filters = &v
}

// GetGroupBy returns the GroupBy field value if set, zero value otherwise.
func (o *QueryCostDataRequest) GetGroupBy() CostDataGroupBy {
	if o == nil || IsNil(o.GroupBy) {
		var ret CostDataGroupBy
		return ret
	}
	return *o.GroupBy
}

// GetGroupByOk returns a tuple with the GroupBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QueryCostDataRequest) GetGroupByOk() (*CostDataGroupBy, bool) {
	if o == nil || IsNil(o.GroupBy) {
		return nil, false
	}
	return o.GroupBy, true
}

// HasGroupBy returns a boolean if a field has been set.
func (o *QueryCostDataRequest) HasGroupBy() bool {
	if o != nil && !IsNil(o.GroupBy) {
		return true
	}

	return false
}

// SetGroupBy gets a reference to the given CostDataGroupBy and assigns it to the GroupBy field.
func (o *QueryCostDataRequest) SetGroupBy(v CostDataGroupBy) {
	o.GroupBy = &v
}

func (o QueryCostDataRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o QueryCostDataRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CostUnit) {
		toSerialize["costUnit"] = o.CostUnit
	}
	toSerialize["timeFrame"] = o.TimeFrame
	if !IsNil(o.Granularity) {
		toSerialize["granularity"] = o.Granularity
	}
	if !IsNil(o.Filters) {
		toSerialize["filters"] = o.Filters
	}
	if !IsNil(o.GroupBy) {
		toSerialize["groupBy"] = o.GroupBy
	}
	return toSerialize, nil
}

func (o *QueryCostDataRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"timeFrame",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varQueryCostDataRequest := _QueryCostDataRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	//decoder.DisallowUnknownFields()
	err = decoder.Decode(&varQueryCostDataRequest)

	if err != nil {
		return err
	}

	*o = QueryCostDataRequest(varQueryCostDataRequest)

	return err
}

type NullableQueryCostDataRequest struct {
	value *QueryCostDataRequest
	isSet bool
}

func (v NullableQueryCostDataRequest) Get() *QueryCostDataRequest {
	return v.value
}

func (v *NullableQueryCostDataRequest) Set(val *QueryCostDataRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableQueryCostDataRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableQueryCostDataRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableQueryCostDataRequest(val *QueryCostDataRequest) *NullableQueryCostDataRequest {
	return &NullableQueryCostDataRequest{value: val, isSet: true}
}

func (v NullableQueryCostDataRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableQueryCostDataRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


