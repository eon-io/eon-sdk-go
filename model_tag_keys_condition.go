/*
Eon API

The Eon.io REST API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eon

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the TagKeysCondition type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TagKeysCondition{}

// TagKeysCondition struct for TagKeysCondition
type TagKeysCondition struct {
	Operator ListOperators `json:"operator"`
	TagKeys  []string      `json:"tagKeys"`
}

type _TagKeysCondition TagKeysCondition

// NewTagKeysCondition instantiates a new TagKeysCondition object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTagKeysCondition(operator ListOperators, tagKeys []string) *TagKeysCondition {
	this := TagKeysCondition{}
	this.Operator = operator
	this.TagKeys = tagKeys
	return &this
}

// NewTagKeysConditionWithDefaults instantiates a new TagKeysCondition object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTagKeysConditionWithDefaults() *TagKeysCondition {
	this := TagKeysCondition{}
	return &this
}

// GetOperator returns the Operator field value
func (o *TagKeysCondition) GetOperator() ListOperators {
	if o == nil {
		var ret ListOperators
		return ret
	}

	return o.Operator
}

// GetOperatorOk returns a tuple with the Operator field value
// and a boolean to check if the value has been set.
func (o *TagKeysCondition) GetOperatorOk() (*ListOperators, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Operator, true
}

// SetOperator sets field value
func (o *TagKeysCondition) SetOperator(v ListOperators) {
	o.Operator = v
}

// GetTagKeys returns the TagKeys field value
func (o *TagKeysCondition) GetTagKeys() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.TagKeys
}

// GetTagKeysOk returns a tuple with the TagKeys field value
// and a boolean to check if the value has been set.
func (o *TagKeysCondition) GetTagKeysOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.TagKeys, true
}

// SetTagKeys sets field value
func (o *TagKeysCondition) SetTagKeys(v []string) {
	o.TagKeys = v
}

func (o TagKeysCondition) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TagKeysCondition) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["operator"] = o.Operator
	toSerialize["tagKeys"] = o.TagKeys
	return toSerialize, nil
}

func (o *TagKeysCondition) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"operator",
		"tagKeys",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTagKeysCondition := _TagKeysCondition{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	//decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTagKeysCondition)

	if err != nil {
		return err
	}

	*o = TagKeysCondition(varTagKeysCondition)

	return err
}

type NullableTagKeysCondition struct {
	value *TagKeysCondition
	isSet bool
}

func (v NullableTagKeysCondition) Get() *TagKeysCondition {
	return v.value
}

func (v *NullableTagKeysCondition) Set(val *TagKeysCondition) {
	v.value = val
	v.isSet = true
}

func (v NullableTagKeysCondition) IsSet() bool {
	return v.isSet
}

func (v *NullableTagKeysCondition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTagKeysCondition(val *TagKeysCondition) *NullableTagKeysCondition {
	return &NullableTagKeysCondition{value: val, isSet: true}
}

func (v NullableTagKeysCondition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTagKeysCondition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
