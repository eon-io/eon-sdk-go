/*
Eon API

The Eon.io REST API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eon

import (
	"encoding/json"
	"fmt"
)

// UsageUnit Unit of measurement for usage
type UsageUnit string

// List of UsageUnit
const (
	USAGE_UNIT_BYTE_MONTHS UsageUnit = "BYTE_MONTHS"
	USAGE_UNIT_BYTES UsageUnit = "BYTES"
	USAGE_UNIT_UNSPECIFIED UsageUnit = "UNSPECIFIED"
)

// All allowed values of UsageUnit enum
var AllowedUsageUnitEnumValues = []UsageUnit{
	"BYTE_MONTHS",
	"BYTES",
	"UNSPECIFIED",
}

func (v *UsageUnit) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := UsageUnit(value)
	for _, existing := range AllowedUsageUnitEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid UsageUnit", value)
}

// NewUsageUnitFromValue returns a pointer to a valid UsageUnit
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewUsageUnitFromValue(v string) (*UsageUnit, error) {
	ev := UsageUnit(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for UsageUnit: valid values are %v", v, AllowedUsageUnitEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v UsageUnit) IsValid() bool {
	for _, existing := range AllowedUsageUnitEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to UsageUnit value
func (v UsageUnit) Ptr() *UsageUnit {
	return &v
}

type NullableUsageUnit struct {
	value *UsageUnit
	isSet bool
}

func (v NullableUsageUnit) Get() *UsageUnit {
	return v.value
}

func (v *NullableUsageUnit) Set(val *UsageUnit) {
	v.value = val
	v.isSet = true
}

func (v NullableUsageUnit) IsSet() bool {
	return v.isSet
}

func (v *NullableUsageUnit) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUsageUnit(val *UsageUnit) *NullableUsageUnit {
	return &NullableUsageUnit{value: val, isSet: true}
}

func (v NullableUsageUnit) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUsageUnit) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

