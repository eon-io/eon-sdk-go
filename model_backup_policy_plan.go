/*
Eon API

The Eon.io REST API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eon

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the BackupPolicyPlan type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BackupPolicyPlan{}

// BackupPolicyPlan struct for BackupPolicyPlan
type BackupPolicyPlan struct {
	BackupPolicyType BackupPolicyType `json:"backupPolicyType"`
	StandardPlan NullableStandardBackupPolicyPlan `json:"standardPlan,omitempty"`
	HighFrequencyPlan NullableHighFrequencyBackupPolicyPlan `json:"highFrequencyPlan,omitempty"`
}

type _BackupPolicyPlan BackupPolicyPlan

// NewBackupPolicyPlan instantiates a new BackupPolicyPlan object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBackupPolicyPlan(backupPolicyType BackupPolicyType) *BackupPolicyPlan {
	this := BackupPolicyPlan{}
	this.BackupPolicyType = backupPolicyType
	return &this
}

// NewBackupPolicyPlanWithDefaults instantiates a new BackupPolicyPlan object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBackupPolicyPlanWithDefaults() *BackupPolicyPlan {
	this := BackupPolicyPlan{}
	return &this
}

// GetBackupPolicyType returns the BackupPolicyType field value
func (o *BackupPolicyPlan) GetBackupPolicyType() BackupPolicyType {
	if o == nil {
		var ret BackupPolicyType
		return ret
	}

	return o.BackupPolicyType
}

// GetBackupPolicyTypeOk returns a tuple with the BackupPolicyType field value
// and a boolean to check if the value has been set.
func (o *BackupPolicyPlan) GetBackupPolicyTypeOk() (*BackupPolicyType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BackupPolicyType, true
}

// SetBackupPolicyType sets field value
func (o *BackupPolicyPlan) SetBackupPolicyType(v BackupPolicyType) {
	o.BackupPolicyType = v
}

// GetStandardPlan returns the StandardPlan field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BackupPolicyPlan) GetStandardPlan() StandardBackupPolicyPlan {
	if o == nil || IsNil(o.StandardPlan.Get()) {
		var ret StandardBackupPolicyPlan
		return ret
	}
	return *o.StandardPlan.Get()
}

// GetStandardPlanOk returns a tuple with the StandardPlan field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BackupPolicyPlan) GetStandardPlanOk() (*StandardBackupPolicyPlan, bool) {
	if o == nil {
		return nil, false
	}
	return o.StandardPlan.Get(), o.StandardPlan.IsSet()
}

// HasStandardPlan returns a boolean if a field has been set.
func (o *BackupPolicyPlan) HasStandardPlan() bool {
	if o != nil && o.StandardPlan.IsSet() {
		return true
	}

	return false
}

// SetStandardPlan gets a reference to the given NullableStandardBackupPolicyPlan and assigns it to the StandardPlan field.
func (o *BackupPolicyPlan) SetStandardPlan(v StandardBackupPolicyPlan) {
	o.StandardPlan.Set(&v)
}
// SetStandardPlanNil sets the value for StandardPlan to be an explicit nil
func (o *BackupPolicyPlan) SetStandardPlanNil() {
	o.StandardPlan.Set(nil)
}

// UnsetStandardPlan ensures that no value is present for StandardPlan, not even an explicit nil
func (o *BackupPolicyPlan) UnsetStandardPlan() {
	o.StandardPlan.Unset()
}

// GetHighFrequencyPlan returns the HighFrequencyPlan field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BackupPolicyPlan) GetHighFrequencyPlan() HighFrequencyBackupPolicyPlan {
	if o == nil || IsNil(o.HighFrequencyPlan.Get()) {
		var ret HighFrequencyBackupPolicyPlan
		return ret
	}
	return *o.HighFrequencyPlan.Get()
}

// GetHighFrequencyPlanOk returns a tuple with the HighFrequencyPlan field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BackupPolicyPlan) GetHighFrequencyPlanOk() (*HighFrequencyBackupPolicyPlan, bool) {
	if o == nil {
		return nil, false
	}
	return o.HighFrequencyPlan.Get(), o.HighFrequencyPlan.IsSet()
}

// HasHighFrequencyPlan returns a boolean if a field has been set.
func (o *BackupPolicyPlan) HasHighFrequencyPlan() bool {
	if o != nil && o.HighFrequencyPlan.IsSet() {
		return true
	}

	return false
}

// SetHighFrequencyPlan gets a reference to the given NullableHighFrequencyBackupPolicyPlan and assigns it to the HighFrequencyPlan field.
func (o *BackupPolicyPlan) SetHighFrequencyPlan(v HighFrequencyBackupPolicyPlan) {
	o.HighFrequencyPlan.Set(&v)
}
// SetHighFrequencyPlanNil sets the value for HighFrequencyPlan to be an explicit nil
func (o *BackupPolicyPlan) SetHighFrequencyPlanNil() {
	o.HighFrequencyPlan.Set(nil)
}

// UnsetHighFrequencyPlan ensures that no value is present for HighFrequencyPlan, not even an explicit nil
func (o *BackupPolicyPlan) UnsetHighFrequencyPlan() {
	o.HighFrequencyPlan.Unset()
}

func (o BackupPolicyPlan) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BackupPolicyPlan) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["backupPolicyType"] = o.BackupPolicyType
	if o.StandardPlan.IsSet() {
		toSerialize["standardPlan"] = o.StandardPlan.Get()
	}
	if o.HighFrequencyPlan.IsSet() {
		toSerialize["highFrequencyPlan"] = o.HighFrequencyPlan.Get()
	}
	return toSerialize, nil
}

func (o *BackupPolicyPlan) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"backupPolicyType",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varBackupPolicyPlan := _BackupPolicyPlan{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	//decoder.DisallowUnknownFields()
	err = decoder.Decode(&varBackupPolicyPlan)

	if err != nil {
		return err
	}

	*o = BackupPolicyPlan(varBackupPolicyPlan)

	return err
}

type NullableBackupPolicyPlan struct {
	value *BackupPolicyPlan
	isSet bool
}

func (v NullableBackupPolicyPlan) Get() *BackupPolicyPlan {
	return v.value
}

func (v *NullableBackupPolicyPlan) Set(val *BackupPolicyPlan) {
	v.value = val
	v.isSet = true
}

func (v NullableBackupPolicyPlan) IsSet() bool {
	return v.isSet
}

func (v *NullableBackupPolicyPlan) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBackupPolicyPlan(val *BackupPolicyPlan) *NullableBackupPolicyPlan {
	return &NullableBackupPolicyPlan{value: val, isSet: true}
}

func (v NullableBackupPolicyPlan) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBackupPolicyPlan) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


