/*
Eon API

The Eon.io REST API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eon

import (
	"encoding/json"
)

// checks if the DataClassesDetails type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DataClassesDetails{}

// DataClassesDetails Details about the resource's data classes.
type DataClassesDetails struct {
	// List of data classes.
	DataClasses []DataClass `json:"dataClasses,omitempty"`
	// Whether the data classes are manually overridden. If `true`, the list of data classes is user-defined and remains static. If `false`, the data classes are automatically detected and listed by Eon. 
	IsOverridden *bool `json:"isOverridden,omitempty"`
}

// NewDataClassesDetails instantiates a new DataClassesDetails object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDataClassesDetails() *DataClassesDetails {
	this := DataClassesDetails{}
	return &this
}

// NewDataClassesDetailsWithDefaults instantiates a new DataClassesDetails object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDataClassesDetailsWithDefaults() *DataClassesDetails {
	this := DataClassesDetails{}
	return &this
}

// GetDataClasses returns the DataClasses field value if set, zero value otherwise.
func (o *DataClassesDetails) GetDataClasses() []DataClass {
	if o == nil || IsNil(o.DataClasses) {
		var ret []DataClass
		return ret
	}
	return o.DataClasses
}

// GetDataClassesOk returns a tuple with the DataClasses field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataClassesDetails) GetDataClassesOk() ([]DataClass, bool) {
	if o == nil || IsNil(o.DataClasses) {
		return nil, false
	}
	return o.DataClasses, true
}

// HasDataClasses returns a boolean if a field has been set.
func (o *DataClassesDetails) HasDataClasses() bool {
	if o != nil && !IsNil(o.DataClasses) {
		return true
	}

	return false
}

// SetDataClasses gets a reference to the given []DataClass and assigns it to the DataClasses field.
func (o *DataClassesDetails) SetDataClasses(v []DataClass) {
	o.DataClasses = v
}

// GetIsOverridden returns the IsOverridden field value if set, zero value otherwise.
func (o *DataClassesDetails) GetIsOverridden() bool {
	if o == nil || IsNil(o.IsOverridden) {
		var ret bool
		return ret
	}
	return *o.IsOverridden
}

// GetIsOverriddenOk returns a tuple with the IsOverridden field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataClassesDetails) GetIsOverriddenOk() (*bool, bool) {
	if o == nil || IsNil(o.IsOverridden) {
		return nil, false
	}
	return o.IsOverridden, true
}

// HasIsOverridden returns a boolean if a field has been set.
func (o *DataClassesDetails) HasIsOverridden() bool {
	if o != nil && !IsNil(o.IsOverridden) {
		return true
	}

	return false
}

// SetIsOverridden gets a reference to the given bool and assigns it to the IsOverridden field.
func (o *DataClassesDetails) SetIsOverridden(v bool) {
	o.IsOverridden = &v
}

func (o DataClassesDetails) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DataClassesDetails) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DataClasses) {
		toSerialize["dataClasses"] = o.DataClasses
	}
	if !IsNil(o.IsOverridden) {
		toSerialize["isOverridden"] = o.IsOverridden
	}
	return toSerialize, nil
}

type NullableDataClassesDetails struct {
	value *DataClassesDetails
	isSet bool
}

func (v NullableDataClassesDetails) Get() *DataClassesDetails {
	return v.value
}

func (v *NullableDataClassesDetails) Set(val *DataClassesDetails) {
	v.value = val
	v.isSet = true
}

func (v NullableDataClassesDetails) IsSet() bool {
	return v.isSet
}

func (v *NullableDataClassesDetails) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDataClassesDetails(val *DataClassesDetails) *NullableDataClassesDetails {
	return &NullableDataClassesDetails{value: val, isSet: true}
}

func (v NullableDataClassesDetails) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDataClassesDetails) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


