/*
Eon API

The Eon.io REST API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eon

import (
	"encoding/json"
)

// checks if the AwsEc2Resource type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AwsEc2Resource{}

// AwsEc2Resource Properties of the original AWS EC2 instance. Present only when `resourceType` is set to `AWS_EC2`. 
type AwsEc2Resource struct {
	// List of volumes attached to the resource.
	Volumes []InventoryVolume `json:"volumes,omitempty"`
}

// NewAwsEc2Resource instantiates a new AwsEc2Resource object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAwsEc2Resource() *AwsEc2Resource {
	this := AwsEc2Resource{}
	return &this
}

// NewAwsEc2ResourceWithDefaults instantiates a new AwsEc2Resource object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAwsEc2ResourceWithDefaults() *AwsEc2Resource {
	this := AwsEc2Resource{}
	return &this
}

// GetVolumes returns the Volumes field value if set, zero value otherwise.
func (o *AwsEc2Resource) GetVolumes() []InventoryVolume {
	if o == nil || IsNil(o.Volumes) {
		var ret []InventoryVolume
		return ret
	}
	return o.Volumes
}

// GetVolumesOk returns a tuple with the Volumes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AwsEc2Resource) GetVolumesOk() ([]InventoryVolume, bool) {
	if o == nil || IsNil(o.Volumes) {
		return nil, false
	}
	return o.Volumes, true
}

// HasVolumes returns a boolean if a field has been set.
func (o *AwsEc2Resource) HasVolumes() bool {
	if o != nil && !IsNil(o.Volumes) {
		return true
	}

	return false
}

// SetVolumes gets a reference to the given []InventoryVolume and assigns it to the Volumes field.
func (o *AwsEc2Resource) SetVolumes(v []InventoryVolume) {
	o.Volumes = v
}

func (o AwsEc2Resource) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AwsEc2Resource) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Volumes) {
		toSerialize["volumes"] = o.Volumes
	}
	return toSerialize, nil
}

type NullableAwsEc2Resource struct {
	value *AwsEc2Resource
	isSet bool
}

func (v NullableAwsEc2Resource) Get() *AwsEc2Resource {
	return v.value
}

func (v *NullableAwsEc2Resource) Set(val *AwsEc2Resource) {
	v.value = val
	v.isSet = true
}

func (v NullableAwsEc2Resource) IsSet() bool {
	return v.isSet
}

func (v *NullableAwsEc2Resource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAwsEc2Resource(val *AwsEc2Resource) *NullableAwsEc2Resource {
	return &NullableAwsEc2Resource{value: val, isSet: true}
}

func (v NullableAwsEc2Resource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAwsEc2Resource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


