/*
Eon API

The Eon.io REST API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eon

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the GcpDiskSettings type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GcpDiskSettings{}

// GcpDiskSettings struct for GcpDiskSettings
type GcpDiskSettings struct {
	// The name of the restored disk.
	Name string `json:"name"`
	// The type of the disk to restore (e.g., pd-standard, pd-ssd, pd-balanced).
	Type string `json:"type"`
	// The size of the disk to restore in bytes.
	SizeBytes int64 `json:"sizeBytes"`
	// Provisioned IOPS for the disk (only applicable for certain disk types).
	Iops *int64 `json:"iops,omitempty"`
	// Disk throughput.
	Throughput *int64 `json:"throughput,omitempty"`
	// Optional description.
	Description *string `json:"description,omitempty"`
	// Labels to apply to the restored disk as key-value pairs, where key and value are both strings.  **Example:** `{\"primary\": \"true\"}` 
	Labels *map[string]string `json:"labels,omitempty"`
	// ID of the customer-managed encryption key to use for the disk.
	EncryptionKeyId *string `json:"encryptionKeyId,omitempty"`
}

type _GcpDiskSettings GcpDiskSettings

// NewGcpDiskSettings instantiates a new GcpDiskSettings object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGcpDiskSettings(name string, type_ string, sizeBytes int64) *GcpDiskSettings {
	this := GcpDiskSettings{}
	this.Name = name
	this.Type = type_
	this.SizeBytes = sizeBytes
	return &this
}

// NewGcpDiskSettingsWithDefaults instantiates a new GcpDiskSettings object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGcpDiskSettingsWithDefaults() *GcpDiskSettings {
	this := GcpDiskSettings{}
	return &this
}

// GetName returns the Name field value
func (o *GcpDiskSettings) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *GcpDiskSettings) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *GcpDiskSettings) SetName(v string) {
	o.Name = v
}

// GetType returns the Type field value
func (o *GcpDiskSettings) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *GcpDiskSettings) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *GcpDiskSettings) SetType(v string) {
	o.Type = v
}

// GetSizeBytes returns the SizeBytes field value
func (o *GcpDiskSettings) GetSizeBytes() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.SizeBytes
}

// GetSizeBytesOk returns a tuple with the SizeBytes field value
// and a boolean to check if the value has been set.
func (o *GcpDiskSettings) GetSizeBytesOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SizeBytes, true
}

// SetSizeBytes sets field value
func (o *GcpDiskSettings) SetSizeBytes(v int64) {
	o.SizeBytes = v
}

// GetIops returns the Iops field value if set, zero value otherwise.
func (o *GcpDiskSettings) GetIops() int64 {
	if o == nil || IsNil(o.Iops) {
		var ret int64
		return ret
	}
	return *o.Iops
}

// GetIopsOk returns a tuple with the Iops field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GcpDiskSettings) GetIopsOk() (*int64, bool) {
	if o == nil || IsNil(o.Iops) {
		return nil, false
	}
	return o.Iops, true
}

// HasIops returns a boolean if a field has been set.
func (o *GcpDiskSettings) HasIops() bool {
	if o != nil && !IsNil(o.Iops) {
		return true
	}

	return false
}

// SetIops gets a reference to the given int64 and assigns it to the Iops field.
func (o *GcpDiskSettings) SetIops(v int64) {
	o.Iops = &v
}

// GetThroughput returns the Throughput field value if set, zero value otherwise.
func (o *GcpDiskSettings) GetThroughput() int64 {
	if o == nil || IsNil(o.Throughput) {
		var ret int64
		return ret
	}
	return *o.Throughput
}

// GetThroughputOk returns a tuple with the Throughput field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GcpDiskSettings) GetThroughputOk() (*int64, bool) {
	if o == nil || IsNil(o.Throughput) {
		return nil, false
	}
	return o.Throughput, true
}

// HasThroughput returns a boolean if a field has been set.
func (o *GcpDiskSettings) HasThroughput() bool {
	if o != nil && !IsNil(o.Throughput) {
		return true
	}

	return false
}

// SetThroughput gets a reference to the given int64 and assigns it to the Throughput field.
func (o *GcpDiskSettings) SetThroughput(v int64) {
	o.Throughput = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *GcpDiskSettings) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GcpDiskSettings) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *GcpDiskSettings) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *GcpDiskSettings) SetDescription(v string) {
	o.Description = &v
}

// GetLabels returns the Labels field value if set, zero value otherwise.
func (o *GcpDiskSettings) GetLabels() map[string]string {
	if o == nil || IsNil(o.Labels) {
		var ret map[string]string
		return ret
	}
	return *o.Labels
}

// GetLabelsOk returns a tuple with the Labels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GcpDiskSettings) GetLabelsOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Labels) {
		return nil, false
	}
	return o.Labels, true
}

// HasLabels returns a boolean if a field has been set.
func (o *GcpDiskSettings) HasLabels() bool {
	if o != nil && !IsNil(o.Labels) {
		return true
	}

	return false
}

// SetLabels gets a reference to the given map[string]string and assigns it to the Labels field.
func (o *GcpDiskSettings) SetLabels(v map[string]string) {
	o.Labels = &v
}

// GetEncryptionKeyId returns the EncryptionKeyId field value if set, zero value otherwise.
func (o *GcpDiskSettings) GetEncryptionKeyId() string {
	if o == nil || IsNil(o.EncryptionKeyId) {
		var ret string
		return ret
	}
	return *o.EncryptionKeyId
}

// GetEncryptionKeyIdOk returns a tuple with the EncryptionKeyId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GcpDiskSettings) GetEncryptionKeyIdOk() (*string, bool) {
	if o == nil || IsNil(o.EncryptionKeyId) {
		return nil, false
	}
	return o.EncryptionKeyId, true
}

// HasEncryptionKeyId returns a boolean if a field has been set.
func (o *GcpDiskSettings) HasEncryptionKeyId() bool {
	if o != nil && !IsNil(o.EncryptionKeyId) {
		return true
	}

	return false
}

// SetEncryptionKeyId gets a reference to the given string and assigns it to the EncryptionKeyId field.
func (o *GcpDiskSettings) SetEncryptionKeyId(v string) {
	o.EncryptionKeyId = &v
}

func (o GcpDiskSettings) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GcpDiskSettings) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	toSerialize["type"] = o.Type
	toSerialize["sizeBytes"] = o.SizeBytes
	if !IsNil(o.Iops) {
		toSerialize["iops"] = o.Iops
	}
	if !IsNil(o.Throughput) {
		toSerialize["throughput"] = o.Throughput
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Labels) {
		toSerialize["labels"] = o.Labels
	}
	if !IsNil(o.EncryptionKeyId) {
		toSerialize["encryptionKeyId"] = o.EncryptionKeyId
	}
	return toSerialize, nil
}

func (o *GcpDiskSettings) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"type",
		"sizeBytes",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varGcpDiskSettings := _GcpDiskSettings{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	//decoder.DisallowUnknownFields()
	err = decoder.Decode(&varGcpDiskSettings)

	if err != nil {
		return err
	}

	*o = GcpDiskSettings(varGcpDiskSettings)

	return err
}

type NullableGcpDiskSettings struct {
	value *GcpDiskSettings
	isSet bool
}

func (v NullableGcpDiskSettings) Get() *GcpDiskSettings {
	return v.value
}

func (v *NullableGcpDiskSettings) Set(val *GcpDiskSettings) {
	v.value = val
	v.isSet = true
}

func (v NullableGcpDiskSettings) IsSet() bool {
	return v.isSet
}

func (v *NullableGcpDiskSettings) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGcpDiskSettings(val *GcpDiskSettings) *NullableGcpDiskSettings {
	return &NullableGcpDiskSettings{value: val, isSet: true}
}

func (v NullableGcpDiskSettings) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGcpDiskSettings) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


