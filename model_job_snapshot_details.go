/*
Eon API

The Eon.io REST API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eon

import (
	"bytes"
	"encoding/json"
	"fmt"
	"time"
)

// checks if the JobSnapshotDetails type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &JobSnapshotDetails{}

// JobSnapshotDetails Eon snapshot.
type JobSnapshotDetails struct {
	// Snapshot ID.
	Id *string `json:"id,omitempty"`
	// Date and time of the resource that's preserved by the snapshot.
	PointInTime time.Time `json:"pointInTime"`
}

type _JobSnapshotDetails JobSnapshotDetails

// NewJobSnapshotDetails instantiates a new JobSnapshotDetails object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewJobSnapshotDetails(pointInTime time.Time) *JobSnapshotDetails {
	this := JobSnapshotDetails{}
	this.PointInTime = pointInTime
	return &this
}

// NewJobSnapshotDetailsWithDefaults instantiates a new JobSnapshotDetails object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewJobSnapshotDetailsWithDefaults() *JobSnapshotDetails {
	this := JobSnapshotDetails{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *JobSnapshotDetails) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JobSnapshotDetails) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *JobSnapshotDetails) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *JobSnapshotDetails) SetId(v string) {
	o.Id = &v
}

// GetPointInTime returns the PointInTime field value
func (o *JobSnapshotDetails) GetPointInTime() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.PointInTime
}

// GetPointInTimeOk returns a tuple with the PointInTime field value
// and a boolean to check if the value has been set.
func (o *JobSnapshotDetails) GetPointInTimeOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PointInTime, true
}

// SetPointInTime sets field value
func (o *JobSnapshotDetails) SetPointInTime(v time.Time) {
	o.PointInTime = v
}

func (o JobSnapshotDetails) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o JobSnapshotDetails) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	toSerialize["pointInTime"] = o.PointInTime
	return toSerialize, nil
}

func (o *JobSnapshotDetails) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"pointInTime",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varJobSnapshotDetails := _JobSnapshotDetails{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	//decoder.DisallowUnknownFields()
	err = decoder.Decode(&varJobSnapshotDetails)

	if err != nil {
		return err
	}

	*o = JobSnapshotDetails(varJobSnapshotDetails)

	return err
}

type NullableJobSnapshotDetails struct {
	value *JobSnapshotDetails
	isSet bool
}

func (v NullableJobSnapshotDetails) Get() *JobSnapshotDetails {
	return v.value
}

func (v *NullableJobSnapshotDetails) Set(val *JobSnapshotDetails) {
	v.value = val
	v.isSet = true
}

func (v NullableJobSnapshotDetails) IsSet() bool {
	return v.isSet
}

func (v *NullableJobSnapshotDetails) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJobSnapshotDetails(val *JobSnapshotDetails) *NullableJobSnapshotDetails {
	return &NullableJobSnapshotDetails{value: val, isSet: true}
}

func (v NullableJobSnapshotDetails) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJobSnapshotDetails) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
