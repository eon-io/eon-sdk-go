/*
Eon API

The Eon.io REST API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eon

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the HighFrequencyBackupSchedules type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HighFrequencyBackupSchedules{}

// HighFrequencyBackupSchedules struct for HighFrequencyBackupSchedules
type HighFrequencyBackupSchedules struct {
	// Vault ID.
	VaultId        string                            `json:"vaultId"`
	ScheduleConfig HighFrequencyBackupScheduleConfig `json:"scheduleConfig"`
	// Backup retention period, in days.
	BackupRetentionDays int32 `json:"backupRetentionDays"`
}

type _HighFrequencyBackupSchedules HighFrequencyBackupSchedules

// NewHighFrequencyBackupSchedules instantiates a new HighFrequencyBackupSchedules object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHighFrequencyBackupSchedules(vaultId string, scheduleConfig HighFrequencyBackupScheduleConfig, backupRetentionDays int32) *HighFrequencyBackupSchedules {
	this := HighFrequencyBackupSchedules{}
	this.VaultId = vaultId
	this.ScheduleConfig = scheduleConfig
	this.BackupRetentionDays = backupRetentionDays
	return &this
}

// NewHighFrequencyBackupSchedulesWithDefaults instantiates a new HighFrequencyBackupSchedules object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHighFrequencyBackupSchedulesWithDefaults() *HighFrequencyBackupSchedules {
	this := HighFrequencyBackupSchedules{}
	return &this
}

// GetVaultId returns the VaultId field value
func (o *HighFrequencyBackupSchedules) GetVaultId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.VaultId
}

// GetVaultIdOk returns a tuple with the VaultId field value
// and a boolean to check if the value has been set.
func (o *HighFrequencyBackupSchedules) GetVaultIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.VaultId, true
}

// SetVaultId sets field value
func (o *HighFrequencyBackupSchedules) SetVaultId(v string) {
	o.VaultId = v
}

// GetScheduleConfig returns the ScheduleConfig field value
func (o *HighFrequencyBackupSchedules) GetScheduleConfig() HighFrequencyBackupScheduleConfig {
	if o == nil {
		var ret HighFrequencyBackupScheduleConfig
		return ret
	}

	return o.ScheduleConfig
}

// GetScheduleConfigOk returns a tuple with the ScheduleConfig field value
// and a boolean to check if the value has been set.
func (o *HighFrequencyBackupSchedules) GetScheduleConfigOk() (*HighFrequencyBackupScheduleConfig, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ScheduleConfig, true
}

// SetScheduleConfig sets field value
func (o *HighFrequencyBackupSchedules) SetScheduleConfig(v HighFrequencyBackupScheduleConfig) {
	o.ScheduleConfig = v
}

// GetBackupRetentionDays returns the BackupRetentionDays field value
func (o *HighFrequencyBackupSchedules) GetBackupRetentionDays() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.BackupRetentionDays
}

// GetBackupRetentionDaysOk returns a tuple with the BackupRetentionDays field value
// and a boolean to check if the value has been set.
func (o *HighFrequencyBackupSchedules) GetBackupRetentionDaysOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BackupRetentionDays, true
}

// SetBackupRetentionDays sets field value
func (o *HighFrequencyBackupSchedules) SetBackupRetentionDays(v int32) {
	o.BackupRetentionDays = v
}

func (o HighFrequencyBackupSchedules) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HighFrequencyBackupSchedules) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["vaultId"] = o.VaultId
	toSerialize["scheduleConfig"] = o.ScheduleConfig
	toSerialize["backupRetentionDays"] = o.BackupRetentionDays
	return toSerialize, nil
}

func (o *HighFrequencyBackupSchedules) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"vaultId",
		"scheduleConfig",
		"backupRetentionDays",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varHighFrequencyBackupSchedules := _HighFrequencyBackupSchedules{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	//decoder.DisallowUnknownFields()
	err = decoder.Decode(&varHighFrequencyBackupSchedules)

	if err != nil {
		return err
	}

	*o = HighFrequencyBackupSchedules(varHighFrequencyBackupSchedules)

	return err
}

type NullableHighFrequencyBackupSchedules struct {
	value *HighFrequencyBackupSchedules
	isSet bool
}

func (v NullableHighFrequencyBackupSchedules) Get() *HighFrequencyBackupSchedules {
	return v.value
}

func (v *NullableHighFrequencyBackupSchedules) Set(val *HighFrequencyBackupSchedules) {
	v.value = val
	v.isSet = true
}

func (v NullableHighFrequencyBackupSchedules) IsSet() bool {
	return v.isSet
}

func (v *NullableHighFrequencyBackupSchedules) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHighFrequencyBackupSchedules(val *HighFrequencyBackupSchedules) *NullableHighFrequencyBackupSchedules {
	return &NullableHighFrequencyBackupSchedules{value: val, isSet: true}
}

func (v NullableHighFrequencyBackupSchedules) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHighFrequencyBackupSchedules) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
