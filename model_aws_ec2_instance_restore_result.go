/*
Eon API

The Eon.io REST API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eon

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the AwsEc2InstanceRestoreResult type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AwsEc2InstanceRestoreResult{}

// AwsEc2InstanceRestoreResult struct for AwsEc2InstanceRestoreResult
type AwsEc2InstanceRestoreResult struct {
	// The ID of the restored EC2 instance.
	InstanceId string `json:"instanceId"`
}

type _AwsEc2InstanceRestoreResult AwsEc2InstanceRestoreResult

// NewAwsEc2InstanceRestoreResult instantiates a new AwsEc2InstanceRestoreResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAwsEc2InstanceRestoreResult(instanceId string) *AwsEc2InstanceRestoreResult {
	this := AwsEc2InstanceRestoreResult{}
	this.InstanceId = instanceId
	return &this
}

// NewAwsEc2InstanceRestoreResultWithDefaults instantiates a new AwsEc2InstanceRestoreResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAwsEc2InstanceRestoreResultWithDefaults() *AwsEc2InstanceRestoreResult {
	this := AwsEc2InstanceRestoreResult{}
	return &this
}

// GetInstanceId returns the InstanceId field value
func (o *AwsEc2InstanceRestoreResult) GetInstanceId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.InstanceId
}

// GetInstanceIdOk returns a tuple with the InstanceId field value
// and a boolean to check if the value has been set.
func (o *AwsEc2InstanceRestoreResult) GetInstanceIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.InstanceId, true
}

// SetInstanceId sets field value
func (o *AwsEc2InstanceRestoreResult) SetInstanceId(v string) {
	o.InstanceId = v
}

func (o AwsEc2InstanceRestoreResult) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AwsEc2InstanceRestoreResult) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["instanceId"] = o.InstanceId
	return toSerialize, nil
}

func (o *AwsEc2InstanceRestoreResult) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"instanceId",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAwsEc2InstanceRestoreResult := _AwsEc2InstanceRestoreResult{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	//decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAwsEc2InstanceRestoreResult)

	if err != nil {
		return err
	}

	*o = AwsEc2InstanceRestoreResult(varAwsEc2InstanceRestoreResult)

	return err
}

type NullableAwsEc2InstanceRestoreResult struct {
	value *AwsEc2InstanceRestoreResult
	isSet bool
}

func (v NullableAwsEc2InstanceRestoreResult) Get() *AwsEc2InstanceRestoreResult {
	return v.value
}

func (v *NullableAwsEc2InstanceRestoreResult) Set(val *AwsEc2InstanceRestoreResult) {
	v.value = val
	v.isSet = true
}

func (v NullableAwsEc2InstanceRestoreResult) IsSet() bool {
	return v.isSet
}

func (v *NullableAwsEc2InstanceRestoreResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAwsEc2InstanceRestoreResult(val *AwsEc2InstanceRestoreResult) *NullableAwsEc2InstanceRestoreResult {
	return &NullableAwsEc2InstanceRestoreResult{value: val, isSet: true}
}

func (v NullableAwsEc2InstanceRestoreResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAwsEc2InstanceRestoreResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


