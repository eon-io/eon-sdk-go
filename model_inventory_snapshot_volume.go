/*
Eon API

The Eon.io REST API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eon

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the InventorySnapshotVolume type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &InventorySnapshotVolume{}

// InventorySnapshotVolume struct for InventorySnapshotVolume
type InventorySnapshotVolume struct {
	// Cloud-provider-assigned volume ID.
	ProviderVolumeId string `json:"providerVolumeId"`
	// Region the volume is hosted in.
	Region string `json:"region"`
	// Availability zone the volume is hosted in.
	AvailabilityZone string `json:"availabilityZone"`
	// Volume tags as key-value pairs. Both keys and values are strings.  **Example**: `{\"env\": \"prod\", \"db\": \"\"}` 
	Tags map[string]string `json:"tags"`
	VolumeSettings VolumeSettings `json:"volumeSettings"`
}

type _InventorySnapshotVolume InventorySnapshotVolume

// NewInventorySnapshotVolume instantiates a new InventorySnapshotVolume object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInventorySnapshotVolume(providerVolumeId string, region string, availabilityZone string, tags map[string]string, volumeSettings VolumeSettings) *InventorySnapshotVolume {
	this := InventorySnapshotVolume{}
	this.ProviderVolumeId = providerVolumeId
	this.Region = region
	this.AvailabilityZone = availabilityZone
	this.Tags = tags
	this.VolumeSettings = volumeSettings
	return &this
}

// NewInventorySnapshotVolumeWithDefaults instantiates a new InventorySnapshotVolume object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInventorySnapshotVolumeWithDefaults() *InventorySnapshotVolume {
	this := InventorySnapshotVolume{}
	return &this
}

// GetProviderVolumeId returns the ProviderVolumeId field value
func (o *InventorySnapshotVolume) GetProviderVolumeId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ProviderVolumeId
}

// GetProviderVolumeIdOk returns a tuple with the ProviderVolumeId field value
// and a boolean to check if the value has been set.
func (o *InventorySnapshotVolume) GetProviderVolumeIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProviderVolumeId, true
}

// SetProviderVolumeId sets field value
func (o *InventorySnapshotVolume) SetProviderVolumeId(v string) {
	o.ProviderVolumeId = v
}

// GetRegion returns the Region field value
func (o *InventorySnapshotVolume) GetRegion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Region
}

// GetRegionOk returns a tuple with the Region field value
// and a boolean to check if the value has been set.
func (o *InventorySnapshotVolume) GetRegionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Region, true
}

// SetRegion sets field value
func (o *InventorySnapshotVolume) SetRegion(v string) {
	o.Region = v
}

// GetAvailabilityZone returns the AvailabilityZone field value
func (o *InventorySnapshotVolume) GetAvailabilityZone() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AvailabilityZone
}

// GetAvailabilityZoneOk returns a tuple with the AvailabilityZone field value
// and a boolean to check if the value has been set.
func (o *InventorySnapshotVolume) GetAvailabilityZoneOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AvailabilityZone, true
}

// SetAvailabilityZone sets field value
func (o *InventorySnapshotVolume) SetAvailabilityZone(v string) {
	o.AvailabilityZone = v
}

// GetTags returns the Tags field value
func (o *InventorySnapshotVolume) GetTags() map[string]string {
	if o == nil {
		var ret map[string]string
		return ret
	}

	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value
// and a boolean to check if the value has been set.
func (o *InventorySnapshotVolume) GetTagsOk() (*map[string]string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Tags, true
}

// SetTags sets field value
func (o *InventorySnapshotVolume) SetTags(v map[string]string) {
	o.Tags = v
}

// GetVolumeSettings returns the VolumeSettings field value
func (o *InventorySnapshotVolume) GetVolumeSettings() VolumeSettings {
	if o == nil {
		var ret VolumeSettings
		return ret
	}

	return o.VolumeSettings
}

// GetVolumeSettingsOk returns a tuple with the VolumeSettings field value
// and a boolean to check if the value has been set.
func (o *InventorySnapshotVolume) GetVolumeSettingsOk() (*VolumeSettings, bool) {
	if o == nil {
		return nil, false
	}
	return &o.VolumeSettings, true
}

// SetVolumeSettings sets field value
func (o *InventorySnapshotVolume) SetVolumeSettings(v VolumeSettings) {
	o.VolumeSettings = v
}

func (o InventorySnapshotVolume) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o InventorySnapshotVolume) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["providerVolumeId"] = o.ProviderVolumeId
	toSerialize["region"] = o.Region
	toSerialize["availabilityZone"] = o.AvailabilityZone
	toSerialize["tags"] = o.Tags
	toSerialize["volumeSettings"] = o.VolumeSettings
	return toSerialize, nil
}

func (o *InventorySnapshotVolume) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"providerVolumeId",
		"region",
		"availabilityZone",
		"tags",
		"volumeSettings",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varInventorySnapshotVolume := _InventorySnapshotVolume{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	// Allow unknown fields to handle API schema differences
	// decoder.DisallowUnknownFields()
	err = decoder.Decode(&varInventorySnapshotVolume)

	if err != nil {
		return err
	}

	*o = InventorySnapshotVolume(varInventorySnapshotVolume)

	return err
}

type NullableInventorySnapshotVolume struct {
	value *InventorySnapshotVolume
	isSet bool
}

func (v NullableInventorySnapshotVolume) Get() *InventorySnapshotVolume {
	return v.value
}

func (v *NullableInventorySnapshotVolume) Set(val *InventorySnapshotVolume) {
	v.value = val
	v.isSet = true
}

func (v NullableInventorySnapshotVolume) IsSet() bool {
	return v.isSet
}

func (v *NullableInventorySnapshotVolume) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInventorySnapshotVolume(val *InventorySnapshotVolume) *NullableInventorySnapshotVolume {
	return &NullableInventorySnapshotVolume{value: val, isSet: true}
}

func (v NullableInventorySnapshotVolume) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInventorySnapshotVolume) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


