/*
Eon API

The Eon.io REST API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eon

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the AzureDiskTarget type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AzureDiskTarget{}

// AzureDiskTarget struct for AzureDiskTarget
type AzureDiskTarget struct {
	// The region to restore the vm to
	Region string `json:"region"`
	// Name of the resource group to restore the vm to
	ResourceGroupName string `json:"resourceGroupName"`
	Settings AzureDiskSettings `json:"settings"`
}

type _AzureDiskTarget AzureDiskTarget

// NewAzureDiskTarget instantiates a new AzureDiskTarget object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAzureDiskTarget(region string, resourceGroupName string, settings AzureDiskSettings) *AzureDiskTarget {
	this := AzureDiskTarget{}
	this.Region = region
	this.ResourceGroupName = resourceGroupName
	this.Settings = settings
	return &this
}

// NewAzureDiskTargetWithDefaults instantiates a new AzureDiskTarget object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAzureDiskTargetWithDefaults() *AzureDiskTarget {
	this := AzureDiskTarget{}
	return &this
}

// GetRegion returns the Region field value
func (o *AzureDiskTarget) GetRegion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Region
}

// GetRegionOk returns a tuple with the Region field value
// and a boolean to check if the value has been set.
func (o *AzureDiskTarget) GetRegionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Region, true
}

// SetRegion sets field value
func (o *AzureDiskTarget) SetRegion(v string) {
	o.Region = v
}

// GetResourceGroupName returns the ResourceGroupName field value
func (o *AzureDiskTarget) GetResourceGroupName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ResourceGroupName
}

// GetResourceGroupNameOk returns a tuple with the ResourceGroupName field value
// and a boolean to check if the value has been set.
func (o *AzureDiskTarget) GetResourceGroupNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ResourceGroupName, true
}

// SetResourceGroupName sets field value
func (o *AzureDiskTarget) SetResourceGroupName(v string) {
	o.ResourceGroupName = v
}

// GetSettings returns the Settings field value
func (o *AzureDiskTarget) GetSettings() AzureDiskSettings {
	if o == nil {
		var ret AzureDiskSettings
		return ret
	}

	return o.Settings
}

// GetSettingsOk returns a tuple with the Settings field value
// and a boolean to check if the value has been set.
func (o *AzureDiskTarget) GetSettingsOk() (*AzureDiskSettings, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Settings, true
}

// SetSettings sets field value
func (o *AzureDiskTarget) SetSettings(v AzureDiskSettings) {
	o.Settings = v
}

func (o AzureDiskTarget) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AzureDiskTarget) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["region"] = o.Region
	toSerialize["resourceGroupName"] = o.ResourceGroupName
	toSerialize["settings"] = o.Settings
	return toSerialize, nil
}

func (o *AzureDiskTarget) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"region",
		"resourceGroupName",
		"settings",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAzureDiskTarget := _AzureDiskTarget{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	//decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAzureDiskTarget)

	if err != nil {
		return err
	}

	*o = AzureDiskTarget(varAzureDiskTarget)

	return err
}

type NullableAzureDiskTarget struct {
	value *AzureDiskTarget
	isSet bool
}

func (v NullableAzureDiskTarget) Get() *AzureDiskTarget {
	return v.value
}

func (v *NullableAzureDiskTarget) Set(val *AzureDiskTarget) {
	v.value = val
	v.isSet = true
}

func (v NullableAzureDiskTarget) IsSet() bool {
	return v.isSet
}

func (v *NullableAzureDiskTarget) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAzureDiskTarget(val *AzureDiskTarget) *NullableAzureDiskTarget {
	return &NullableAzureDiskTarget{value: val, isSet: true}
}

func (v NullableAzureDiskTarget) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAzureDiskTarget) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


