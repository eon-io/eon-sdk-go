/*
Eon API

The Eon.io REST API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eon

import (
	"encoding/json"
)

// checks if the AnnuallyConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AnnuallyConfig{}

// AnnuallyConfig struct for AnnuallyConfig
type AnnuallyConfig struct {
	TimeOfDay *TimeOfDay `json:"timeOfDay,omitempty"`
	TimeOfYear *TimeOfYear `json:"timeOfYear,omitempty"`
	// The window of time after the start time you want the backup to start, in minutes. Defaults to `240` (4 hours). 
	StartWindowMinutes *int32 `json:"startWindowMinutes,omitempty"`
}

// NewAnnuallyConfig instantiates a new AnnuallyConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAnnuallyConfig() *AnnuallyConfig {
	this := AnnuallyConfig{}
	var startWindowMinutes int32 = 240
	this.StartWindowMinutes = &startWindowMinutes
	return &this
}

// NewAnnuallyConfigWithDefaults instantiates a new AnnuallyConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAnnuallyConfigWithDefaults() *AnnuallyConfig {
	this := AnnuallyConfig{}
	var startWindowMinutes int32 = 240
	this.StartWindowMinutes = &startWindowMinutes
	return &this
}

// GetTimeOfDay returns the TimeOfDay field value if set, zero value otherwise.
func (o *AnnuallyConfig) GetTimeOfDay() TimeOfDay {
	if o == nil || IsNil(o.TimeOfDay) {
		var ret TimeOfDay
		return ret
	}
	return *o.TimeOfDay
}

// GetTimeOfDayOk returns a tuple with the TimeOfDay field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AnnuallyConfig) GetTimeOfDayOk() (*TimeOfDay, bool) {
	if o == nil || IsNil(o.TimeOfDay) {
		return nil, false
	}
	return o.TimeOfDay, true
}

// HasTimeOfDay returns a boolean if a field has been set.
func (o *AnnuallyConfig) HasTimeOfDay() bool {
	if o != nil && !IsNil(o.TimeOfDay) {
		return true
	}

	return false
}

// SetTimeOfDay gets a reference to the given TimeOfDay and assigns it to the TimeOfDay field.
func (o *AnnuallyConfig) SetTimeOfDay(v TimeOfDay) {
	o.TimeOfDay = &v
}

// GetTimeOfYear returns the TimeOfYear field value if set, zero value otherwise.
func (o *AnnuallyConfig) GetTimeOfYear() TimeOfYear {
	if o == nil || IsNil(o.TimeOfYear) {
		var ret TimeOfYear
		return ret
	}
	return *o.TimeOfYear
}

// GetTimeOfYearOk returns a tuple with the TimeOfYear field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AnnuallyConfig) GetTimeOfYearOk() (*TimeOfYear, bool) {
	if o == nil || IsNil(o.TimeOfYear) {
		return nil, false
	}
	return o.TimeOfYear, true
}

// HasTimeOfYear returns a boolean if a field has been set.
func (o *AnnuallyConfig) HasTimeOfYear() bool {
	if o != nil && !IsNil(o.TimeOfYear) {
		return true
	}

	return false
}

// SetTimeOfYear gets a reference to the given TimeOfYear and assigns it to the TimeOfYear field.
func (o *AnnuallyConfig) SetTimeOfYear(v TimeOfYear) {
	o.TimeOfYear = &v
}

// GetStartWindowMinutes returns the StartWindowMinutes field value if set, zero value otherwise.
func (o *AnnuallyConfig) GetStartWindowMinutes() int32 {
	if o == nil || IsNil(o.StartWindowMinutes) {
		var ret int32
		return ret
	}
	return *o.StartWindowMinutes
}

// GetStartWindowMinutesOk returns a tuple with the StartWindowMinutes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AnnuallyConfig) GetStartWindowMinutesOk() (*int32, bool) {
	if o == nil || IsNil(o.StartWindowMinutes) {
		return nil, false
	}
	return o.StartWindowMinutes, true
}

// HasStartWindowMinutes returns a boolean if a field has been set.
func (o *AnnuallyConfig) HasStartWindowMinutes() bool {
	if o != nil && !IsNil(o.StartWindowMinutes) {
		return true
	}

	return false
}

// SetStartWindowMinutes gets a reference to the given int32 and assigns it to the StartWindowMinutes field.
func (o *AnnuallyConfig) SetStartWindowMinutes(v int32) {
	o.StartWindowMinutes = &v
}

func (o AnnuallyConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AnnuallyConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.TimeOfDay) {
		toSerialize["timeOfDay"] = o.TimeOfDay
	}
	if !IsNil(o.TimeOfYear) {
		toSerialize["timeOfYear"] = o.TimeOfYear
	}
	if !IsNil(o.StartWindowMinutes) {
		toSerialize["startWindowMinutes"] = o.StartWindowMinutes
	}
	return toSerialize, nil
}

type NullableAnnuallyConfig struct {
	value *AnnuallyConfig
	isSet bool
}

func (v NullableAnnuallyConfig) Get() *AnnuallyConfig {
	return v.value
}

func (v *NullableAnnuallyConfig) Set(val *AnnuallyConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableAnnuallyConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableAnnuallyConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAnnuallyConfig(val *AnnuallyConfig) *NullableAnnuallyConfig {
	return &NullableAnnuallyConfig{value: val, isSet: true}
}

func (v NullableAnnuallyConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAnnuallyConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


