/*
Eon API

The Eon.io REST API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eon

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the UpdateBackupPolicyResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateBackupPolicyResponse{}

// UpdateBackupPolicyResponse struct for UpdateBackupPolicyResponse
type UpdateBackupPolicyResponse struct {
	BackupPolicy BackupPolicy `json:"backupPolicy"`
}

type _UpdateBackupPolicyResponse UpdateBackupPolicyResponse

// NewUpdateBackupPolicyResponse instantiates a new UpdateBackupPolicyResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateBackupPolicyResponse(backupPolicy BackupPolicy) *UpdateBackupPolicyResponse {
	this := UpdateBackupPolicyResponse{}
	this.BackupPolicy = backupPolicy
	return &this
}

// NewUpdateBackupPolicyResponseWithDefaults instantiates a new UpdateBackupPolicyResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateBackupPolicyResponseWithDefaults() *UpdateBackupPolicyResponse {
	this := UpdateBackupPolicyResponse{}
	return &this
}

// GetBackupPolicy returns the BackupPolicy field value
func (o *UpdateBackupPolicyResponse) GetBackupPolicy() BackupPolicy {
	if o == nil {
		var ret BackupPolicy
		return ret
	}

	return o.BackupPolicy
}

// GetBackupPolicyOk returns a tuple with the BackupPolicy field value
// and a boolean to check if the value has been set.
func (o *UpdateBackupPolicyResponse) GetBackupPolicyOk() (*BackupPolicy, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BackupPolicy, true
}

// SetBackupPolicy sets field value
func (o *UpdateBackupPolicyResponse) SetBackupPolicy(v BackupPolicy) {
	o.BackupPolicy = v
}

func (o UpdateBackupPolicyResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateBackupPolicyResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["backupPolicy"] = o.BackupPolicy
	return toSerialize, nil
}

func (o *UpdateBackupPolicyResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"backupPolicy",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUpdateBackupPolicyResponse := _UpdateBackupPolicyResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	//decoder.DisallowUnknownFields()
	err = decoder.Decode(&varUpdateBackupPolicyResponse)

	if err != nil {
		return err
	}

	*o = UpdateBackupPolicyResponse(varUpdateBackupPolicyResponse)

	return err
}

type NullableUpdateBackupPolicyResponse struct {
	value *UpdateBackupPolicyResponse
	isSet bool
}

func (v NullableUpdateBackupPolicyResponse) Get() *UpdateBackupPolicyResponse {
	return v.value
}

func (v *NullableUpdateBackupPolicyResponse) Set(val *UpdateBackupPolicyResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateBackupPolicyResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateBackupPolicyResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateBackupPolicyResponse(val *UpdateBackupPolicyResponse) *NullableUpdateBackupPolicyResponse {
	return &NullableUpdateBackupPolicyResponse{value: val, isSet: true}
}

func (v NullableUpdateBackupPolicyResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateBackupPolicyResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
