/*
Eon API

The Eon.io REST API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eon

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the UpdateBackupPolicyRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateBackupPolicyRequest{}

// UpdateBackupPolicyRequest struct for UpdateBackupPolicyRequest
type UpdateBackupPolicyRequest struct {
	// Backup policy display name.
	Name string `json:"name"`
	// Whether the policy is enabled.
	Enabled *bool `json:"enabled,omitempty"`
	ResourceSelector BackupPolicyResourceSelector `json:"resourceSelector"`
	BackupPlan BackupPolicyPlan `json:"backupPlan"`
}

type _UpdateBackupPolicyRequest UpdateBackupPolicyRequest

// NewUpdateBackupPolicyRequest instantiates a new UpdateBackupPolicyRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateBackupPolicyRequest(name string, resourceSelector BackupPolicyResourceSelector, backupPlan BackupPolicyPlan) *UpdateBackupPolicyRequest {
	this := UpdateBackupPolicyRequest{}
	this.Name = name
	var enabled bool = true
	this.Enabled = &enabled
	this.ResourceSelector = resourceSelector
	this.BackupPlan = backupPlan
	return &this
}

// NewUpdateBackupPolicyRequestWithDefaults instantiates a new UpdateBackupPolicyRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateBackupPolicyRequestWithDefaults() *UpdateBackupPolicyRequest {
	this := UpdateBackupPolicyRequest{}
	var enabled bool = true
	this.Enabled = &enabled
	return &this
}

// GetName returns the Name field value
func (o *UpdateBackupPolicyRequest) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *UpdateBackupPolicyRequest) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *UpdateBackupPolicyRequest) SetName(v string) {
	o.Name = v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *UpdateBackupPolicyRequest) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateBackupPolicyRequest) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *UpdateBackupPolicyRequest) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *UpdateBackupPolicyRequest) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetResourceSelector returns the ResourceSelector field value
func (o *UpdateBackupPolicyRequest) GetResourceSelector() BackupPolicyResourceSelector {
	if o == nil {
		var ret BackupPolicyResourceSelector
		return ret
	}

	return o.ResourceSelector
}

// GetResourceSelectorOk returns a tuple with the ResourceSelector field value
// and a boolean to check if the value has been set.
func (o *UpdateBackupPolicyRequest) GetResourceSelectorOk() (*BackupPolicyResourceSelector, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ResourceSelector, true
}

// SetResourceSelector sets field value
func (o *UpdateBackupPolicyRequest) SetResourceSelector(v BackupPolicyResourceSelector) {
	o.ResourceSelector = v
}

// GetBackupPlan returns the BackupPlan field value
func (o *UpdateBackupPolicyRequest) GetBackupPlan() BackupPolicyPlan {
	if o == nil {
		var ret BackupPolicyPlan
		return ret
	}

	return o.BackupPlan
}

// GetBackupPlanOk returns a tuple with the BackupPlan field value
// and a boolean to check if the value has been set.
func (o *UpdateBackupPolicyRequest) GetBackupPlanOk() (*BackupPolicyPlan, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BackupPlan, true
}

// SetBackupPlan sets field value
func (o *UpdateBackupPolicyRequest) SetBackupPlan(v BackupPolicyPlan) {
	o.BackupPlan = v
}

func (o UpdateBackupPolicyRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateBackupPolicyRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	toSerialize["resourceSelector"] = o.ResourceSelector
	toSerialize["backupPlan"] = o.BackupPlan
	return toSerialize, nil
}

func (o *UpdateBackupPolicyRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"resourceSelector",
		"backupPlan",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUpdateBackupPolicyRequest := _UpdateBackupPolicyRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	//decoder.DisallowUnknownFields()
	err = decoder.Decode(&varUpdateBackupPolicyRequest)

	if err != nil {
		return err
	}

	*o = UpdateBackupPolicyRequest(varUpdateBackupPolicyRequest)

	return err
}

type NullableUpdateBackupPolicyRequest struct {
	value *UpdateBackupPolicyRequest
	isSet bool
}

func (v NullableUpdateBackupPolicyRequest) Get() *UpdateBackupPolicyRequest {
	return v.value
}

func (v *NullableUpdateBackupPolicyRequest) Set(val *UpdateBackupPolicyRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateBackupPolicyRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateBackupPolicyRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateBackupPolicyRequest(val *UpdateBackupPolicyRequest) *NullableUpdateBackupPolicyRequest {
	return &NullableUpdateBackupPolicyRequest{value: val, isSet: true}
}

func (v NullableUpdateBackupPolicyRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateBackupPolicyRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


