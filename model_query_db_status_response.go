/*
Eon API

The Eon.io REST API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eon

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the QueryDBStatusResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &QueryDBStatusResponse{}

// QueryDBStatusResponse struct for QueryDBStatusResponse
type QueryDBStatusResponse struct {
	// Time the query took to run, in milliseconds.
	RunningTimeMs *int32 `json:"runningTimeMs,omitempty"`
	Status QueryDBStatus `json:"status"`
	// Error message. Present only if the status is `FAILED`. 
	ErrorMessage NullableString `json:"errorMessage,omitempty"`
	// Locations where the query results are saved to. This is set by `destination` in the [Run Query](./run-query) request body. 
	OutputLocations []string `json:"outputLocations,omitempty"`
}

type _QueryDBStatusResponse QueryDBStatusResponse

// NewQueryDBStatusResponse instantiates a new QueryDBStatusResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewQueryDBStatusResponse(status QueryDBStatus) *QueryDBStatusResponse {
	this := QueryDBStatusResponse{}
	this.Status = status
	return &this
}

// NewQueryDBStatusResponseWithDefaults instantiates a new QueryDBStatusResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewQueryDBStatusResponseWithDefaults() *QueryDBStatusResponse {
	this := QueryDBStatusResponse{}
	return &this
}

// GetRunningTimeMs returns the RunningTimeMs field value if set, zero value otherwise.
func (o *QueryDBStatusResponse) GetRunningTimeMs() int32 {
	if o == nil || IsNil(o.RunningTimeMs) {
		var ret int32
		return ret
	}
	return *o.RunningTimeMs
}

// GetRunningTimeMsOk returns a tuple with the RunningTimeMs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QueryDBStatusResponse) GetRunningTimeMsOk() (*int32, bool) {
	if o == nil || IsNil(o.RunningTimeMs) {
		return nil, false
	}
	return o.RunningTimeMs, true
}

// HasRunningTimeMs returns a boolean if a field has been set.
func (o *QueryDBStatusResponse) HasRunningTimeMs() bool {
	if o != nil && !IsNil(o.RunningTimeMs) {
		return true
	}

	return false
}

// SetRunningTimeMs gets a reference to the given int32 and assigns it to the RunningTimeMs field.
func (o *QueryDBStatusResponse) SetRunningTimeMs(v int32) {
	o.RunningTimeMs = &v
}

// GetStatus returns the Status field value
func (o *QueryDBStatusResponse) GetStatus() QueryDBStatus {
	if o == nil {
		var ret QueryDBStatus
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *QueryDBStatusResponse) GetStatusOk() (*QueryDBStatus, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *QueryDBStatusResponse) SetStatus(v QueryDBStatus) {
	o.Status = v
}

// GetErrorMessage returns the ErrorMessage field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *QueryDBStatusResponse) GetErrorMessage() string {
	if o == nil || IsNil(o.ErrorMessage.Get()) {
		var ret string
		return ret
	}
	return *o.ErrorMessage.Get()
}

// GetErrorMessageOk returns a tuple with the ErrorMessage field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *QueryDBStatusResponse) GetErrorMessageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ErrorMessage.Get(), o.ErrorMessage.IsSet()
}

// HasErrorMessage returns a boolean if a field has been set.
func (o *QueryDBStatusResponse) HasErrorMessage() bool {
	if o != nil && o.ErrorMessage.IsSet() {
		return true
	}

	return false
}

// SetErrorMessage gets a reference to the given NullableString and assigns it to the ErrorMessage field.
func (o *QueryDBStatusResponse) SetErrorMessage(v string) {
	o.ErrorMessage.Set(&v)
}
// SetErrorMessageNil sets the value for ErrorMessage to be an explicit nil
func (o *QueryDBStatusResponse) SetErrorMessageNil() {
	o.ErrorMessage.Set(nil)
}

// UnsetErrorMessage ensures that no value is present for ErrorMessage, not even an explicit nil
func (o *QueryDBStatusResponse) UnsetErrorMessage() {
	o.ErrorMessage.Unset()
}

// GetOutputLocations returns the OutputLocations field value if set, zero value otherwise.
func (o *QueryDBStatusResponse) GetOutputLocations() []string {
	if o == nil || IsNil(o.OutputLocations) {
		var ret []string
		return ret
	}
	return o.OutputLocations
}

// GetOutputLocationsOk returns a tuple with the OutputLocations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QueryDBStatusResponse) GetOutputLocationsOk() ([]string, bool) {
	if o == nil || IsNil(o.OutputLocations) {
		return nil, false
	}
	return o.OutputLocations, true
}

// HasOutputLocations returns a boolean if a field has been set.
func (o *QueryDBStatusResponse) HasOutputLocations() bool {
	if o != nil && !IsNil(o.OutputLocations) {
		return true
	}

	return false
}

// SetOutputLocations gets a reference to the given []string and assigns it to the OutputLocations field.
func (o *QueryDBStatusResponse) SetOutputLocations(v []string) {
	o.OutputLocations = v
}

func (o QueryDBStatusResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o QueryDBStatusResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.RunningTimeMs) {
		toSerialize["runningTimeMs"] = o.RunningTimeMs
	}
	toSerialize["status"] = o.Status
	if o.ErrorMessage.IsSet() {
		toSerialize["errorMessage"] = o.ErrorMessage.Get()
	}
	if !IsNil(o.OutputLocations) {
		toSerialize["outputLocations"] = o.OutputLocations
	}
	return toSerialize, nil
}

func (o *QueryDBStatusResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"status",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varQueryDBStatusResponse := _QueryDBStatusResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	//decoder.DisallowUnknownFields()
	err = decoder.Decode(&varQueryDBStatusResponse)

	if err != nil {
		return err
	}

	*o = QueryDBStatusResponse(varQueryDBStatusResponse)

	return err
}

type NullableQueryDBStatusResponse struct {
	value *QueryDBStatusResponse
	isSet bool
}

func (v NullableQueryDBStatusResponse) Get() *QueryDBStatusResponse {
	return v.value
}

func (v *NullableQueryDBStatusResponse) Set(val *QueryDBStatusResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableQueryDBStatusResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableQueryDBStatusResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableQueryDBStatusResponse(val *QueryDBStatusResponse) *NullableQueryDBStatusResponse {
	return &NullableQueryDBStatusResponse{value: val, isSet: true}
}

func (v NullableQueryDBStatusResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableQueryDBStatusResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


