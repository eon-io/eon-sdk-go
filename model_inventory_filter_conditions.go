/*
Eon API

The Eon.io REST API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eon

import (
	"encoding/json"
)

// checks if the InventoryFilterConditions type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &InventoryFilterConditions{}

// InventoryFilterConditions struct for InventoryFilterConditions
type InventoryFilterConditions struct {
	Id *IdFilters `json:"id,omitempty"`
	ProviderResourceId *ResourceIdFilters `json:"providerResourceId,omitempty"`
	ResourceName *ResourceNameFilters `json:"resourceName,omitempty"`
	ResourceType *ResourceTypeFilters `json:"resourceType,omitempty"`
	Environment *EnvironmentFilters `json:"environment,omitempty"`
	AccountId *AccountIdFilters `json:"accountId,omitempty"`
	Apps *AppFilters `json:"apps,omitempty"`
	Subnets *SubnetFilters `json:"subnets,omitempty"`
	DataClasses *DataClassesFilters `json:"dataClasses,omitempty"`
	BackupStatus *BackupStatusFilters `json:"backupStatus,omitempty"`
	TagKeys *TagKeysFilters `json:"tagKeys,omitempty"`
	TagKeyValues *TagKeyValuesFilters `json:"tagKeyValues,omitempty"`
}

// NewInventoryFilterConditions instantiates a new InventoryFilterConditions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInventoryFilterConditions() *InventoryFilterConditions {
	this := InventoryFilterConditions{}
	return &this
}

// NewInventoryFilterConditionsWithDefaults instantiates a new InventoryFilterConditions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInventoryFilterConditionsWithDefaults() *InventoryFilterConditions {
	this := InventoryFilterConditions{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *InventoryFilterConditions) GetId() IdFilters {
	if o == nil || IsNil(o.Id) {
		var ret IdFilters
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InventoryFilterConditions) GetIdOk() (*IdFilters, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *InventoryFilterConditions) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given IdFilters and assigns it to the Id field.
func (o *InventoryFilterConditions) SetId(v IdFilters) {
	o.Id = &v
}

// GetProviderResourceId returns the ProviderResourceId field value if set, zero value otherwise.
func (o *InventoryFilterConditions) GetProviderResourceId() ResourceIdFilters {
	if o == nil || IsNil(o.ProviderResourceId) {
		var ret ResourceIdFilters
		return ret
	}
	return *o.ProviderResourceId
}

// GetProviderResourceIdOk returns a tuple with the ProviderResourceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InventoryFilterConditions) GetProviderResourceIdOk() (*ResourceIdFilters, bool) {
	if o == nil || IsNil(o.ProviderResourceId) {
		return nil, false
	}
	return o.ProviderResourceId, true
}

// HasProviderResourceId returns a boolean if a field has been set.
func (o *InventoryFilterConditions) HasProviderResourceId() bool {
	if o != nil && !IsNil(o.ProviderResourceId) {
		return true
	}

	return false
}

// SetProviderResourceId gets a reference to the given ResourceIdFilters and assigns it to the ProviderResourceId field.
func (o *InventoryFilterConditions) SetProviderResourceId(v ResourceIdFilters) {
	o.ProviderResourceId = &v
}

// GetResourceName returns the ResourceName field value if set, zero value otherwise.
func (o *InventoryFilterConditions) GetResourceName() ResourceNameFilters {
	if o == nil || IsNil(o.ResourceName) {
		var ret ResourceNameFilters
		return ret
	}
	return *o.ResourceName
}

// GetResourceNameOk returns a tuple with the ResourceName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InventoryFilterConditions) GetResourceNameOk() (*ResourceNameFilters, bool) {
	if o == nil || IsNil(o.ResourceName) {
		return nil, false
	}
	return o.ResourceName, true
}

// HasResourceName returns a boolean if a field has been set.
func (o *InventoryFilterConditions) HasResourceName() bool {
	if o != nil && !IsNil(o.ResourceName) {
		return true
	}

	return false
}

// SetResourceName gets a reference to the given ResourceNameFilters and assigns it to the ResourceName field.
func (o *InventoryFilterConditions) SetResourceName(v ResourceNameFilters) {
	o.ResourceName = &v
}

// GetResourceType returns the ResourceType field value if set, zero value otherwise.
func (o *InventoryFilterConditions) GetResourceType() ResourceTypeFilters {
	if o == nil || IsNil(o.ResourceType) {
		var ret ResourceTypeFilters
		return ret
	}
	return *o.ResourceType
}

// GetResourceTypeOk returns a tuple with the ResourceType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InventoryFilterConditions) GetResourceTypeOk() (*ResourceTypeFilters, bool) {
	if o == nil || IsNil(o.ResourceType) {
		return nil, false
	}
	return o.ResourceType, true
}

// HasResourceType returns a boolean if a field has been set.
func (o *InventoryFilterConditions) HasResourceType() bool {
	if o != nil && !IsNil(o.ResourceType) {
		return true
	}

	return false
}

// SetResourceType gets a reference to the given ResourceTypeFilters and assigns it to the ResourceType field.
func (o *InventoryFilterConditions) SetResourceType(v ResourceTypeFilters) {
	o.ResourceType = &v
}

// GetEnvironment returns the Environment field value if set, zero value otherwise.
func (o *InventoryFilterConditions) GetEnvironment() EnvironmentFilters {
	if o == nil || IsNil(o.Environment) {
		var ret EnvironmentFilters
		return ret
	}
	return *o.Environment
}

// GetEnvironmentOk returns a tuple with the Environment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InventoryFilterConditions) GetEnvironmentOk() (*EnvironmentFilters, bool) {
	if o == nil || IsNil(o.Environment) {
		return nil, false
	}
	return o.Environment, true
}

// HasEnvironment returns a boolean if a field has been set.
func (o *InventoryFilterConditions) HasEnvironment() bool {
	if o != nil && !IsNil(o.Environment) {
		return true
	}

	return false
}

// SetEnvironment gets a reference to the given EnvironmentFilters and assigns it to the Environment field.
func (o *InventoryFilterConditions) SetEnvironment(v EnvironmentFilters) {
	o.Environment = &v
}

// GetAccountId returns the AccountId field value if set, zero value otherwise.
func (o *InventoryFilterConditions) GetAccountId() AccountIdFilters {
	if o == nil || IsNil(o.AccountId) {
		var ret AccountIdFilters
		return ret
	}
	return *o.AccountId
}

// GetAccountIdOk returns a tuple with the AccountId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InventoryFilterConditions) GetAccountIdOk() (*AccountIdFilters, bool) {
	if o == nil || IsNil(o.AccountId) {
		return nil, false
	}
	return o.AccountId, true
}

// HasAccountId returns a boolean if a field has been set.
func (o *InventoryFilterConditions) HasAccountId() bool {
	if o != nil && !IsNil(o.AccountId) {
		return true
	}

	return false
}

// SetAccountId gets a reference to the given AccountIdFilters and assigns it to the AccountId field.
func (o *InventoryFilterConditions) SetAccountId(v AccountIdFilters) {
	o.AccountId = &v
}

// GetApps returns the Apps field value if set, zero value otherwise.
func (o *InventoryFilterConditions) GetApps() AppFilters {
	if o == nil || IsNil(o.Apps) {
		var ret AppFilters
		return ret
	}
	return *o.Apps
}

// GetAppsOk returns a tuple with the Apps field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InventoryFilterConditions) GetAppsOk() (*AppFilters, bool) {
	if o == nil || IsNil(o.Apps) {
		return nil, false
	}
	return o.Apps, true
}

// HasApps returns a boolean if a field has been set.
func (o *InventoryFilterConditions) HasApps() bool {
	if o != nil && !IsNil(o.Apps) {
		return true
	}

	return false
}

// SetApps gets a reference to the given AppFilters and assigns it to the Apps field.
func (o *InventoryFilterConditions) SetApps(v AppFilters) {
	o.Apps = &v
}

// GetSubnets returns the Subnets field value if set, zero value otherwise.
func (o *InventoryFilterConditions) GetSubnets() SubnetFilters {
	if o == nil || IsNil(o.Subnets) {
		var ret SubnetFilters
		return ret
	}
	return *o.Subnets
}

// GetSubnetsOk returns a tuple with the Subnets field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InventoryFilterConditions) GetSubnetsOk() (*SubnetFilters, bool) {
	if o == nil || IsNil(o.Subnets) {
		return nil, false
	}
	return o.Subnets, true
}

// HasSubnets returns a boolean if a field has been set.
func (o *InventoryFilterConditions) HasSubnets() bool {
	if o != nil && !IsNil(o.Subnets) {
		return true
	}

	return false
}

// SetSubnets gets a reference to the given SubnetFilters and assigns it to the Subnets field.
func (o *InventoryFilterConditions) SetSubnets(v SubnetFilters) {
	o.Subnets = &v
}

// GetDataClasses returns the DataClasses field value if set, zero value otherwise.
func (o *InventoryFilterConditions) GetDataClasses() DataClassesFilters {
	if o == nil || IsNil(o.DataClasses) {
		var ret DataClassesFilters
		return ret
	}
	return *o.DataClasses
}

// GetDataClassesOk returns a tuple with the DataClasses field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InventoryFilterConditions) GetDataClassesOk() (*DataClassesFilters, bool) {
	if o == nil || IsNil(o.DataClasses) {
		return nil, false
	}
	return o.DataClasses, true
}

// HasDataClasses returns a boolean if a field has been set.
func (o *InventoryFilterConditions) HasDataClasses() bool {
	if o != nil && !IsNil(o.DataClasses) {
		return true
	}

	return false
}

// SetDataClasses gets a reference to the given DataClassesFilters and assigns it to the DataClasses field.
func (o *InventoryFilterConditions) SetDataClasses(v DataClassesFilters) {
	o.DataClasses = &v
}

// GetBackupStatus returns the BackupStatus field value if set, zero value otherwise.
func (o *InventoryFilterConditions) GetBackupStatus() BackupStatusFilters {
	if o == nil || IsNil(o.BackupStatus) {
		var ret BackupStatusFilters
		return ret
	}
	return *o.BackupStatus
}

// GetBackupStatusOk returns a tuple with the BackupStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InventoryFilterConditions) GetBackupStatusOk() (*BackupStatusFilters, bool) {
	if o == nil || IsNil(o.BackupStatus) {
		return nil, false
	}
	return o.BackupStatus, true
}

// HasBackupStatus returns a boolean if a field has been set.
func (o *InventoryFilterConditions) HasBackupStatus() bool {
	if o != nil && !IsNil(o.BackupStatus) {
		return true
	}

	return false
}

// SetBackupStatus gets a reference to the given BackupStatusFilters and assigns it to the BackupStatus field.
func (o *InventoryFilterConditions) SetBackupStatus(v BackupStatusFilters) {
	o.BackupStatus = &v
}

// GetTagKeys returns the TagKeys field value if set, zero value otherwise.
func (o *InventoryFilterConditions) GetTagKeys() TagKeysFilters {
	if o == nil || IsNil(o.TagKeys) {
		var ret TagKeysFilters
		return ret
	}
	return *o.TagKeys
}

// GetTagKeysOk returns a tuple with the TagKeys field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InventoryFilterConditions) GetTagKeysOk() (*TagKeysFilters, bool) {
	if o == nil || IsNil(o.TagKeys) {
		return nil, false
	}
	return o.TagKeys, true
}

// HasTagKeys returns a boolean if a field has been set.
func (o *InventoryFilterConditions) HasTagKeys() bool {
	if o != nil && !IsNil(o.TagKeys) {
		return true
	}

	return false
}

// SetTagKeys gets a reference to the given TagKeysFilters and assigns it to the TagKeys field.
func (o *InventoryFilterConditions) SetTagKeys(v TagKeysFilters) {
	o.TagKeys = &v
}

// GetTagKeyValues returns the TagKeyValues field value if set, zero value otherwise.
func (o *InventoryFilterConditions) GetTagKeyValues() TagKeyValuesFilters {
	if o == nil || IsNil(o.TagKeyValues) {
		var ret TagKeyValuesFilters
		return ret
	}
	return *o.TagKeyValues
}

// GetTagKeyValuesOk returns a tuple with the TagKeyValues field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InventoryFilterConditions) GetTagKeyValuesOk() (*TagKeyValuesFilters, bool) {
	if o == nil || IsNil(o.TagKeyValues) {
		return nil, false
	}
	return o.TagKeyValues, true
}

// HasTagKeyValues returns a boolean if a field has been set.
func (o *InventoryFilterConditions) HasTagKeyValues() bool {
	if o != nil && !IsNil(o.TagKeyValues) {
		return true
	}

	return false
}

// SetTagKeyValues gets a reference to the given TagKeyValuesFilters and assigns it to the TagKeyValues field.
func (o *InventoryFilterConditions) SetTagKeyValues(v TagKeyValuesFilters) {
	o.TagKeyValues = &v
}

func (o InventoryFilterConditions) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o InventoryFilterConditions) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.ProviderResourceId) {
		toSerialize["providerResourceId"] = o.ProviderResourceId
	}
	if !IsNil(o.ResourceName) {
		toSerialize["resourceName"] = o.ResourceName
	}
	if !IsNil(o.ResourceType) {
		toSerialize["resourceType"] = o.ResourceType
	}
	if !IsNil(o.Environment) {
		toSerialize["environment"] = o.Environment
	}
	if !IsNil(o.AccountId) {
		toSerialize["accountId"] = o.AccountId
	}
	if !IsNil(o.Apps) {
		toSerialize["apps"] = o.Apps
	}
	if !IsNil(o.Subnets) {
		toSerialize["subnets"] = o.Subnets
	}
	if !IsNil(o.DataClasses) {
		toSerialize["dataClasses"] = o.DataClasses
	}
	if !IsNil(o.BackupStatus) {
		toSerialize["backupStatus"] = o.BackupStatus
	}
	if !IsNil(o.TagKeys) {
		toSerialize["tagKeys"] = o.TagKeys
	}
	if !IsNil(o.TagKeyValues) {
		toSerialize["tagKeyValues"] = o.TagKeyValues
	}
	return toSerialize, nil
}

type NullableInventoryFilterConditions struct {
	value *InventoryFilterConditions
	isSet bool
}

func (v NullableInventoryFilterConditions) Get() *InventoryFilterConditions {
	return v.value
}

func (v *NullableInventoryFilterConditions) Set(val *InventoryFilterConditions) {
	v.value = val
	v.isSet = true
}

func (v NullableInventoryFilterConditions) IsSet() bool {
	return v.isSet
}

func (v *NullableInventoryFilterConditions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInventoryFilterConditions(val *InventoryFilterConditions) *NullableInventoryFilterConditions {
	return &NullableInventoryFilterConditions{value: val, isSet: true}
}

func (v NullableInventoryFilterConditions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInventoryFilterConditions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


