/*
Eon API

The Eon.io REST API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eon

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the Snapshot type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Snapshot{}

// Snapshot Eon snapshot.
type Snapshot struct {
	// Eon snapshot ID.
	Id string `json:"id"`
	// ID of the snapshot's parent project.
	ProjectId *string `json:"projectId,omitempty"`
	// Date and time the snapshot creation was started. This doesn't represent the point in time the resource is backed up from, which is instead represented by the `pointInTime` property. 
	CreatedTime time.Time `json:"createdTime"`
	// Date and time of the resource that's preserved by the snapshot.
	PointInTime *time.Time `json:"pointInTime,omitempty"`
	// ID of the vault the snapshot is stored in.
	VaultId string `json:"vaultId"`
	// Eon-assigned ID of the resource the snapshot is backing up.
	ResourceId string `json:"resourceId"`
	// Date and time the snapshot's retention is expected to expire, after which it's marked for deletion.
	ExpirationTime *time.Time `json:"expirationTime,omitempty"`
	Resource *ResourceSnapshot `json:"resource,omitempty"`
}

type _Snapshot Snapshot

// NewSnapshot instantiates a new Snapshot object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSnapshot(id string, createdTime time.Time, vaultId string, resourceId string) *Snapshot {
	this := Snapshot{}
	this.Id = id
	this.CreatedTime = createdTime
	this.VaultId = vaultId
	this.ResourceId = resourceId
	return &this
}

// NewSnapshotWithDefaults instantiates a new Snapshot object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSnapshotWithDefaults() *Snapshot {
	this := Snapshot{}
	return &this
}

// GetId returns the Id field value
func (o *Snapshot) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Snapshot) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Snapshot) SetId(v string) {
	o.Id = v
}

// GetProjectId returns the ProjectId field value if set, zero value otherwise.
func (o *Snapshot) GetProjectId() string {
	if o == nil || IsNil(o.ProjectId) {
		var ret string
		return ret
	}
	return *o.ProjectId
}

// GetProjectIdOk returns a tuple with the ProjectId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Snapshot) GetProjectIdOk() (*string, bool) {
	if o == nil || IsNil(o.ProjectId) {
		return nil, false
	}
	return o.ProjectId, true
}

// HasProjectId returns a boolean if a field has been set.
func (o *Snapshot) HasProjectId() bool {
	if o != nil && !IsNil(o.ProjectId) {
		return true
	}

	return false
}

// SetProjectId gets a reference to the given string and assigns it to the ProjectId field.
func (o *Snapshot) SetProjectId(v string) {
	o.ProjectId = &v
}

// GetCreatedTime returns the CreatedTime field value
func (o *Snapshot) GetCreatedTime() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedTime
}

// GetCreatedTimeOk returns a tuple with the CreatedTime field value
// and a boolean to check if the value has been set.
func (o *Snapshot) GetCreatedTimeOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedTime, true
}

// SetCreatedTime sets field value
func (o *Snapshot) SetCreatedTime(v time.Time) {
	o.CreatedTime = v
}

// GetPointInTime returns the PointInTime field value if set, zero value otherwise.
func (o *Snapshot) GetPointInTime() time.Time {
	if o == nil || IsNil(o.PointInTime) {
		var ret time.Time
		return ret
	}
	return *o.PointInTime
}

// GetPointInTimeOk returns a tuple with the PointInTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Snapshot) GetPointInTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.PointInTime) {
		return nil, false
	}
	return o.PointInTime, true
}

// HasPointInTime returns a boolean if a field has been set.
func (o *Snapshot) HasPointInTime() bool {
	if o != nil && !IsNil(o.PointInTime) {
		return true
	}

	return false
}

// SetPointInTime gets a reference to the given time.Time and assigns it to the PointInTime field.
func (o *Snapshot) SetPointInTime(v time.Time) {
	o.PointInTime = &v
}

// GetVaultId returns the VaultId field value
func (o *Snapshot) GetVaultId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.VaultId
}

// GetVaultIdOk returns a tuple with the VaultId field value
// and a boolean to check if the value has been set.
func (o *Snapshot) GetVaultIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.VaultId, true
}

// SetVaultId sets field value
func (o *Snapshot) SetVaultId(v string) {
	o.VaultId = v
}

// GetResourceId returns the ResourceId field value
func (o *Snapshot) GetResourceId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ResourceId
}

// GetResourceIdOk returns a tuple with the ResourceId field value
// and a boolean to check if the value has been set.
func (o *Snapshot) GetResourceIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ResourceId, true
}

// SetResourceId sets field value
func (o *Snapshot) SetResourceId(v string) {
	o.ResourceId = v
}

// GetExpirationTime returns the ExpirationTime field value if set, zero value otherwise.
func (o *Snapshot) GetExpirationTime() time.Time {
	if o == nil || IsNil(o.ExpirationTime) {
		var ret time.Time
		return ret
	}
	return *o.ExpirationTime
}

// GetExpirationTimeOk returns a tuple with the ExpirationTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Snapshot) GetExpirationTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.ExpirationTime) {
		return nil, false
	}
	return o.ExpirationTime, true
}

// HasExpirationTime returns a boolean if a field has been set.
func (o *Snapshot) HasExpirationTime() bool {
	if o != nil && !IsNil(o.ExpirationTime) {
		return true
	}

	return false
}

// SetExpirationTime gets a reference to the given time.Time and assigns it to the ExpirationTime field.
func (o *Snapshot) SetExpirationTime(v time.Time) {
	o.ExpirationTime = &v
}

// GetResource returns the Resource field value if set, zero value otherwise.
func (o *Snapshot) GetResource() ResourceSnapshot {
	if o == nil || IsNil(o.Resource) {
		var ret ResourceSnapshot
		return ret
	}
	return *o.Resource
}

// GetResourceOk returns a tuple with the Resource field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Snapshot) GetResourceOk() (*ResourceSnapshot, bool) {
	if o == nil || IsNil(o.Resource) {
		return nil, false
	}
	return o.Resource, true
}

// HasResource returns a boolean if a field has been set.
func (o *Snapshot) HasResource() bool {
	if o != nil && !IsNil(o.Resource) {
		return true
	}

	return false
}

// SetResource gets a reference to the given ResourceSnapshot and assigns it to the Resource field.
func (o *Snapshot) SetResource(v ResourceSnapshot) {
	o.Resource = &v
}

func (o Snapshot) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Snapshot) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	if !IsNil(o.ProjectId) {
		toSerialize["projectId"] = o.ProjectId
	}
	toSerialize["createdTime"] = o.CreatedTime
	if !IsNil(o.PointInTime) {
		toSerialize["pointInTime"] = o.PointInTime
	}
	toSerialize["vaultId"] = o.VaultId
	toSerialize["resourceId"] = o.ResourceId
	if !IsNil(o.ExpirationTime) {
		toSerialize["expirationTime"] = o.ExpirationTime
	}
	if !IsNil(o.Resource) {
		toSerialize["resource"] = o.Resource
	}
	return toSerialize, nil
}

func (o *Snapshot) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"createdTime",
		"vaultId",
		"resourceId",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSnapshot := _Snapshot{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	//decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSnapshot)

	if err != nil {
		return err
	}

	*o = Snapshot(varSnapshot)

	return err
}

type NullableSnapshot struct {
	value *Snapshot
	isSet bool
}

func (v NullableSnapshot) Get() *Snapshot {
	return v.value
}

func (v *NullableSnapshot) Set(val *Snapshot) {
	v.value = val
	v.isSet = true
}

func (v NullableSnapshot) IsSet() bool {
	return v.isSet
}

func (v *NullableSnapshot) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSnapshot(val *Snapshot) *NullableSnapshot {
	return &NullableSnapshot{value: val, isSet: true}
}

func (v NullableSnapshot) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSnapshot) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


