/*
Eon API

Testing SnapshotsAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package eon

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/eon.io/eon-service/services/frontend/api-gateway/sdk/external-go"
)

func Test_eon_SnapshotsAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test SnapshotsAPIService GetSnapshot", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string
		var projectId string

		resp, httpRes, err := apiClient.SnapshotsAPI.GetSnapshot(context.Background(), id, projectId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SnapshotsAPIService ListResourceSnapshots", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string
		var projectId string

		resp, httpRes, err := apiClient.SnapshotsAPI.ListResourceSnapshots(context.Background(), id, projectId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SnapshotsAPIService RestoreAzureDisk", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectId string
		var id string
		var snapshotId string

		resp, httpRes, err := apiClient.SnapshotsAPI.RestoreAzureDisk(context.Background(), projectId, id, snapshotId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SnapshotsAPIService RestoreAzureSqlDatabase", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectId string
		var id string
		var snapshotId string

		resp, httpRes, err := apiClient.SnapshotsAPI.RestoreAzureSqlDatabase(context.Background(), projectId, id, snapshotId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SnapshotsAPIService RestoreAzureVmInstance", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectId string
		var id string
		var snapshotId string

		resp, httpRes, err := apiClient.SnapshotsAPI.RestoreAzureVmInstance(context.Background(), projectId, id, snapshotId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SnapshotsAPIService RestoreBucket", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectId string
		var id string
		var snapshotId string

		resp, httpRes, err := apiClient.SnapshotsAPI.RestoreBucket(context.Background(), projectId, id, snapshotId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SnapshotsAPIService RestoreDatabase", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectId string
		var id string
		var snapshotId string

		resp, httpRes, err := apiClient.SnapshotsAPI.RestoreDatabase(context.Background(), projectId, id, snapshotId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SnapshotsAPIService RestoreDynamoDBTable", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectId string
		var id string
		var snapshotId string

		resp, httpRes, err := apiClient.SnapshotsAPI.RestoreDynamoDBTable(context.Background(), projectId, id, snapshotId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SnapshotsAPIService RestoreEbsVolume", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectId string
		var id string
		var snapshotId string

		resp, httpRes, err := apiClient.SnapshotsAPI.RestoreEbsVolume(context.Background(), projectId, id, snapshotId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SnapshotsAPIService RestoreEc2Instance", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectId string
		var id string
		var snapshotId string

		resp, httpRes, err := apiClient.SnapshotsAPI.RestoreEc2Instance(context.Background(), projectId, id, snapshotId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SnapshotsAPIService RestoreFiles", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectId string
		var id string
		var snapshotId string

		resp, httpRes, err := apiClient.SnapshotsAPI.RestoreFiles(context.Background(), projectId, id, snapshotId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SnapshotsAPIService RestoreToEbsSnapshot", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectId string
		var id string
		var snapshotId string

		resp, httpRes, err := apiClient.SnapshotsAPI.RestoreToEbsSnapshot(context.Background(), projectId, id, snapshotId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
