/*
Eon API

Testing AccountsAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package eon

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/eon.io/eon-service/services/frontend/api-gateway/sdk/external-go"
)

func Test_eon_AccountsAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test AccountsAPIService ConnectRestoreAccount", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectId string

		resp, httpRes, err := apiClient.AccountsAPI.ConnectRestoreAccount(context.Background(), projectId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AccountsAPIService ConnectSourceAccount", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectId string

		resp, httpRes, err := apiClient.AccountsAPI.ConnectSourceAccount(context.Background(), projectId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AccountsAPIService DisconnectRestoreAccount", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectId string
		var accountId string

		resp, httpRes, err := apiClient.AccountsAPI.DisconnectRestoreAccount(context.Background(), projectId, accountId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AccountsAPIService DisconnectSourceAccount", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectId string
		var accountId string

		resp, httpRes, err := apiClient.AccountsAPI.DisconnectSourceAccount(context.Background(), projectId, accountId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AccountsAPIService ListRestoreAccounts", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectId string

		resp, httpRes, err := apiClient.AccountsAPI.ListRestoreAccounts(context.Background(), projectId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AccountsAPIService ListSourceAccounts", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectId string

		resp, httpRes, err := apiClient.AccountsAPI.ListSourceAccounts(context.Background(), projectId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AccountsAPIService ReconnectRestoreAccount", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectId string
		var accountId string

		resp, httpRes, err := apiClient.AccountsAPI.ReconnectRestoreAccount(context.Background(), projectId, accountId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AccountsAPIService ReconnectSourceAccount", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectId string
		var accountId string

		resp, httpRes, err := apiClient.AccountsAPI.ReconnectSourceAccount(context.Background(), projectId, accountId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
