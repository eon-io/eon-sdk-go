/*
Eon API

Testing ResourcesAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package eon

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/eon.io/eon-service/services/frontend/api-gateway/sdk/external-go"
)

func Test_eon_ResourcesAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test ResourcesAPIService CancelResourceBackupExclusion", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectId string
		var id string

		resp, httpRes, err := apiClient.ResourcesAPI.CancelResourceBackupExclusion(context.Background(), projectId, id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ResourcesAPIService ExcludeResourceFromBackup", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectId string
		var id string

		resp, httpRes, err := apiClient.ResourcesAPI.ExcludeResourceFromBackup(context.Background(), projectId, id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ResourcesAPIService GetResource", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string
		var projectId string

		resp, httpRes, err := apiClient.ResourcesAPI.GetResource(context.Background(), id, projectId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ResourcesAPIService ListResources", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectId string

		resp, httpRes, err := apiClient.ResourcesAPI.ListResources(context.Background(), projectId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ResourcesAPIService OverrideDataClasses", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectId string
		var id string

		resp, httpRes, err := apiClient.ResourcesAPI.OverrideDataClasses(context.Background(), projectId, id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ResourcesAPIService OverrideEnvironment", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectId string
		var id string

		resp, httpRes, err := apiClient.ResourcesAPI.OverrideEnvironment(context.Background(), projectId, id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ResourcesAPIService RemoveDataClassesOverride", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectId string
		var id string

		httpRes, err := apiClient.ResourcesAPI.RemoveDataClassesOverride(context.Background(), projectId, id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ResourcesAPIService RemoveEnvironmentOverride", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectId string
		var id string

		httpRes, err := apiClient.ResourcesAPI.RemoveEnvironmentOverride(context.Background(), projectId, id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
