/*
Eon API

The Eon.io REST API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eon

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the BackupPolicyResourceSelector type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BackupPolicyResourceSelector{}

// BackupPolicyResourceSelector struct for BackupPolicyResourceSelector
type BackupPolicyResourceSelector struct {
	ResourceSelectionMode ResourceSelectorMode `json:"resourceSelectionMode"`
	Expression NullableBackupPolicyExpression `json:"expression,omitempty"`
	// List of cloud-provider-assigned resource IDs to include in the backup policy, regardless of whether they're excluded by `resourceSelectionMode` and `expression`. 
	ResourceInclusionOverride []string `json:"resourceInclusionOverride,omitempty"`
	// List of cloud-provider-assigned resource IDs to exclude from the backup policy, regardless of whether they're included by `resourceSelectionMode` and `expression`. 
	ResourceExclusionOverride []string `json:"resourceExclusionOverride,omitempty"`
}

type _BackupPolicyResourceSelector BackupPolicyResourceSelector

// NewBackupPolicyResourceSelector instantiates a new BackupPolicyResourceSelector object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBackupPolicyResourceSelector(resourceSelectionMode ResourceSelectorMode) *BackupPolicyResourceSelector {
	this := BackupPolicyResourceSelector{}
	this.ResourceSelectionMode = resourceSelectionMode
	return &this
}

// NewBackupPolicyResourceSelectorWithDefaults instantiates a new BackupPolicyResourceSelector object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBackupPolicyResourceSelectorWithDefaults() *BackupPolicyResourceSelector {
	this := BackupPolicyResourceSelector{}
	return &this
}

// GetResourceSelectionMode returns the ResourceSelectionMode field value
func (o *BackupPolicyResourceSelector) GetResourceSelectionMode() ResourceSelectorMode {
	if o == nil {
		var ret ResourceSelectorMode
		return ret
	}

	return o.ResourceSelectionMode
}

// GetResourceSelectionModeOk returns a tuple with the ResourceSelectionMode field value
// and a boolean to check if the value has been set.
func (o *BackupPolicyResourceSelector) GetResourceSelectionModeOk() (*ResourceSelectorMode, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ResourceSelectionMode, true
}

// SetResourceSelectionMode sets field value
func (o *BackupPolicyResourceSelector) SetResourceSelectionMode(v ResourceSelectorMode) {
	o.ResourceSelectionMode = v
}

// GetExpression returns the Expression field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BackupPolicyResourceSelector) GetExpression() BackupPolicyExpression {
	if o == nil || IsNil(o.Expression.Get()) {
		var ret BackupPolicyExpression
		return ret
	}
	return *o.Expression.Get()
}

// GetExpressionOk returns a tuple with the Expression field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BackupPolicyResourceSelector) GetExpressionOk() (*BackupPolicyExpression, bool) {
	if o == nil {
		return nil, false
	}
	return o.Expression.Get(), o.Expression.IsSet()
}

// HasExpression returns a boolean if a field has been set.
func (o *BackupPolicyResourceSelector) HasExpression() bool {
	if o != nil && o.Expression.IsSet() {
		return true
	}

	return false
}

// SetExpression gets a reference to the given NullableBackupPolicyExpression and assigns it to the Expression field.
func (o *BackupPolicyResourceSelector) SetExpression(v BackupPolicyExpression) {
	o.Expression.Set(&v)
}
// SetExpressionNil sets the value for Expression to be an explicit nil
func (o *BackupPolicyResourceSelector) SetExpressionNil() {
	o.Expression.Set(nil)
}

// UnsetExpression ensures that no value is present for Expression, not even an explicit nil
func (o *BackupPolicyResourceSelector) UnsetExpression() {
	o.Expression.Unset()
}

// GetResourceInclusionOverride returns the ResourceInclusionOverride field value if set, zero value otherwise.
func (o *BackupPolicyResourceSelector) GetResourceInclusionOverride() []string {
	if o == nil || IsNil(o.ResourceInclusionOverride) {
		var ret []string
		return ret
	}
	return o.ResourceInclusionOverride
}

// GetResourceInclusionOverrideOk returns a tuple with the ResourceInclusionOverride field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BackupPolicyResourceSelector) GetResourceInclusionOverrideOk() ([]string, bool) {
	if o == nil || IsNil(o.ResourceInclusionOverride) {
		return nil, false
	}
	return o.ResourceInclusionOverride, true
}

// HasResourceInclusionOverride returns a boolean if a field has been set.
func (o *BackupPolicyResourceSelector) HasResourceInclusionOverride() bool {
	if o != nil && !IsNil(o.ResourceInclusionOverride) {
		return true
	}

	return false
}

// SetResourceInclusionOverride gets a reference to the given []string and assigns it to the ResourceInclusionOverride field.
func (o *BackupPolicyResourceSelector) SetResourceInclusionOverride(v []string) {
	o.ResourceInclusionOverride = v
}

// GetResourceExclusionOverride returns the ResourceExclusionOverride field value if set, zero value otherwise.
func (o *BackupPolicyResourceSelector) GetResourceExclusionOverride() []string {
	if o == nil || IsNil(o.ResourceExclusionOverride) {
		var ret []string
		return ret
	}
	return o.ResourceExclusionOverride
}

// GetResourceExclusionOverrideOk returns a tuple with the ResourceExclusionOverride field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BackupPolicyResourceSelector) GetResourceExclusionOverrideOk() ([]string, bool) {
	if o == nil || IsNil(o.ResourceExclusionOverride) {
		return nil, false
	}
	return o.ResourceExclusionOverride, true
}

// HasResourceExclusionOverride returns a boolean if a field has been set.
func (o *BackupPolicyResourceSelector) HasResourceExclusionOverride() bool {
	if o != nil && !IsNil(o.ResourceExclusionOverride) {
		return true
	}

	return false
}

// SetResourceExclusionOverride gets a reference to the given []string and assigns it to the ResourceExclusionOverride field.
func (o *BackupPolicyResourceSelector) SetResourceExclusionOverride(v []string) {
	o.ResourceExclusionOverride = v
}

func (o BackupPolicyResourceSelector) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BackupPolicyResourceSelector) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["resourceSelectionMode"] = o.ResourceSelectionMode
	if o.Expression.IsSet() {
		toSerialize["expression"] = o.Expression.Get()
	}
	if !IsNil(o.ResourceInclusionOverride) {
		toSerialize["resourceInclusionOverride"] = o.ResourceInclusionOverride
	}
	if !IsNil(o.ResourceExclusionOverride) {
		toSerialize["resourceExclusionOverride"] = o.ResourceExclusionOverride
	}
	return toSerialize, nil
}

func (o *BackupPolicyResourceSelector) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"resourceSelectionMode",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varBackupPolicyResourceSelector := _BackupPolicyResourceSelector{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	//decoder.DisallowUnknownFields()
	err = decoder.Decode(&varBackupPolicyResourceSelector)

	if err != nil {
		return err
	}

	*o = BackupPolicyResourceSelector(varBackupPolicyResourceSelector)

	return err
}

type NullableBackupPolicyResourceSelector struct {
	value *BackupPolicyResourceSelector
	isSet bool
}

func (v NullableBackupPolicyResourceSelector) Get() *BackupPolicyResourceSelector {
	return v.value
}

func (v *NullableBackupPolicyResourceSelector) Set(val *BackupPolicyResourceSelector) {
	v.value = val
	v.isSet = true
}

func (v NullableBackupPolicyResourceSelector) IsSet() bool {
	return v.isSet
}

func (v *NullableBackupPolicyResourceSelector) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBackupPolicyResourceSelector(val *BackupPolicyResourceSelector) *NullableBackupPolicyResourceSelector {
	return &NullableBackupPolicyResourceSelector{value: val, isSet: true}
}

func (v NullableBackupPolicyResourceSelector) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBackupPolicyResourceSelector) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


