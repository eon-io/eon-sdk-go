/*
Eon API

The Eon.io REST API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eon

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the FilePath type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FilePath{}

// FilePath struct for FilePath
type FilePath struct {
	// Absolute path to the file or directory to restore.
	Path string `json:"path"`
	// Whether `path` is a directory. If `true`, Eon restores all files in all subdirectories under the path. If `false`, Eon restores only the file at the path. 
	IsDirectory bool `json:"isDirectory"`
}

type _FilePath FilePath

// NewFilePath instantiates a new FilePath object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFilePath(path string, isDirectory bool) *FilePath {
	this := FilePath{}
	this.Path = path
	this.IsDirectory = isDirectory
	return &this
}

// NewFilePathWithDefaults instantiates a new FilePath object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFilePathWithDefaults() *FilePath {
	this := FilePath{}
	return &this
}

// GetPath returns the Path field value
func (o *FilePath) GetPath() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Path
}

// GetPathOk returns a tuple with the Path field value
// and a boolean to check if the value has been set.
func (o *FilePath) GetPathOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Path, true
}

// SetPath sets field value
func (o *FilePath) SetPath(v string) {
	o.Path = v
}

// GetIsDirectory returns the IsDirectory field value
func (o *FilePath) GetIsDirectory() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsDirectory
}

// GetIsDirectoryOk returns a tuple with the IsDirectory field value
// and a boolean to check if the value has been set.
func (o *FilePath) GetIsDirectoryOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsDirectory, true
}

// SetIsDirectory sets field value
func (o *FilePath) SetIsDirectory(v bool) {
	o.IsDirectory = v
}

func (o FilePath) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FilePath) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["path"] = o.Path
	toSerialize["isDirectory"] = o.IsDirectory
	return toSerialize, nil
}

func (o *FilePath) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"path",
		"isDirectory",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varFilePath := _FilePath{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varFilePath)

	if err != nil {
		return err
	}

	*o = FilePath(varFilePath)

	return err
}

type NullableFilePath struct {
	value *FilePath
	isSet bool
}

func (v NullableFilePath) Get() *FilePath {
	return v.value
}

func (v *NullableFilePath) Set(val *FilePath) {
	v.value = val
	v.isSet = true
}

func (v NullableFilePath) IsSet() bool {
	return v.isSet
}

func (v *NullableFilePath) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFilePath(val *FilePath) *NullableFilePath {
	return &NullableFilePath{value: val, isSet: true}
}

func (v NullableFilePath) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFilePath) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


