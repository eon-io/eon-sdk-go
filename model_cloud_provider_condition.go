/*
Eon API

The Eon.io REST API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eon

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the CloudProviderCondition type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CloudProviderCondition{}

// CloudProviderCondition struct for CloudProviderCondition
type CloudProviderCondition struct {
	Operator       ScalarOperators `json:"operator"`
	CloudProviders []Provider      `json:"cloudProviders"`
}

type _CloudProviderCondition CloudProviderCondition

// NewCloudProviderCondition instantiates a new CloudProviderCondition object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCloudProviderCondition(operator ScalarOperators, cloudProviders []Provider) *CloudProviderCondition {
	this := CloudProviderCondition{}
	this.Operator = operator
	this.CloudProviders = cloudProviders
	return &this
}

// NewCloudProviderConditionWithDefaults instantiates a new CloudProviderCondition object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCloudProviderConditionWithDefaults() *CloudProviderCondition {
	this := CloudProviderCondition{}
	return &this
}

// GetOperator returns the Operator field value
func (o *CloudProviderCondition) GetOperator() ScalarOperators {
	if o == nil {
		var ret ScalarOperators
		return ret
	}

	return o.Operator
}

// GetOperatorOk returns a tuple with the Operator field value
// and a boolean to check if the value has been set.
func (o *CloudProviderCondition) GetOperatorOk() (*ScalarOperators, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Operator, true
}

// SetOperator sets field value
func (o *CloudProviderCondition) SetOperator(v ScalarOperators) {
	o.Operator = v
}

// GetCloudProviders returns the CloudProviders field value
func (o *CloudProviderCondition) GetCloudProviders() []Provider {
	if o == nil {
		var ret []Provider
		return ret
	}

	return o.CloudProviders
}

// GetCloudProvidersOk returns a tuple with the CloudProviders field value
// and a boolean to check if the value has been set.
func (o *CloudProviderCondition) GetCloudProvidersOk() ([]Provider, bool) {
	if o == nil {
		return nil, false
	}
	return o.CloudProviders, true
}

// SetCloudProviders sets field value
func (o *CloudProviderCondition) SetCloudProviders(v []Provider) {
	o.CloudProviders = v
}

func (o CloudProviderCondition) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CloudProviderCondition) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["operator"] = o.Operator
	toSerialize["cloudProviders"] = o.CloudProviders
	return toSerialize, nil
}

func (o *CloudProviderCondition) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"operator",
		"cloudProviders",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCloudProviderCondition := _CloudProviderCondition{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	//decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCloudProviderCondition)

	if err != nil {
		return err
	}

	*o = CloudProviderCondition(varCloudProviderCondition)

	return err
}

type NullableCloudProviderCondition struct {
	value *CloudProviderCondition
	isSet bool
}

func (v NullableCloudProviderCondition) Get() *CloudProviderCondition {
	return v.value
}

func (v *NullableCloudProviderCondition) Set(val *CloudProviderCondition) {
	v.value = val
	v.isSet = true
}

func (v NullableCloudProviderCondition) IsSet() bool {
	return v.isSet
}

func (v *NullableCloudProviderCondition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCloudProviderCondition(val *CloudProviderCondition) *NullableCloudProviderCondition {
	return &NullableCloudProviderCondition{value: val, isSet: true}
}

func (v NullableCloudProviderCondition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCloudProviderCondition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
