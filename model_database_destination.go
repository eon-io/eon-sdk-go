/*
Eon API

The Eon.io REST API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eon

import (
	"encoding/json"
)

// checks if the DatabaseDestination type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DatabaseDestination{}

// DatabaseDestination Restore configuration.
type DatabaseDestination struct {
	AwsRds *AwsDatabaseDestination `json:"awsRds,omitempty"`
}

// NewDatabaseDestination instantiates a new DatabaseDestination object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDatabaseDestination() *DatabaseDestination {
	this := DatabaseDestination{}
	return &this
}

// NewDatabaseDestinationWithDefaults instantiates a new DatabaseDestination object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDatabaseDestinationWithDefaults() *DatabaseDestination {
	this := DatabaseDestination{}
	return &this
}

// GetAwsRds returns the AwsRds field value if set, zero value otherwise.
func (o *DatabaseDestination) GetAwsRds() AwsDatabaseDestination {
	if o == nil || IsNil(o.AwsRds) {
		var ret AwsDatabaseDestination
		return ret
	}
	return *o.AwsRds
}

// GetAwsRdsOk returns a tuple with the AwsRds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatabaseDestination) GetAwsRdsOk() (*AwsDatabaseDestination, bool) {
	if o == nil || IsNil(o.AwsRds) {
		return nil, false
	}
	return o.AwsRds, true
}

// HasAwsRds returns a boolean if a field has been set.
func (o *DatabaseDestination) HasAwsRds() bool {
	if o != nil && !IsNil(o.AwsRds) {
		return true
	}

	return false
}

// SetAwsRds gets a reference to the given AwsDatabaseDestination and assigns it to the AwsRds field.
func (o *DatabaseDestination) SetAwsRds(v AwsDatabaseDestination) {
	o.AwsRds = &v
}

func (o DatabaseDestination) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DatabaseDestination) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AwsRds) {
		toSerialize["awsRds"] = o.AwsRds
	}
	return toSerialize, nil
}

type NullableDatabaseDestination struct {
	value *DatabaseDestination
	isSet bool
}

func (v NullableDatabaseDestination) Get() *DatabaseDestination {
	return v.value
}

func (v *NullableDatabaseDestination) Set(val *DatabaseDestination) {
	v.value = val
	v.isSet = true
}

func (v NullableDatabaseDestination) IsSet() bool {
	return v.isSet
}

func (v *NullableDatabaseDestination) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDatabaseDestination(val *DatabaseDestination) *NullableDatabaseDestination {
	return &NullableDatabaseDestination{value: val, isSet: true}
}

func (v NullableDatabaseDestination) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDatabaseDestination) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


