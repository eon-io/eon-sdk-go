/*
Eon API

The Eon.io REST API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eon

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the AwsEbsVolumeRestoreResult type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AwsEbsVolumeRestoreResult{}

// AwsEbsVolumeRestoreResult struct for AwsEbsVolumeRestoreResult
type AwsEbsVolumeRestoreResult struct {
	// The ID of the restored EBS volume.
	VolumeId string `json:"volumeId"`
}

type _AwsEbsVolumeRestoreResult AwsEbsVolumeRestoreResult

// NewAwsEbsVolumeRestoreResult instantiates a new AwsEbsVolumeRestoreResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAwsEbsVolumeRestoreResult(volumeId string) *AwsEbsVolumeRestoreResult {
	this := AwsEbsVolumeRestoreResult{}
	this.VolumeId = volumeId
	return &this
}

// NewAwsEbsVolumeRestoreResultWithDefaults instantiates a new AwsEbsVolumeRestoreResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAwsEbsVolumeRestoreResultWithDefaults() *AwsEbsVolumeRestoreResult {
	this := AwsEbsVolumeRestoreResult{}
	return &this
}

// GetVolumeId returns the VolumeId field value
func (o *AwsEbsVolumeRestoreResult) GetVolumeId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.VolumeId
}

// GetVolumeIdOk returns a tuple with the VolumeId field value
// and a boolean to check if the value has been set.
func (o *AwsEbsVolumeRestoreResult) GetVolumeIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.VolumeId, true
}

// SetVolumeId sets field value
func (o *AwsEbsVolumeRestoreResult) SetVolumeId(v string) {
	o.VolumeId = v
}

func (o AwsEbsVolumeRestoreResult) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AwsEbsVolumeRestoreResult) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["volumeId"] = o.VolumeId
	return toSerialize, nil
}

func (o *AwsEbsVolumeRestoreResult) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"volumeId",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAwsEbsVolumeRestoreResult := _AwsEbsVolumeRestoreResult{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	//decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAwsEbsVolumeRestoreResult)

	if err != nil {
		return err
	}

	*o = AwsEbsVolumeRestoreResult(varAwsEbsVolumeRestoreResult)

	return err
}

type NullableAwsEbsVolumeRestoreResult struct {
	value *AwsEbsVolumeRestoreResult
	isSet bool
}

func (v NullableAwsEbsVolumeRestoreResult) Get() *AwsEbsVolumeRestoreResult {
	return v.value
}

func (v *NullableAwsEbsVolumeRestoreResult) Set(val *AwsEbsVolumeRestoreResult) {
	v.value = val
	v.isSet = true
}

func (v NullableAwsEbsVolumeRestoreResult) IsSet() bool {
	return v.isSet
}

func (v *NullableAwsEbsVolumeRestoreResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAwsEbsVolumeRestoreResult(val *AwsEbsVolumeRestoreResult) *NullableAwsEbsVolumeRestoreResult {
	return &NullableAwsEbsVolumeRestoreResult{value: val, isSet: true}
}

func (v NullableAwsEbsVolumeRestoreResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAwsEbsVolumeRestoreResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


