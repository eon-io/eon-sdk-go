/*
Eon API

The Eon.io REST API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eon

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the AccountConfigInput type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AccountConfigInput{}

// AccountConfigInput struct for AccountConfigInput
type AccountConfigInput struct {
	CloudProvider Provider `json:"cloudProvider"`
	Aws NullableAwsAccountConfigInput `json:"aws,omitempty"`
}

type _AccountConfigInput AccountConfigInput

// NewAccountConfigInput instantiates a new AccountConfigInput object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAccountConfigInput(cloudProvider Provider) *AccountConfigInput {
	this := AccountConfigInput{}
	this.CloudProvider = cloudProvider
	return &this
}

// NewAccountConfigInputWithDefaults instantiates a new AccountConfigInput object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAccountConfigInputWithDefaults() *AccountConfigInput {
	this := AccountConfigInput{}
	return &this
}

// GetCloudProvider returns the CloudProvider field value
func (o *AccountConfigInput) GetCloudProvider() Provider {
	if o == nil {
		var ret Provider
		return ret
	}

	return o.CloudProvider
}

// GetCloudProviderOk returns a tuple with the CloudProvider field value
// and a boolean to check if the value has been set.
func (o *AccountConfigInput) GetCloudProviderOk() (*Provider, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CloudProvider, true
}

// SetCloudProvider sets field value
func (o *AccountConfigInput) SetCloudProvider(v Provider) {
	o.CloudProvider = v
}

// GetAws returns the Aws field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AccountConfigInput) GetAws() AwsAccountConfigInput {
	if o == nil || IsNil(o.Aws.Get()) {
		var ret AwsAccountConfigInput
		return ret
	}
	return *o.Aws.Get()
}

// GetAwsOk returns a tuple with the Aws field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AccountConfigInput) GetAwsOk() (*AwsAccountConfigInput, bool) {
	if o == nil {
		return nil, false
	}
	return o.Aws.Get(), o.Aws.IsSet()
}

// HasAws returns a boolean if a field has been set.
func (o *AccountConfigInput) HasAws() bool {
	if o != nil && o.Aws.IsSet() {
		return true
	}

	return false
}

// SetAws gets a reference to the given NullableAwsAccountConfigInput and assigns it to the Aws field.
func (o *AccountConfigInput) SetAws(v AwsAccountConfigInput) {
	o.Aws.Set(&v)
}
// SetAwsNil sets the value for Aws to be an explicit nil
func (o *AccountConfigInput) SetAwsNil() {
	o.Aws.Set(nil)
}

// UnsetAws ensures that no value is present for Aws, not even an explicit nil
func (o *AccountConfigInput) UnsetAws() {
	o.Aws.Unset()
}

func (o AccountConfigInput) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AccountConfigInput) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["cloudProvider"] = o.CloudProvider
	if o.Aws.IsSet() {
		toSerialize["aws"] = o.Aws.Get()
	}
	return toSerialize, nil
}

func (o *AccountConfigInput) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"cloudProvider",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAccountConfigInput := _AccountConfigInput{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	// Allow unknown fields to handle API schema differences
	// decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAccountConfigInput)

	if err != nil {
		return err
	}

	*o = AccountConfigInput(varAccountConfigInput)

	return err
}

type NullableAccountConfigInput struct {
	value *AccountConfigInput
	isSet bool
}

func (v NullableAccountConfigInput) Get() *AccountConfigInput {
	return v.value
}

func (v *NullableAccountConfigInput) Set(val *AccountConfigInput) {
	v.value = val
	v.isSet = true
}

func (v NullableAccountConfigInput) IsSet() bool {
	return v.isSet
}

func (v *NullableAccountConfigInput) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAccountConfigInput(val *AccountConfigInput) *NullableAccountConfigInput {
	return &NullableAccountConfigInput{value: val, isSet: true}
}

func (v NullableAccountConfigInput) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAccountConfigInput) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


