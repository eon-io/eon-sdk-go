/*
Eon API

The Eon.io REST API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eon

import (
	"encoding/json"
)

// checks if the ResourceSnapshot type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ResourceSnapshot{}

// ResourceSnapshot Details about the backed-up resource at the time the snapshot was taken.
type ResourceSnapshot struct {
	Properties NullableResourceSnapshotProperties `json:"properties,omitempty"`
	// Resource tags as key-value pairs. Both keys and values are strings. If a tag is a key with no value, the value is presented as an empty string.  **Example:** `{\"Name\": \"customers\"}` 
	Tags *map[string]string `json:"tags,omitempty"`
	ResourceType *ResourceType `json:"resourceType,omitempty"`
}

// NewResourceSnapshot instantiates a new ResourceSnapshot object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResourceSnapshot() *ResourceSnapshot {
	this := ResourceSnapshot{}
	return &this
}

// NewResourceSnapshotWithDefaults instantiates a new ResourceSnapshot object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResourceSnapshotWithDefaults() *ResourceSnapshot {
	this := ResourceSnapshot{}
	return &this
}

// GetProperties returns the Properties field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ResourceSnapshot) GetProperties() ResourceSnapshotProperties {
	if o == nil || IsNil(o.Properties.Get()) {
		var ret ResourceSnapshotProperties
		return ret
	}
	return *o.Properties.Get()
}

// GetPropertiesOk returns a tuple with the Properties field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ResourceSnapshot) GetPropertiesOk() (*ResourceSnapshotProperties, bool) {
	if o == nil {
		return nil, false
	}
	return o.Properties.Get(), o.Properties.IsSet()
}

// HasProperties returns a boolean if a field has been set.
func (o *ResourceSnapshot) HasProperties() bool {
	if o != nil && o.Properties.IsSet() {
		return true
	}

	return false
}

// SetProperties gets a reference to the given NullableResourceSnapshotProperties and assigns it to the Properties field.
func (o *ResourceSnapshot) SetProperties(v ResourceSnapshotProperties) {
	o.Properties.Set(&v)
}
// SetPropertiesNil sets the value for Properties to be an explicit nil
func (o *ResourceSnapshot) SetPropertiesNil() {
	o.Properties.Set(nil)
}

// UnsetProperties ensures that no value is present for Properties, not even an explicit nil
func (o *ResourceSnapshot) UnsetProperties() {
	o.Properties.Unset()
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *ResourceSnapshot) GetTags() map[string]string {
	if o == nil || IsNil(o.Tags) {
		var ret map[string]string
		return ret
	}
	return *o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResourceSnapshot) GetTagsOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Tags) {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *ResourceSnapshot) HasTags() bool {
	if o != nil && !IsNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given map[string]string and assigns it to the Tags field.
func (o *ResourceSnapshot) SetTags(v map[string]string) {
	o.Tags = &v
}

// GetResourceType returns the ResourceType field value if set, zero value otherwise.
func (o *ResourceSnapshot) GetResourceType() ResourceType {
	if o == nil || IsNil(o.ResourceType) {
		var ret ResourceType
		return ret
	}
	return *o.ResourceType
}

// GetResourceTypeOk returns a tuple with the ResourceType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResourceSnapshot) GetResourceTypeOk() (*ResourceType, bool) {
	if o == nil || IsNil(o.ResourceType) {
		return nil, false
	}
	return o.ResourceType, true
}

// HasResourceType returns a boolean if a field has been set.
func (o *ResourceSnapshot) HasResourceType() bool {
	if o != nil && !IsNil(o.ResourceType) {
		return true
	}

	return false
}

// SetResourceType gets a reference to the given ResourceType and assigns it to the ResourceType field.
func (o *ResourceSnapshot) SetResourceType(v ResourceType) {
	o.ResourceType = &v
}

func (o ResourceSnapshot) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ResourceSnapshot) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Properties.IsSet() {
		toSerialize["properties"] = o.Properties.Get()
	}
	if !IsNil(o.Tags) {
		toSerialize["tags"] = o.Tags
	}
	if !IsNil(o.ResourceType) {
		toSerialize["resourceType"] = o.ResourceType
	}
	return toSerialize, nil
}

type NullableResourceSnapshot struct {
	value *ResourceSnapshot
	isSet bool
}

func (v NullableResourceSnapshot) Get() *ResourceSnapshot {
	return v.value
}

func (v *NullableResourceSnapshot) Set(val *ResourceSnapshot) {
	v.value = val
	v.isSet = true
}

func (v NullableResourceSnapshot) IsSet() bool {
	return v.isSet
}

func (v *NullableResourceSnapshot) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResourceSnapshot(val *ResourceSnapshot) *NullableResourceSnapshot {
	return &NullableResourceSnapshot{value: val, isSet: true}
}

func (v NullableResourceSnapshot) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResourceSnapshot) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


