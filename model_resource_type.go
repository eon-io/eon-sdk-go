/*
Eon API

The Eon.io REST API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eon

import (
	"encoding/json"
	"fmt"
)

// ResourceType Resource cloud provider and type.
type ResourceType string

// List of ResourceType
const (
	AWS_EC2 ResourceType = "AWS_EC2"
	AWS_RDS ResourceType = "AWS_RDS"
	AWS_S3 ResourceType = "AWS_S3"
	AWS_EFS ResourceType = "AWS_EFS"
	AWS_EKS_NAMESPACE ResourceType = "AWS_EKS_NAMESPACE"
	AWS_DYNAMO_DB ResourceType = "AWS_DYNAMO_DB"
	AZURE_VIRTUAL_MACHINE ResourceType = "AZURE_VIRTUAL_MACHINE"
	AZURE_FILE_SHARE ResourceType = "AZURE_FILE_SHARE"
	AZURE_STORAGE_ACCOUNT ResourceType = "AZURE_STORAGE_ACCOUNT"
	AZURE_DISK ResourceType = "AZURE_DISK"
	AZURE_SQL_DATABASE ResourceType = "AZURE_SQL_DATABASE"
	AZURE_SQL_MANAGED_INSTANCE ResourceType = "AZURE_SQL_MANAGED_INSTANCE"
	AZURE_SQL_VIRTUAL_MACHINE ResourceType = "AZURE_SQL_VIRTUAL_MACHINE"
	AZURE_MYSQL ResourceType = "AZURE_MYSQL"
	AZURE_POSTGRESQL ResourceType = "AZURE_POSTGRESQL"
	AZURE_COSMOSDB_MONGODB ResourceType = "AZURE_COSMOSDB_MONGODB"
	AZURE_COSMOSDB_NOSQL ResourceType = "AZURE_COSMOSDB_NOSQL"
	AZURE_AKS_NAMESPACE ResourceType = "AZURE_AKS_NAMESPACE"
	ATLAS_MONGODB_CLUSTER ResourceType = "ATLAS_MONGODB_CLUSTER"
	GCP_COMPUTE_ENGINE_INSTANCE ResourceType = "GCP_COMPUTE_ENGINE_INSTANCE"
	GCP_CLOUD_SQL_INSTANCE ResourceType = "GCP_CLOUD_SQL_INSTANCE"
	GCP_CLOUD_STORAGE_BUCKET ResourceType = "GCP_CLOUD_STORAGE_BUCKET"
	GCP_GKE_NAMESPACE ResourceType = "GCP_GKE_NAMESPACE"
	GCP_BIG_QUERY ResourceType = "GCP_BIG_QUERY"
	GCP_CLOUD_FIRESTORE ResourceType = "GCP_CLOUD_FIRESTORE"
	RESOURCE_TYPE_UNSPECIFIED ResourceType = "RESOURCE_TYPE_UNSPECIFIED"
)

// All allowed values of ResourceType enum
var AllowedResourceTypeEnumValues = []ResourceType{
	"AWS_EC2",
	"AWS_RDS",
	"AWS_S3",
	"AWS_EFS",
	"AWS_EKS_NAMESPACE",
	"AWS_DYNAMO_DB",
	"AZURE_VIRTUAL_MACHINE",
	"AZURE_FILE_SHARE",
	"AZURE_STORAGE_ACCOUNT",
	"AZURE_DISK",
	"AZURE_SQL_DATABASE",
	"AZURE_SQL_MANAGED_INSTANCE",
	"AZURE_SQL_VIRTUAL_MACHINE",
	"AZURE_MYSQL",
	"AZURE_POSTGRESQL",
	"AZURE_COSMOSDB_MONGODB",
	"AZURE_COSMOSDB_NOSQL",
	"AZURE_AKS_NAMESPACE",
	"ATLAS_MONGODB_CLUSTER",
	"GCP_COMPUTE_ENGINE_INSTANCE",
	"GCP_CLOUD_SQL_INSTANCE",
	"GCP_CLOUD_STORAGE_BUCKET",
	"GCP_GKE_NAMESPACE",
	"GCP_BIG_QUERY",
	"GCP_CLOUD_FIRESTORE",
	"RESOURCE_TYPE_UNSPECIFIED",
}

func (v *ResourceType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ResourceType(value)
	for _, existing := range AllowedResourceTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ResourceType", value)
}

// NewResourceTypeFromValue returns a pointer to a valid ResourceType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewResourceTypeFromValue(v string) (*ResourceType, error) {
	ev := ResourceType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ResourceType: valid values are %v", v, AllowedResourceTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ResourceType) IsValid() bool {
	for _, existing := range AllowedResourceTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ResourceType value
func (v ResourceType) Ptr() *ResourceType {
	return &v
}

type NullableResourceType struct {
	value *ResourceType
	isSet bool
}

func (v NullableResourceType) Get() *ResourceType {
	return v.value
}

func (v *NullableResourceType) Set(val *ResourceType) {
	v.value = val
	v.isSet = true
}

func (v NullableResourceType) IsSet() bool {
	return v.isSet
}

func (v *NullableResourceType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResourceType(val *ResourceType) *NullableResourceType {
	return &NullableResourceType{value: val, isSet: true}
}

func (v NullableResourceType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResourceType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

