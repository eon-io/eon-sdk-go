/*
Eon API

The Eon.io REST API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eon

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the VolumeSettings type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VolumeSettings{}

// VolumeSettings Provisioned volume settings.
type VolumeSettings struct {
	// Volume type.
	Type string `json:"type"`
	// Volume size in bytes.
	SizeBytes int64 `json:"sizeBytes"`
	// Volume IOPS.
	Iops *int32 `json:"iops,omitempty"`
	// Volume throughput.
	Throughput *int32 `json:"throughput,omitempty"`
}

type _VolumeSettings VolumeSettings

// NewVolumeSettings instantiates a new VolumeSettings object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVolumeSettings(type_ string, sizeBytes int64) *VolumeSettings {
	this := VolumeSettings{}
	this.Type = type_
	this.SizeBytes = sizeBytes
	return &this
}

// NewVolumeSettingsWithDefaults instantiates a new VolumeSettings object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVolumeSettingsWithDefaults() *VolumeSettings {
	this := VolumeSettings{}
	return &this
}

// GetType returns the Type field value
func (o *VolumeSettings) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *VolumeSettings) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *VolumeSettings) SetType(v string) {
	o.Type = v
}

// GetSizeBytes returns the SizeBytes field value
func (o *VolumeSettings) GetSizeBytes() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.SizeBytes
}

// GetSizeBytesOk returns a tuple with the SizeBytes field value
// and a boolean to check if the value has been set.
func (o *VolumeSettings) GetSizeBytesOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SizeBytes, true
}

// SetSizeBytes sets field value
func (o *VolumeSettings) SetSizeBytes(v int64) {
	o.SizeBytes = v
}

// GetIops returns the Iops field value if set, zero value otherwise.
func (o *VolumeSettings) GetIops() int32 {
	if o == nil || IsNil(o.Iops) {
		var ret int32
		return ret
	}
	return *o.Iops
}

// GetIopsOk returns a tuple with the Iops field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VolumeSettings) GetIopsOk() (*int32, bool) {
	if o == nil || IsNil(o.Iops) {
		return nil, false
	}
	return o.Iops, true
}

// HasIops returns a boolean if a field has been set.
func (o *VolumeSettings) HasIops() bool {
	if o != nil && !IsNil(o.Iops) {
		return true
	}

	return false
}

// SetIops gets a reference to the given int32 and assigns it to the Iops field.
func (o *VolumeSettings) SetIops(v int32) {
	o.Iops = &v
}

// GetThroughput returns the Throughput field value if set, zero value otherwise.
func (o *VolumeSettings) GetThroughput() int32 {
	if o == nil || IsNil(o.Throughput) {
		var ret int32
		return ret
	}
	return *o.Throughput
}

// GetThroughputOk returns a tuple with the Throughput field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VolumeSettings) GetThroughputOk() (*int32, bool) {
	if o == nil || IsNil(o.Throughput) {
		return nil, false
	}
	return o.Throughput, true
}

// HasThroughput returns a boolean if a field has been set.
func (o *VolumeSettings) HasThroughput() bool {
	if o != nil && !IsNil(o.Throughput) {
		return true
	}

	return false
}

// SetThroughput gets a reference to the given int32 and assigns it to the Throughput field.
func (o *VolumeSettings) SetThroughput(v int32) {
	o.Throughput = &v
}

func (o VolumeSettings) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VolumeSettings) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	toSerialize["sizeBytes"] = o.SizeBytes
	if !IsNil(o.Iops) {
		toSerialize["iops"] = o.Iops
	}
	if !IsNil(o.Throughput) {
		toSerialize["throughput"] = o.Throughput
	}
	return toSerialize, nil
}

func (o *VolumeSettings) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
		"sizeBytes",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varVolumeSettings := _VolumeSettings{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	//decoder.DisallowUnknownFields()
	err = decoder.Decode(&varVolumeSettings)

	if err != nil {
		return err
	}

	*o = VolumeSettings(varVolumeSettings)

	return err
}

type NullableVolumeSettings struct {
	value *VolumeSettings
	isSet bool
}

func (v NullableVolumeSettings) Get() *VolumeSettings {
	return v.value
}

func (v *NullableVolumeSettings) Set(val *VolumeSettings) {
	v.value = val
	v.isSet = true
}

func (v NullableVolumeSettings) IsSet() bool {
	return v.isSet
}

func (v *NullableVolumeSettings) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVolumeSettings(val *VolumeSettings) *NullableVolumeSettings {
	return &NullableVolumeSettings{value: val, isSet: true}
}

func (v NullableVolumeSettings) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVolumeSettings) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


