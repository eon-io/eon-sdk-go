/*
Eon API

The Eon.io REST API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eon

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the AwsVpcConnectivityConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AwsVpcConnectivityConfig{}

// AwsVpcConnectivityConfig struct for AwsVpcConnectivityConfig
type AwsVpcConnectivityConfig struct {
	// VPC region.
	Region string `json:"region"`
	// VPC ID.
	Vpc string `json:"vpc"`
	// Subnets to configure for availability zones in the VPC. For availability zones not specified in this list, Eon attempts to use the default subnet.
	SubnetsPerAvailabilityZone []SubnetPerAvailabilityZone  `json:"subnetsPerAvailabilityZone,omitempty"`
	SecurityGroups             *ResourceTypeToSecurityGroup `json:"securityGroups,omitempty"`
}

type _AwsVpcConnectivityConfig AwsVpcConnectivityConfig

// NewAwsVpcConnectivityConfig instantiates a new AwsVpcConnectivityConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAwsVpcConnectivityConfig(region string, vpc string) *AwsVpcConnectivityConfig {
	this := AwsVpcConnectivityConfig{}
	this.Region = region
	this.Vpc = vpc
	return &this
}

// NewAwsVpcConnectivityConfigWithDefaults instantiates a new AwsVpcConnectivityConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAwsVpcConnectivityConfigWithDefaults() *AwsVpcConnectivityConfig {
	this := AwsVpcConnectivityConfig{}
	return &this
}

// GetRegion returns the Region field value
func (o *AwsVpcConnectivityConfig) GetRegion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Region
}

// GetRegionOk returns a tuple with the Region field value
// and a boolean to check if the value has been set.
func (o *AwsVpcConnectivityConfig) GetRegionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Region, true
}

// SetRegion sets field value
func (o *AwsVpcConnectivityConfig) SetRegion(v string) {
	o.Region = v
}

// GetVpc returns the Vpc field value
func (o *AwsVpcConnectivityConfig) GetVpc() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Vpc
}

// GetVpcOk returns a tuple with the Vpc field value
// and a boolean to check if the value has been set.
func (o *AwsVpcConnectivityConfig) GetVpcOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Vpc, true
}

// SetVpc sets field value
func (o *AwsVpcConnectivityConfig) SetVpc(v string) {
	o.Vpc = v
}

// GetSubnetsPerAvailabilityZone returns the SubnetsPerAvailabilityZone field value if set, zero value otherwise.
func (o *AwsVpcConnectivityConfig) GetSubnetsPerAvailabilityZone() []SubnetPerAvailabilityZone {
	if o == nil || IsNil(o.SubnetsPerAvailabilityZone) {
		var ret []SubnetPerAvailabilityZone
		return ret
	}
	return o.SubnetsPerAvailabilityZone
}

// GetSubnetsPerAvailabilityZoneOk returns a tuple with the SubnetsPerAvailabilityZone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AwsVpcConnectivityConfig) GetSubnetsPerAvailabilityZoneOk() ([]SubnetPerAvailabilityZone, bool) {
	if o == nil || IsNil(o.SubnetsPerAvailabilityZone) {
		return nil, false
	}
	return o.SubnetsPerAvailabilityZone, true
}

// HasSubnetsPerAvailabilityZone returns a boolean if a field has been set.
func (o *AwsVpcConnectivityConfig) HasSubnetsPerAvailabilityZone() bool {
	if o != nil && !IsNil(o.SubnetsPerAvailabilityZone) {
		return true
	}

	return false
}

// SetSubnetsPerAvailabilityZone gets a reference to the given []SubnetPerAvailabilityZone and assigns it to the SubnetsPerAvailabilityZone field.
func (o *AwsVpcConnectivityConfig) SetSubnetsPerAvailabilityZone(v []SubnetPerAvailabilityZone) {
	o.SubnetsPerAvailabilityZone = v
}

// GetSecurityGroups returns the SecurityGroups field value if set, zero value otherwise.
func (o *AwsVpcConnectivityConfig) GetSecurityGroups() ResourceTypeToSecurityGroup {
	if o == nil || IsNil(o.SecurityGroups) {
		var ret ResourceTypeToSecurityGroup
		return ret
	}
	return *o.SecurityGroups
}

// GetSecurityGroupsOk returns a tuple with the SecurityGroups field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AwsVpcConnectivityConfig) GetSecurityGroupsOk() (*ResourceTypeToSecurityGroup, bool) {
	if o == nil || IsNil(o.SecurityGroups) {
		return nil, false
	}
	return o.SecurityGroups, true
}

// HasSecurityGroups returns a boolean if a field has been set.
func (o *AwsVpcConnectivityConfig) HasSecurityGroups() bool {
	if o != nil && !IsNil(o.SecurityGroups) {
		return true
	}

	return false
}

// SetSecurityGroups gets a reference to the given ResourceTypeToSecurityGroup and assigns it to the SecurityGroups field.
func (o *AwsVpcConnectivityConfig) SetSecurityGroups(v ResourceTypeToSecurityGroup) {
	o.SecurityGroups = &v
}

func (o AwsVpcConnectivityConfig) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AwsVpcConnectivityConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["region"] = o.Region
	toSerialize["vpc"] = o.Vpc
	if !IsNil(o.SubnetsPerAvailabilityZone) {
		toSerialize["subnetsPerAvailabilityZone"] = o.SubnetsPerAvailabilityZone
	}
	if !IsNil(o.SecurityGroups) {
		toSerialize["securityGroups"] = o.SecurityGroups
	}
	return toSerialize, nil
}

func (o *AwsVpcConnectivityConfig) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"region",
		"vpc",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAwsVpcConnectivityConfig := _AwsVpcConnectivityConfig{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	//decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAwsVpcConnectivityConfig)

	if err != nil {
		return err
	}

	*o = AwsVpcConnectivityConfig(varAwsVpcConnectivityConfig)

	return err
}

type NullableAwsVpcConnectivityConfig struct {
	value *AwsVpcConnectivityConfig
	isSet bool
}

func (v NullableAwsVpcConnectivityConfig) Get() *AwsVpcConnectivityConfig {
	return v.value
}

func (v *NullableAwsVpcConnectivityConfig) Set(val *AwsVpcConnectivityConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableAwsVpcConnectivityConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableAwsVpcConnectivityConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAwsVpcConnectivityConfig(val *AwsVpcConnectivityConfig) *NullableAwsVpcConnectivityConfig {
	return &NullableAwsVpcConnectivityConfig{value: val, isSet: true}
}

func (v NullableAwsVpcConnectivityConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAwsVpcConnectivityConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
