/*
Eon API

The Eon.io REST API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eon

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the WeeklyConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &WeeklyConfig{}

// WeeklyConfig struct for WeeklyConfig
type WeeklyConfig struct {
	// Days of the week to schedule backups. 
	DaysOfWeek []DayOfWeek `json:"daysOfWeek"`
	TimeOfDay TimeOfDay `json:"timeOfDay"`
	// The window of time after the start time you want the backup to start, in minutes. Defaults to `240` (4 hours). 
	StartWindowMinutes *int32 `json:"startWindowMinutes,omitempty"`
}

type _WeeklyConfig WeeklyConfig

// NewWeeklyConfig instantiates a new WeeklyConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWeeklyConfig(daysOfWeek []DayOfWeek, timeOfDay TimeOfDay) *WeeklyConfig {
	this := WeeklyConfig{}
	this.DaysOfWeek = daysOfWeek
	this.TimeOfDay = timeOfDay
	var startWindowMinutes int32 = 240
	this.StartWindowMinutes = &startWindowMinutes
	return &this
}

// NewWeeklyConfigWithDefaults instantiates a new WeeklyConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWeeklyConfigWithDefaults() *WeeklyConfig {
	this := WeeklyConfig{}
	var startWindowMinutes int32 = 240
	this.StartWindowMinutes = &startWindowMinutes
	return &this
}

// GetDaysOfWeek returns the DaysOfWeek field value
func (o *WeeklyConfig) GetDaysOfWeek() []DayOfWeek {
	if o == nil {
		var ret []DayOfWeek
		return ret
	}

	return o.DaysOfWeek
}

// GetDaysOfWeekOk returns a tuple with the DaysOfWeek field value
// and a boolean to check if the value has been set.
func (o *WeeklyConfig) GetDaysOfWeekOk() ([]DayOfWeek, bool) {
	if o == nil {
		return nil, false
	}
	return o.DaysOfWeek, true
}

// SetDaysOfWeek sets field value
func (o *WeeklyConfig) SetDaysOfWeek(v []DayOfWeek) {
	o.DaysOfWeek = v
}

// GetTimeOfDay returns the TimeOfDay field value
func (o *WeeklyConfig) GetTimeOfDay() TimeOfDay {
	if o == nil {
		var ret TimeOfDay
		return ret
	}

	return o.TimeOfDay
}

// GetTimeOfDayOk returns a tuple with the TimeOfDay field value
// and a boolean to check if the value has been set.
func (o *WeeklyConfig) GetTimeOfDayOk() (*TimeOfDay, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TimeOfDay, true
}

// SetTimeOfDay sets field value
func (o *WeeklyConfig) SetTimeOfDay(v TimeOfDay) {
	o.TimeOfDay = v
}

// GetStartWindowMinutes returns the StartWindowMinutes field value if set, zero value otherwise.
func (o *WeeklyConfig) GetStartWindowMinutes() int32 {
	if o == nil || IsNil(o.StartWindowMinutes) {
		var ret int32
		return ret
	}
	return *o.StartWindowMinutes
}

// GetStartWindowMinutesOk returns a tuple with the StartWindowMinutes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WeeklyConfig) GetStartWindowMinutesOk() (*int32, bool) {
	if o == nil || IsNil(o.StartWindowMinutes) {
		return nil, false
	}
	return o.StartWindowMinutes, true
}

// HasStartWindowMinutes returns a boolean if a field has been set.
func (o *WeeklyConfig) HasStartWindowMinutes() bool {
	if o != nil && !IsNil(o.StartWindowMinutes) {
		return true
	}

	return false
}

// SetStartWindowMinutes gets a reference to the given int32 and assigns it to the StartWindowMinutes field.
func (o *WeeklyConfig) SetStartWindowMinutes(v int32) {
	o.StartWindowMinutes = &v
}

func (o WeeklyConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o WeeklyConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["daysOfWeek"] = o.DaysOfWeek
	toSerialize["timeOfDay"] = o.TimeOfDay
	if !IsNil(o.StartWindowMinutes) {
		toSerialize["startWindowMinutes"] = o.StartWindowMinutes
	}
	return toSerialize, nil
}

func (o *WeeklyConfig) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"daysOfWeek",
		"timeOfDay",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varWeeklyConfig := _WeeklyConfig{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	//decoder.DisallowUnknownFields()
	err = decoder.Decode(&varWeeklyConfig)

	if err != nil {
		return err
	}

	*o = WeeklyConfig(varWeeklyConfig)

	return err
}

type NullableWeeklyConfig struct {
	value *WeeklyConfig
	isSet bool
}

func (v NullableWeeklyConfig) Get() *WeeklyConfig {
	return v.value
}

func (v *NullableWeeklyConfig) Set(val *WeeklyConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableWeeklyConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableWeeklyConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWeeklyConfig(val *WeeklyConfig) *NullableWeeklyConfig {
	return &NullableWeeklyConfig{value: val, isSet: true}
}

func (v NullableWeeklyConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWeeklyConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


