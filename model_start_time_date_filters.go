/*
Eon API

The Eon.io REST API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eon

import (
	"encoding/json"
)

// checks if the StartTimeDateFilters type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StartTimeDateFilters{}

// StartTimeDateFilters struct for StartTimeDateFilters
type StartTimeDateFilters struct {
	// Matches if `startTime` is on or later than this date. Must be in ISO 8601 YYYY-MM-DD format. 
	StartDate *string `json:"startDate,omitempty"`
	// Matches if `startTime` is on or earlier than this date. Must be in ISO 8601 YYYY-MM-DD format. 
	EndDate *string `json:"endDate,omitempty"`
}

// NewStartTimeDateFilters instantiates a new StartTimeDateFilters object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStartTimeDateFilters() *StartTimeDateFilters {
	this := StartTimeDateFilters{}
	return &this
}

// NewStartTimeDateFiltersWithDefaults instantiates a new StartTimeDateFilters object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStartTimeDateFiltersWithDefaults() *StartTimeDateFilters {
	this := StartTimeDateFilters{}
	return &this
}

// GetStartDate returns the StartDate field value if set, zero value otherwise.
func (o *StartTimeDateFilters) GetStartDate() string {
	if o == nil || IsNil(o.StartDate) {
		var ret string
		return ret
	}
	return *o.StartDate
}

// GetStartDateOk returns a tuple with the StartDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StartTimeDateFilters) GetStartDateOk() (*string, bool) {
	if o == nil || IsNil(o.StartDate) {
		return nil, false
	}
	return o.StartDate, true
}

// HasStartDate returns a boolean if a field has been set.
func (o *StartTimeDateFilters) HasStartDate() bool {
	if o != nil && !IsNil(o.StartDate) {
		return true
	}

	return false
}

// SetStartDate gets a reference to the given string and assigns it to the StartDate field.
func (o *StartTimeDateFilters) SetStartDate(v string) {
	o.StartDate = &v
}

// GetEndDate returns the EndDate field value if set, zero value otherwise.
func (o *StartTimeDateFilters) GetEndDate() string {
	if o == nil || IsNil(o.EndDate) {
		var ret string
		return ret
	}
	return *o.EndDate
}

// GetEndDateOk returns a tuple with the EndDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StartTimeDateFilters) GetEndDateOk() (*string, bool) {
	if o == nil || IsNil(o.EndDate) {
		return nil, false
	}
	return o.EndDate, true
}

// HasEndDate returns a boolean if a field has been set.
func (o *StartTimeDateFilters) HasEndDate() bool {
	if o != nil && !IsNil(o.EndDate) {
		return true
	}

	return false
}

// SetEndDate gets a reference to the given string and assigns it to the EndDate field.
func (o *StartTimeDateFilters) SetEndDate(v string) {
	o.EndDate = &v
}

func (o StartTimeDateFilters) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StartTimeDateFilters) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.StartDate) {
		toSerialize["startDate"] = o.StartDate
	}
	if !IsNil(o.EndDate) {
		toSerialize["endDate"] = o.EndDate
	}
	return toSerialize, nil
}

type NullableStartTimeDateFilters struct {
	value *StartTimeDateFilters
	isSet bool
}

func (v NullableStartTimeDateFilters) Get() *StartTimeDateFilters {
	return v.value
}

func (v *NullableStartTimeDateFilters) Set(val *StartTimeDateFilters) {
	v.value = val
	v.isSet = true
}

func (v NullableStartTimeDateFilters) IsSet() bool {
	return v.isSet
}

func (v *NullableStartTimeDateFilters) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStartTimeDateFilters(val *StartTimeDateFilters) *NullableStartTimeDateFilters {
	return &NullableStartTimeDateFilters{value: val, isSet: true}
}

func (v NullableStartTimeDateFilters) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStartTimeDateFilters) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


