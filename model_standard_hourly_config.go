/*
Eon API

The Eon.io REST API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eon

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the StandardHourlyConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StandardHourlyConfig{}

// StandardHourlyConfig struct for StandardHourlyConfig
type StandardHourlyConfig struct {
	// Backup frequency, in hours.
	IntervalHours int32 `json:"intervalHours"`
}

type _StandardHourlyConfig StandardHourlyConfig

// NewStandardHourlyConfig instantiates a new StandardHourlyConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStandardHourlyConfig(intervalHours int32) *StandardHourlyConfig {
	this := StandardHourlyConfig{}
	this.IntervalHours = intervalHours
	return &this
}

// NewStandardHourlyConfigWithDefaults instantiates a new StandardHourlyConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStandardHourlyConfigWithDefaults() *StandardHourlyConfig {
	this := StandardHourlyConfig{}
	return &this
}

// GetIntervalHours returns the IntervalHours field value
func (o *StandardHourlyConfig) GetIntervalHours() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.IntervalHours
}

// GetIntervalHoursOk returns a tuple with the IntervalHours field value
// and a boolean to check if the value has been set.
func (o *StandardHourlyConfig) GetIntervalHoursOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IntervalHours, true
}

// SetIntervalHours sets field value
func (o *StandardHourlyConfig) SetIntervalHours(v int32) {
	o.IntervalHours = v
}

func (o StandardHourlyConfig) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StandardHourlyConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["intervalHours"] = o.IntervalHours
	return toSerialize, nil
}

func (o *StandardHourlyConfig) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"intervalHours",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varStandardHourlyConfig := _StandardHourlyConfig{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	//decoder.DisallowUnknownFields()
	err = decoder.Decode(&varStandardHourlyConfig)

	if err != nil {
		return err
	}

	*o = StandardHourlyConfig(varStandardHourlyConfig)

	return err
}

type NullableStandardHourlyConfig struct {
	value *StandardHourlyConfig
	isSet bool
}

func (v NullableStandardHourlyConfig) Get() *StandardHourlyConfig {
	return v.value
}

func (v *NullableStandardHourlyConfig) Set(val *StandardHourlyConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableStandardHourlyConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableStandardHourlyConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStandardHourlyConfig(val *StandardHourlyConfig) *NullableStandardHourlyConfig {
	return &NullableStandardHourlyConfig{value: val, isSet: true}
}

func (v NullableStandardHourlyConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStandardHourlyConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
