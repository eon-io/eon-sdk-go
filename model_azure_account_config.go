/*
Eon API

The Eon.io REST API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eon

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the AzureAccountConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AzureAccountConfig{}

// AzureAccountConfig struct for AzureAccountConfig
type AzureAccountConfig struct {
	// The tenant ID
	TenantId string `json:"tenantId"`
	// The resource group name
	ResourceGroupName *string `json:"resourceGroupName,omitempty"`
}

type _AzureAccountConfig AzureAccountConfig

// NewAzureAccountConfig instantiates a new AzureAccountConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAzureAccountConfig(tenantId string) *AzureAccountConfig {
	this := AzureAccountConfig{}
	this.TenantId = tenantId
	return &this
}

// NewAzureAccountConfigWithDefaults instantiates a new AzureAccountConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAzureAccountConfigWithDefaults() *AzureAccountConfig {
	this := AzureAccountConfig{}
	return &this
}

// GetTenantId returns the TenantId field value
func (o *AzureAccountConfig) GetTenantId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TenantId
}

// GetTenantIdOk returns a tuple with the TenantId field value
// and a boolean to check if the value has been set.
func (o *AzureAccountConfig) GetTenantIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TenantId, true
}

// SetTenantId sets field value
func (o *AzureAccountConfig) SetTenantId(v string) {
	o.TenantId = v
}

// GetResourceGroupName returns the ResourceGroupName field value if set, zero value otherwise.
func (o *AzureAccountConfig) GetResourceGroupName() string {
	if o == nil || IsNil(o.ResourceGroupName) {
		var ret string
		return ret
	}
	return *o.ResourceGroupName
}

// GetResourceGroupNameOk returns a tuple with the ResourceGroupName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AzureAccountConfig) GetResourceGroupNameOk() (*string, bool) {
	if o == nil || IsNil(o.ResourceGroupName) {
		return nil, false
	}
	return o.ResourceGroupName, true
}

// HasResourceGroupName returns a boolean if a field has been set.
func (o *AzureAccountConfig) HasResourceGroupName() bool {
	if o != nil && !IsNil(o.ResourceGroupName) {
		return true
	}

	return false
}

// SetResourceGroupName gets a reference to the given string and assigns it to the ResourceGroupName field.
func (o *AzureAccountConfig) SetResourceGroupName(v string) {
	o.ResourceGroupName = &v
}

func (o AzureAccountConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AzureAccountConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["tenantId"] = o.TenantId
	if !IsNil(o.ResourceGroupName) {
		toSerialize["resourceGroupName"] = o.ResourceGroupName
	}
	return toSerialize, nil
}

func (o *AzureAccountConfig) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"tenantId",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAzureAccountConfig := _AzureAccountConfig{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	//decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAzureAccountConfig)

	if err != nil {
		return err
	}

	*o = AzureAccountConfig(varAzureAccountConfig)

	return err
}

type NullableAzureAccountConfig struct {
	value *AzureAccountConfig
	isSet bool
}

func (v NullableAzureAccountConfig) Get() *AzureAccountConfig {
	return v.value
}

func (v *NullableAzureAccountConfig) Set(val *AzureAccountConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableAzureAccountConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableAzureAccountConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAzureAccountConfig(val *AzureAccountConfig) *NullableAzureAccountConfig {
	return &NullableAzureAccountConfig{value: val, isSet: true}
}

func (v NullableAzureAccountConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAzureAccountConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


