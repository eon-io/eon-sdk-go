/*
Eon API

The Eon.io REST API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eon

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the AzureDiskRestoreResult type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AzureDiskRestoreResult{}

// AzureDiskRestoreResult struct for AzureDiskRestoreResult
type AzureDiskRestoreResult struct {
	// ID of the restored Azure disk.
	DiskId string `json:"diskId"`
}

type _AzureDiskRestoreResult AzureDiskRestoreResult

// NewAzureDiskRestoreResult instantiates a new AzureDiskRestoreResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAzureDiskRestoreResult(diskId string) *AzureDiskRestoreResult {
	this := AzureDiskRestoreResult{}
	this.DiskId = diskId
	return &this
}

// NewAzureDiskRestoreResultWithDefaults instantiates a new AzureDiskRestoreResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAzureDiskRestoreResultWithDefaults() *AzureDiskRestoreResult {
	this := AzureDiskRestoreResult{}
	return &this
}

// GetDiskId returns the DiskId field value
func (o *AzureDiskRestoreResult) GetDiskId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DiskId
}

// GetDiskIdOk returns a tuple with the DiskId field value
// and a boolean to check if the value has been set.
func (o *AzureDiskRestoreResult) GetDiskIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DiskId, true
}

// SetDiskId sets field value
func (o *AzureDiskRestoreResult) SetDiskId(v string) {
	o.DiskId = v
}

func (o AzureDiskRestoreResult) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AzureDiskRestoreResult) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["diskId"] = o.DiskId
	return toSerialize, nil
}

func (o *AzureDiskRestoreResult) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"diskId",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAzureDiskRestoreResult := _AzureDiskRestoreResult{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	//decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAzureDiskRestoreResult)

	if err != nil {
		return err
	}

	*o = AzureDiskRestoreResult(varAzureDiskRestoreResult)

	return err
}

type NullableAzureDiskRestoreResult struct {
	value *AzureDiskRestoreResult
	isSet bool
}

func (v NullableAzureDiskRestoreResult) Get() *AzureDiskRestoreResult {
	return v.value
}

func (v *NullableAzureDiskRestoreResult) Set(val *AzureDiskRestoreResult) {
	v.value = val
	v.isSet = true
}

func (v NullableAzureDiskRestoreResult) IsSet() bool {
	return v.isSet
}

func (v *NullableAzureDiskRestoreResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAzureDiskRestoreResult(val *AzureDiskRestoreResult) *NullableAzureDiskRestoreResult {
	return &NullableAzureDiskRestoreResult{value: val, isSet: true}
}

func (v NullableAzureDiskRestoreResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAzureDiskRestoreResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


