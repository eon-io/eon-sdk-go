/*
Eon API

The Eon.io REST API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eon

import (
	"encoding/json"
	"fmt"
)

// ListOperators the model 'ListOperators'
type ListOperators string

// List of ListOperators
const (
	CONTAINS_ANY_OF_OPERATOR ListOperators = "CONTAINS_ANY_OF"
	CONTAINS_NONE_OF_OPERATOR ListOperators = "CONTAINS_NONE_OF"
	CONTAINS_ALL_OF_OPERATOR ListOperators = "CONTAINS_ALL_OF"
	LIST_OPERATOR_UNSPECIFIED ListOperators = "UNSPECIFIED"
)

// All allowed values of ListOperators enum
var AllowedListOperatorsEnumValues = []ListOperators{
	"CONTAINS_ANY_OF",
	"CONTAINS_NONE_OF",
	"CONTAINS_ALL_OF",
	"UNSPECIFIED",
}

func (v *ListOperators) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ListOperators(value)
	for _, existing := range AllowedListOperatorsEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ListOperators", value)
}

// NewListOperatorsFromValue returns a pointer to a valid ListOperators
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewListOperatorsFromValue(v string) (*ListOperators, error) {
	ev := ListOperators(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ListOperators: valid values are %v", v, AllowedListOperatorsEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ListOperators) IsValid() bool {
	for _, existing := range AllowedListOperatorsEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ListOperators value
func (v ListOperators) Ptr() *ListOperators {
	return &v
}

type NullableListOperators struct {
	value *ListOperators
	isSet bool
}

func (v NullableListOperators) Get() *ListOperators {
	return v.value
}

func (v *NullableListOperators) Set(val *ListOperators) {
	v.value = val
	v.isSet = true
}

func (v NullableListOperators) IsSet() bool {
	return v.isSet
}

func (v *NullableListOperators) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListOperators(val *ListOperators) *NullableListOperators {
	return &NullableListOperators{value: val, isSet: true}
}

func (v NullableListOperators) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListOperators) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

