/*
Eon API

The Eon.io REST API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eon

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ListInventorySnapshotsResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ListInventorySnapshotsResponse{}

// ListInventorySnapshotsResponse struct for ListInventorySnapshotsResponse
type ListInventorySnapshotsResponse struct {
	// List of Eon snapshots.
	Snapshots []Snapshot `json:"snapshots"`
	// Cursor that points to the first record of the next page of results. Pass this value in the next request. 
	NextToken *string `json:"nextToken,omitempty"`
	// The total number of Eon snapshots.
	TotalCount int32 `json:"totalCount"`
}

type _ListInventorySnapshotsResponse ListInventorySnapshotsResponse

// NewListInventorySnapshotsResponse instantiates a new ListInventorySnapshotsResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewListInventorySnapshotsResponse(snapshots []Snapshot, totalCount int32) *ListInventorySnapshotsResponse {
	this := ListInventorySnapshotsResponse{}
	this.Snapshots = snapshots
	this.TotalCount = totalCount
	return &this
}

// NewListInventorySnapshotsResponseWithDefaults instantiates a new ListInventorySnapshotsResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewListInventorySnapshotsResponseWithDefaults() *ListInventorySnapshotsResponse {
	this := ListInventorySnapshotsResponse{}
	return &this
}

// GetSnapshots returns the Snapshots field value
func (o *ListInventorySnapshotsResponse) GetSnapshots() []Snapshot {
	if o == nil {
		var ret []Snapshot
		return ret
	}

	return o.Snapshots
}

// GetSnapshotsOk returns a tuple with the Snapshots field value
// and a boolean to check if the value has been set.
func (o *ListInventorySnapshotsResponse) GetSnapshotsOk() ([]Snapshot, bool) {
	if o == nil {
		return nil, false
	}
	return o.Snapshots, true
}

// SetSnapshots sets field value
func (o *ListInventorySnapshotsResponse) SetSnapshots(v []Snapshot) {
	o.Snapshots = v
}

// GetNextToken returns the NextToken field value if set, zero value otherwise.
func (o *ListInventorySnapshotsResponse) GetNextToken() string {
	if o == nil || IsNil(o.NextToken) {
		var ret string
		return ret
	}
	return *o.NextToken
}

// GetNextTokenOk returns a tuple with the NextToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListInventorySnapshotsResponse) GetNextTokenOk() (*string, bool) {
	if o == nil || IsNil(o.NextToken) {
		return nil, false
	}
	return o.NextToken, true
}

// HasNextToken returns a boolean if a field has been set.
func (o *ListInventorySnapshotsResponse) HasNextToken() bool {
	if o != nil && !IsNil(o.NextToken) {
		return true
	}

	return false
}

// SetNextToken gets a reference to the given string and assigns it to the NextToken field.
func (o *ListInventorySnapshotsResponse) SetNextToken(v string) {
	o.NextToken = &v
}

// GetTotalCount returns the TotalCount field value
func (o *ListInventorySnapshotsResponse) GetTotalCount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.TotalCount
}

// GetTotalCountOk returns a tuple with the TotalCount field value
// and a boolean to check if the value has been set.
func (o *ListInventorySnapshotsResponse) GetTotalCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TotalCount, true
}

// SetTotalCount sets field value
func (o *ListInventorySnapshotsResponse) SetTotalCount(v int32) {
	o.TotalCount = v
}

func (o ListInventorySnapshotsResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ListInventorySnapshotsResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["snapshots"] = o.Snapshots
	if !IsNil(o.NextToken) {
		toSerialize["nextToken"] = o.NextToken
	}
	toSerialize["totalCount"] = o.TotalCount
	return toSerialize, nil
}

func (o *ListInventorySnapshotsResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"snapshots",
		"totalCount",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varListInventorySnapshotsResponse := _ListInventorySnapshotsResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	//decoder.DisallowUnknownFields()
	err = decoder.Decode(&varListInventorySnapshotsResponse)

	if err != nil {
		return err
	}

	*o = ListInventorySnapshotsResponse(varListInventorySnapshotsResponse)

	return err
}

type NullableListInventorySnapshotsResponse struct {
	value *ListInventorySnapshotsResponse
	isSet bool
}

func (v NullableListInventorySnapshotsResponse) Get() *ListInventorySnapshotsResponse {
	return v.value
}

func (v *NullableListInventorySnapshotsResponse) Set(val *ListInventorySnapshotsResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableListInventorySnapshotsResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableListInventorySnapshotsResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListInventorySnapshotsResponse(val *ListInventorySnapshotsResponse) *NullableListInventorySnapshotsResponse {
	return &NullableListInventorySnapshotsResponse{value: val, isSet: true}
}

func (v NullableListInventorySnapshotsResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListInventorySnapshotsResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


