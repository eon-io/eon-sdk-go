/*
Eon API

The Eon.io REST API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eon

import (
	"encoding/json"
)

// checks if the ResourceSnapshotProperties type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ResourceSnapshotProperties{}

// ResourceSnapshotProperties Properties of the original resource at the time the snapshot was taken. The properties present in this object change depending on the value set in `resourceType`. 
type ResourceSnapshotProperties struct {
	AwsEc2 NullableAwsEc2SnapshotProperties `json:"awsEc2,omitempty"`
}

// NewResourceSnapshotProperties instantiates a new ResourceSnapshotProperties object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResourceSnapshotProperties() *ResourceSnapshotProperties {
	this := ResourceSnapshotProperties{}
	return &this
}

// NewResourceSnapshotPropertiesWithDefaults instantiates a new ResourceSnapshotProperties object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResourceSnapshotPropertiesWithDefaults() *ResourceSnapshotProperties {
	this := ResourceSnapshotProperties{}
	return &this
}

// GetAwsEc2 returns the AwsEc2 field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ResourceSnapshotProperties) GetAwsEc2() AwsEc2SnapshotProperties {
	if o == nil || IsNil(o.AwsEc2.Get()) {
		var ret AwsEc2SnapshotProperties
		return ret
	}
	return *o.AwsEc2.Get()
}

// GetAwsEc2Ok returns a tuple with the AwsEc2 field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ResourceSnapshotProperties) GetAwsEc2Ok() (*AwsEc2SnapshotProperties, bool) {
	if o == nil {
		return nil, false
	}
	return o.AwsEc2.Get(), o.AwsEc2.IsSet()
}

// HasAwsEc2 returns a boolean if a field has been set.
func (o *ResourceSnapshotProperties) HasAwsEc2() bool {
	if o != nil && o.AwsEc2.IsSet() {
		return true
	}

	return false
}

// SetAwsEc2 gets a reference to the given NullableAwsEc2SnapshotProperties and assigns it to the AwsEc2 field.
func (o *ResourceSnapshotProperties) SetAwsEc2(v AwsEc2SnapshotProperties) {
	o.AwsEc2.Set(&v)
}
// SetAwsEc2Nil sets the value for AwsEc2 to be an explicit nil
func (o *ResourceSnapshotProperties) SetAwsEc2Nil() {
	o.AwsEc2.Set(nil)
}

// UnsetAwsEc2 ensures that no value is present for AwsEc2, not even an explicit nil
func (o *ResourceSnapshotProperties) UnsetAwsEc2() {
	o.AwsEc2.Unset()
}

func (o ResourceSnapshotProperties) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ResourceSnapshotProperties) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.AwsEc2.IsSet() {
		toSerialize["awsEc2"] = o.AwsEc2.Get()
	}
	return toSerialize, nil
}

type NullableResourceSnapshotProperties struct {
	value *ResourceSnapshotProperties
	isSet bool
}

func (v NullableResourceSnapshotProperties) Get() *ResourceSnapshotProperties {
	return v.value
}

func (v *NullableResourceSnapshotProperties) Set(val *ResourceSnapshotProperties) {
	v.value = val
	v.isSet = true
}

func (v NullableResourceSnapshotProperties) IsSet() bool {
	return v.isSet
}

func (v *NullableResourceSnapshotProperties) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResourceSnapshotProperties(val *ResourceSnapshotProperties) *NullableResourceSnapshotProperties {
	return &NullableResourceSnapshotProperties{value: val, isSet: true}
}

func (v NullableResourceSnapshotProperties) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResourceSnapshotProperties) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


