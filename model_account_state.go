/*
Eon API

The Eon.io REST API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eon

import (
	"encoding/json"
	"fmt"
)

// AccountState Connection status of the AWS account, Azure subscription, or GCP project.
type AccountState string

// List of AccountState
const (
	ACCOUNT_STATE_CONNECTED AccountState = "CONNECTED"
	ACCOUNT_STATE_DISCONNECTED AccountState = "DISCONNECTED"
	ACCOUNT_STATE_INSUFFICIENT_PERMISSIONS AccountState = "INSUFFICIENT_PERMISSIONS"
	ACCOUNT_STATE_UNSPECIFIED AccountState = "ACCOUNT_STATUS_UNSPECIFIED"
)

// All allowed values of AccountState enum
var AllowedAccountStateEnumValues = []AccountState{
	"CONNECTED",
	"DISCONNECTED",
	"INSUFFICIENT_PERMISSIONS",
	"ACCOUNT_STATUS_UNSPECIFIED",
}

func (v *AccountState) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AccountState(value)
	for _, existing := range AllowedAccountStateEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AccountState", value)
}

// NewAccountStateFromValue returns a pointer to a valid AccountState
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAccountStateFromValue(v string) (*AccountState, error) {
	ev := AccountState(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AccountState: valid values are %v", v, AllowedAccountStateEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AccountState) IsValid() bool {
	for _, existing := range AllowedAccountStateEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AccountState value
func (v AccountState) Ptr() *AccountState {
	return &v
}

type NullableAccountState struct {
	value *AccountState
	isSet bool
}

func (v NullableAccountState) Get() *AccountState {
	return v.value
}

func (v *NullableAccountState) Set(val *AccountState) {
	v.value = val
	v.isSet = true
}

func (v NullableAccountState) IsSet() bool {
	return v.isSet
}

func (v *NullableAccountState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAccountState(val *AccountState) *NullableAccountState {
	return &NullableAccountState{value: val, isSet: true}
}

func (v NullableAccountState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAccountState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

