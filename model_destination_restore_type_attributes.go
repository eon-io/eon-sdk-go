/*
Eon API

The Eon.io REST API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eon

import (
	"encoding/json"
)

// checks if the DestinationRestoreTypeAttributes type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DestinationRestoreTypeAttributes{}

// DestinationRestoreTypeAttributes struct for DestinationRestoreTypeAttributes
type DestinationRestoreTypeAttributes struct {
	ObjectStorage *ObjectStorageDestination `json:"objectStorage,omitempty"`
	AzureVm NullableVirtualMachineRestoreDestination `json:"azureVm,omitempty"`
	DynamoDbTable *AwsDynamoDBDestination `json:"dynamoDbTable,omitempty"`
	EksNamespace NullableEksNamespaceRestoreDestination `json:"eksNamespace,omitempty"`
	RdsInstance *AwsDatabaseDestination `json:"rdsInstance,omitempty"`
}

// NewDestinationRestoreTypeAttributes instantiates a new DestinationRestoreTypeAttributes object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDestinationRestoreTypeAttributes() *DestinationRestoreTypeAttributes {
	this := DestinationRestoreTypeAttributes{}
	return &this
}

// NewDestinationRestoreTypeAttributesWithDefaults instantiates a new DestinationRestoreTypeAttributes object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDestinationRestoreTypeAttributesWithDefaults() *DestinationRestoreTypeAttributes {
	this := DestinationRestoreTypeAttributes{}
	return &this
}

// GetObjectStorage returns the ObjectStorage field value if set, zero value otherwise.
func (o *DestinationRestoreTypeAttributes) GetObjectStorage() ObjectStorageDestination {
	if o == nil || IsNil(o.ObjectStorage) {
		var ret ObjectStorageDestination
		return ret
	}
	return *o.ObjectStorage
}

// GetObjectStorageOk returns a tuple with the ObjectStorage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DestinationRestoreTypeAttributes) GetObjectStorageOk() (*ObjectStorageDestination, bool) {
	if o == nil || IsNil(o.ObjectStorage) {
		return nil, false
	}
	return o.ObjectStorage, true
}

// HasObjectStorage returns a boolean if a field has been set.
func (o *DestinationRestoreTypeAttributes) HasObjectStorage() bool {
	if o != nil && !IsNil(o.ObjectStorage) {
		return true
	}

	return false
}

// SetObjectStorage gets a reference to the given ObjectStorageDestination and assigns it to the ObjectStorage field.
func (o *DestinationRestoreTypeAttributes) SetObjectStorage(v ObjectStorageDestination) {
	o.ObjectStorage = &v
}

// GetAzureVm returns the AzureVm field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DestinationRestoreTypeAttributes) GetAzureVm() VirtualMachineRestoreDestination {
	if o == nil || IsNil(o.AzureVm.Get()) {
		var ret VirtualMachineRestoreDestination
		return ret
	}
	return *o.AzureVm.Get()
}

// GetAzureVmOk returns a tuple with the AzureVm field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DestinationRestoreTypeAttributes) GetAzureVmOk() (*VirtualMachineRestoreDestination, bool) {
	if o == nil {
		return nil, false
	}
	return o.AzureVm.Get(), o.AzureVm.IsSet()
}

// HasAzureVm returns a boolean if a field has been set.
func (o *DestinationRestoreTypeAttributes) HasAzureVm() bool {
	if o != nil && o.AzureVm.IsSet() {
		return true
	}

	return false
}

// SetAzureVm gets a reference to the given NullableVirtualMachineRestoreDestination and assigns it to the AzureVm field.
func (o *DestinationRestoreTypeAttributes) SetAzureVm(v VirtualMachineRestoreDestination) {
	o.AzureVm.Set(&v)
}
// SetAzureVmNil sets the value for AzureVm to be an explicit nil
func (o *DestinationRestoreTypeAttributes) SetAzureVmNil() {
	o.AzureVm.Set(nil)
}

// UnsetAzureVm ensures that no value is present for AzureVm, not even an explicit nil
func (o *DestinationRestoreTypeAttributes) UnsetAzureVm() {
	o.AzureVm.Unset()
}

// GetDynamoDbTable returns the DynamoDbTable field value if set, zero value otherwise.
func (o *DestinationRestoreTypeAttributes) GetDynamoDbTable() AwsDynamoDBDestination {
	if o == nil || IsNil(o.DynamoDbTable) {
		var ret AwsDynamoDBDestination
		return ret
	}
	return *o.DynamoDbTable
}

// GetDynamoDbTableOk returns a tuple with the DynamoDbTable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DestinationRestoreTypeAttributes) GetDynamoDbTableOk() (*AwsDynamoDBDestination, bool) {
	if o == nil || IsNil(o.DynamoDbTable) {
		return nil, false
	}
	return o.DynamoDbTable, true
}

// HasDynamoDbTable returns a boolean if a field has been set.
func (o *DestinationRestoreTypeAttributes) HasDynamoDbTable() bool {
	if o != nil && !IsNil(o.DynamoDbTable) {
		return true
	}

	return false
}

// SetDynamoDbTable gets a reference to the given AwsDynamoDBDestination and assigns it to the DynamoDbTable field.
func (o *DestinationRestoreTypeAttributes) SetDynamoDbTable(v AwsDynamoDBDestination) {
	o.DynamoDbTable = &v
}

// GetEksNamespace returns the EksNamespace field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DestinationRestoreTypeAttributes) GetEksNamespace() EksNamespaceRestoreDestination {
	if o == nil || IsNil(o.EksNamespace.Get()) {
		var ret EksNamespaceRestoreDestination
		return ret
	}
	return *o.EksNamespace.Get()
}

// GetEksNamespaceOk returns a tuple with the EksNamespace field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DestinationRestoreTypeAttributes) GetEksNamespaceOk() (*EksNamespaceRestoreDestination, bool) {
	if o == nil {
		return nil, false
	}
	return o.EksNamespace.Get(), o.EksNamespace.IsSet()
}

// HasEksNamespace returns a boolean if a field has been set.
func (o *DestinationRestoreTypeAttributes) HasEksNamespace() bool {
	if o != nil && o.EksNamespace.IsSet() {
		return true
	}

	return false
}

// SetEksNamespace gets a reference to the given NullableEksNamespaceRestoreDestination and assigns it to the EksNamespace field.
func (o *DestinationRestoreTypeAttributes) SetEksNamespace(v EksNamespaceRestoreDestination) {
	o.EksNamespace.Set(&v)
}
// SetEksNamespaceNil sets the value for EksNamespace to be an explicit nil
func (o *DestinationRestoreTypeAttributes) SetEksNamespaceNil() {
	o.EksNamespace.Set(nil)
}

// UnsetEksNamespace ensures that no value is present for EksNamespace, not even an explicit nil
func (o *DestinationRestoreTypeAttributes) UnsetEksNamespace() {
	o.EksNamespace.Unset()
}

// GetRdsInstance returns the RdsInstance field value if set, zero value otherwise.
func (o *DestinationRestoreTypeAttributes) GetRdsInstance() AwsDatabaseDestination {
	if o == nil || IsNil(o.RdsInstance) {
		var ret AwsDatabaseDestination
		return ret
	}
	return *o.RdsInstance
}

// GetRdsInstanceOk returns a tuple with the RdsInstance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DestinationRestoreTypeAttributes) GetRdsInstanceOk() (*AwsDatabaseDestination, bool) {
	if o == nil || IsNil(o.RdsInstance) {
		return nil, false
	}
	return o.RdsInstance, true
}

// HasRdsInstance returns a boolean if a field has been set.
func (o *DestinationRestoreTypeAttributes) HasRdsInstance() bool {
	if o != nil && !IsNil(o.RdsInstance) {
		return true
	}

	return false
}

// SetRdsInstance gets a reference to the given AwsDatabaseDestination and assigns it to the RdsInstance field.
func (o *DestinationRestoreTypeAttributes) SetRdsInstance(v AwsDatabaseDestination) {
	o.RdsInstance = &v
}

func (o DestinationRestoreTypeAttributes) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DestinationRestoreTypeAttributes) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ObjectStorage) {
		toSerialize["objectStorage"] = o.ObjectStorage
	}
	if o.AzureVm.IsSet() {
		toSerialize["azureVm"] = o.AzureVm.Get()
	}
	if !IsNil(o.DynamoDbTable) {
		toSerialize["dynamoDbTable"] = o.DynamoDbTable
	}
	if o.EksNamespace.IsSet() {
		toSerialize["eksNamespace"] = o.EksNamespace.Get()
	}
	if !IsNil(o.RdsInstance) {
		toSerialize["rdsInstance"] = o.RdsInstance
	}
	return toSerialize, nil
}

type NullableDestinationRestoreTypeAttributes struct {
	value *DestinationRestoreTypeAttributes
	isSet bool
}

func (v NullableDestinationRestoreTypeAttributes) Get() *DestinationRestoreTypeAttributes {
	return v.value
}

func (v *NullableDestinationRestoreTypeAttributes) Set(val *DestinationRestoreTypeAttributes) {
	v.value = val
	v.isSet = true
}

func (v NullableDestinationRestoreTypeAttributes) IsSet() bool {
	return v.isSet
}

func (v *NullableDestinationRestoreTypeAttributes) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDestinationRestoreTypeAttributes(val *DestinationRestoreTypeAttributes) *NullableDestinationRestoreTypeAttributes {
	return &NullableDestinationRestoreTypeAttributes{value: val, isSet: true}
}

func (v NullableDestinationRestoreTypeAttributes) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDestinationRestoreTypeAttributes) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


