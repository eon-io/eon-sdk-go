/*
Eon API

The Eon.io REST API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eon

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the AzureDiskSettings type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AzureDiskSettings{}

// AzureDiskSettings struct for AzureDiskSettings
type AzureDiskSettings struct {
	// Name of the disk to restore.
	Name string `json:"name"`
	// Type of the disk to restore.
	Type string `json:"type"`
	// Tier of the disk to restore.
	Tier string `json:"tier"`
	// Hyper-V generation of the disk to restore. Defaults to the original Hyper-V generation captured by the snapshot. 
	HyperVGeneration *string `json:"hyperVGeneration,omitempty"`
	// Size of the disk to restore, in bytes. Defaults to the original disk size captured by the snapshot. 
	SizeBytes *int64 `json:"sizeBytes,omitempty"`
	// Tags to apply to the restored disk as key-value pairs, where key and value are both strings. If not provided, defaults to an empty object, with no tags applied.  **Example:** `{\"eon_api_restore\": \"true\"}` 
	Tags *map[string]string `json:"tags,omitempty"`
}

type _AzureDiskSettings AzureDiskSettings

// NewAzureDiskSettings instantiates a new AzureDiskSettings object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAzureDiskSettings(name string, type_ string, tier string) *AzureDiskSettings {
	this := AzureDiskSettings{}
	this.Name = name
	this.Type = type_
	this.Tier = tier
	return &this
}

// NewAzureDiskSettingsWithDefaults instantiates a new AzureDiskSettings object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAzureDiskSettingsWithDefaults() *AzureDiskSettings {
	this := AzureDiskSettings{}
	return &this
}

// GetName returns the Name field value
func (o *AzureDiskSettings) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *AzureDiskSettings) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *AzureDiskSettings) SetName(v string) {
	o.Name = v
}

// GetType returns the Type field value
func (o *AzureDiskSettings) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *AzureDiskSettings) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *AzureDiskSettings) SetType(v string) {
	o.Type = v
}

// GetTier returns the Tier field value
func (o *AzureDiskSettings) GetTier() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Tier
}

// GetTierOk returns a tuple with the Tier field value
// and a boolean to check if the value has been set.
func (o *AzureDiskSettings) GetTierOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Tier, true
}

// SetTier sets field value
func (o *AzureDiskSettings) SetTier(v string) {
	o.Tier = v
}

// GetHyperVGeneration returns the HyperVGeneration field value if set, zero value otherwise.
func (o *AzureDiskSettings) GetHyperVGeneration() string {
	if o == nil || IsNil(o.HyperVGeneration) {
		var ret string
		return ret
	}
	return *o.HyperVGeneration
}

// GetHyperVGenerationOk returns a tuple with the HyperVGeneration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AzureDiskSettings) GetHyperVGenerationOk() (*string, bool) {
	if o == nil || IsNil(o.HyperVGeneration) {
		return nil, false
	}
	return o.HyperVGeneration, true
}

// HasHyperVGeneration returns a boolean if a field has been set.
func (o *AzureDiskSettings) HasHyperVGeneration() bool {
	if o != nil && !IsNil(o.HyperVGeneration) {
		return true
	}

	return false
}

// SetHyperVGeneration gets a reference to the given string and assigns it to the HyperVGeneration field.
func (o *AzureDiskSettings) SetHyperVGeneration(v string) {
	o.HyperVGeneration = &v
}

// GetSizeBytes returns the SizeBytes field value if set, zero value otherwise.
func (o *AzureDiskSettings) GetSizeBytes() int64 {
	if o == nil || IsNil(o.SizeBytes) {
		var ret int64
		return ret
	}
	return *o.SizeBytes
}

// GetSizeBytesOk returns a tuple with the SizeBytes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AzureDiskSettings) GetSizeBytesOk() (*int64, bool) {
	if o == nil || IsNil(o.SizeBytes) {
		return nil, false
	}
	return o.SizeBytes, true
}

// HasSizeBytes returns a boolean if a field has been set.
func (o *AzureDiskSettings) HasSizeBytes() bool {
	if o != nil && !IsNil(o.SizeBytes) {
		return true
	}

	return false
}

// SetSizeBytes gets a reference to the given int64 and assigns it to the SizeBytes field.
func (o *AzureDiskSettings) SetSizeBytes(v int64) {
	o.SizeBytes = &v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *AzureDiskSettings) GetTags() map[string]string {
	if o == nil || IsNil(o.Tags) {
		var ret map[string]string
		return ret
	}
	return *o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AzureDiskSettings) GetTagsOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Tags) {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *AzureDiskSettings) HasTags() bool {
	if o != nil && !IsNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given map[string]string and assigns it to the Tags field.
func (o *AzureDiskSettings) SetTags(v map[string]string) {
	o.Tags = &v
}

func (o AzureDiskSettings) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AzureDiskSettings) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	toSerialize["type"] = o.Type
	toSerialize["tier"] = o.Tier
	if !IsNil(o.HyperVGeneration) {
		toSerialize["hyperVGeneration"] = o.HyperVGeneration
	}
	if !IsNil(o.SizeBytes) {
		toSerialize["sizeBytes"] = o.SizeBytes
	}
	if !IsNil(o.Tags) {
		toSerialize["tags"] = o.Tags
	}
	return toSerialize, nil
}

func (o *AzureDiskSettings) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"type",
		"tier",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAzureDiskSettings := _AzureDiskSettings{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	//decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAzureDiskSettings)

	if err != nil {
		return err
	}

	*o = AzureDiskSettings(varAzureDiskSettings)

	return err
}

type NullableAzureDiskSettings struct {
	value *AzureDiskSettings
	isSet bool
}

func (v NullableAzureDiskSettings) Get() *AzureDiskSettings {
	return v.value
}

func (v *NullableAzureDiskSettings) Set(val *AzureDiskSettings) {
	v.value = val
	v.isSet = true
}

func (v NullableAzureDiskSettings) IsSet() bool {
	return v.isSet
}

func (v *NullableAzureDiskSettings) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAzureDiskSettings(val *AzureDiskSettings) *NullableAzureDiskSettings {
	return &NullableAzureDiskSettings{value: val, isSet: true}
}

func (v NullableAzureDiskSettings) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAzureDiskSettings) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


