/*
Eon API

The Eon.io REST API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eon

import (
	"encoding/json"
)

// checks if the EnvironmentDetails type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EnvironmentDetails{}

// EnvironmentDetails Details about the resource's environment.
type EnvironmentDetails struct {
	Environment *Environment `json:"environment,omitempty"`
	// Whether the environment is manually overridden. If `true`, the environment is user-defined and remains static. If `false`, the environment is automatically detected and set by Eon. 
	IsOverridden *bool `json:"isOverridden,omitempty"`
}

// NewEnvironmentDetails instantiates a new EnvironmentDetails object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEnvironmentDetails() *EnvironmentDetails {
	this := EnvironmentDetails{}
	return &this
}

// NewEnvironmentDetailsWithDefaults instantiates a new EnvironmentDetails object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEnvironmentDetailsWithDefaults() *EnvironmentDetails {
	this := EnvironmentDetails{}
	return &this
}

// GetEnvironment returns the Environment field value if set, zero value otherwise.
func (o *EnvironmentDetails) GetEnvironment() Environment {
	if o == nil || IsNil(o.Environment) {
		var ret Environment
		return ret
	}
	return *o.Environment
}

// GetEnvironmentOk returns a tuple with the Environment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvironmentDetails) GetEnvironmentOk() (*Environment, bool) {
	if o == nil || IsNil(o.Environment) {
		return nil, false
	}
	return o.Environment, true
}

// HasEnvironment returns a boolean if a field has been set.
func (o *EnvironmentDetails) HasEnvironment() bool {
	if o != nil && !IsNil(o.Environment) {
		return true
	}

	return false
}

// SetEnvironment gets a reference to the given Environment and assigns it to the Environment field.
func (o *EnvironmentDetails) SetEnvironment(v Environment) {
	o.Environment = &v
}

// GetIsOverridden returns the IsOverridden field value if set, zero value otherwise.
func (o *EnvironmentDetails) GetIsOverridden() bool {
	if o == nil || IsNil(o.IsOverridden) {
		var ret bool
		return ret
	}
	return *o.IsOverridden
}

// GetIsOverriddenOk returns a tuple with the IsOverridden field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvironmentDetails) GetIsOverriddenOk() (*bool, bool) {
	if o == nil || IsNil(o.IsOverridden) {
		return nil, false
	}
	return o.IsOverridden, true
}

// HasIsOverridden returns a boolean if a field has been set.
func (o *EnvironmentDetails) HasIsOverridden() bool {
	if o != nil && !IsNil(o.IsOverridden) {
		return true
	}

	return false
}

// SetIsOverridden gets a reference to the given bool and assigns it to the IsOverridden field.
func (o *EnvironmentDetails) SetIsOverridden(v bool) {
	o.IsOverridden = &v
}

func (o EnvironmentDetails) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EnvironmentDetails) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Environment) {
		toSerialize["environment"] = o.Environment
	}
	if !IsNil(o.IsOverridden) {
		toSerialize["isOverridden"] = o.IsOverridden
	}
	return toSerialize, nil
}

type NullableEnvironmentDetails struct {
	value *EnvironmentDetails
	isSet bool
}

func (v NullableEnvironmentDetails) Get() *EnvironmentDetails {
	return v.value
}

func (v *NullableEnvironmentDetails) Set(val *EnvironmentDetails) {
	v.value = val
	v.isSet = true
}

func (v NullableEnvironmentDetails) IsSet() bool {
	return v.isSet
}

func (v *NullableEnvironmentDetails) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnvironmentDetails(val *EnvironmentDetails) *NullableEnvironmentDetails {
	return &NullableEnvironmentDetails{value: val, isSet: true}
}

func (v NullableEnvironmentDetails) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnvironmentDetails) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


