/*
Eon API

The Eon.io REST API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eon

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the ResourceDetails type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ResourceDetails{}

// ResourceDetails struct for ResourceDetails
type ResourceDetails struct {
	// Eon-assigned resource ID.
	Id string `json:"id"`
	// Cloud-provider-assigned resource ID.
	ProviderResourceId string `json:"providerResourceId"`
	// Resource display name.
	ResourceName string       `json:"resourceName"`
	ResourceType ResourceType `json:"resourceType"`
	// Cloud-provider-assigned account ID.
	ProviderAccountId string   `json:"providerAccountId"`
	CloudProvider     Provider `json:"cloudProvider"`
	// Region the resource is hosted in.
	Region string `json:"region"`
	// Total storage size at the source, in bytes.
	SourceStorageSizeBytes int64 `json:"sourceStorageSizeBytes"`
}

type _ResourceDetails ResourceDetails

// NewResourceDetails instantiates a new ResourceDetails object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResourceDetails(id string, providerResourceId string, resourceName string, resourceType ResourceType, providerAccountId string, cloudProvider Provider, region string, sourceStorageSizeBytes int64) *ResourceDetails {
	this := ResourceDetails{}
	this.Id = id
	this.ProviderResourceId = providerResourceId
	this.ResourceName = resourceName
	this.ResourceType = resourceType
	this.ProviderAccountId = providerAccountId
	this.CloudProvider = cloudProvider
	this.Region = region
	this.SourceStorageSizeBytes = sourceStorageSizeBytes
	return &this
}

// NewResourceDetailsWithDefaults instantiates a new ResourceDetails object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResourceDetailsWithDefaults() *ResourceDetails {
	this := ResourceDetails{}
	return &this
}

// GetId returns the Id field value
func (o *ResourceDetails) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *ResourceDetails) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *ResourceDetails) SetId(v string) {
	o.Id = v
}

// GetProviderResourceId returns the ProviderResourceId field value
func (o *ResourceDetails) GetProviderResourceId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ProviderResourceId
}

// GetProviderResourceIdOk returns a tuple with the ProviderResourceId field value
// and a boolean to check if the value has been set.
func (o *ResourceDetails) GetProviderResourceIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProviderResourceId, true
}

// SetProviderResourceId sets field value
func (o *ResourceDetails) SetProviderResourceId(v string) {
	o.ProviderResourceId = v
}

// GetResourceName returns the ResourceName field value
func (o *ResourceDetails) GetResourceName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ResourceName
}

// GetResourceNameOk returns a tuple with the ResourceName field value
// and a boolean to check if the value has been set.
func (o *ResourceDetails) GetResourceNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ResourceName, true
}

// SetResourceName sets field value
func (o *ResourceDetails) SetResourceName(v string) {
	o.ResourceName = v
}

// GetResourceType returns the ResourceType field value
func (o *ResourceDetails) GetResourceType() ResourceType {
	if o == nil {
		var ret ResourceType
		return ret
	}

	return o.ResourceType
}

// GetResourceTypeOk returns a tuple with the ResourceType field value
// and a boolean to check if the value has been set.
func (o *ResourceDetails) GetResourceTypeOk() (*ResourceType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ResourceType, true
}

// SetResourceType sets field value
func (o *ResourceDetails) SetResourceType(v ResourceType) {
	o.ResourceType = v
}

// GetProviderAccountId returns the ProviderAccountId field value
func (o *ResourceDetails) GetProviderAccountId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ProviderAccountId
}

// GetProviderAccountIdOk returns a tuple with the ProviderAccountId field value
// and a boolean to check if the value has been set.
func (o *ResourceDetails) GetProviderAccountIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProviderAccountId, true
}

// SetProviderAccountId sets field value
func (o *ResourceDetails) SetProviderAccountId(v string) {
	o.ProviderAccountId = v
}

// GetCloudProvider returns the CloudProvider field value
func (o *ResourceDetails) GetCloudProvider() Provider {
	if o == nil {
		var ret Provider
		return ret
	}

	return o.CloudProvider
}

// GetCloudProviderOk returns a tuple with the CloudProvider field value
// and a boolean to check if the value has been set.
func (o *ResourceDetails) GetCloudProviderOk() (*Provider, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CloudProvider, true
}

// SetCloudProvider sets field value
func (o *ResourceDetails) SetCloudProvider(v Provider) {
	o.CloudProvider = v
}

// GetRegion returns the Region field value
func (o *ResourceDetails) GetRegion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Region
}

// GetRegionOk returns a tuple with the Region field value
// and a boolean to check if the value has been set.
func (o *ResourceDetails) GetRegionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Region, true
}

// SetRegion sets field value
func (o *ResourceDetails) SetRegion(v string) {
	o.Region = v
}

// GetSourceStorageSizeBytes returns the SourceStorageSizeBytes field value
func (o *ResourceDetails) GetSourceStorageSizeBytes() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.SourceStorageSizeBytes
}

// GetSourceStorageSizeBytesOk returns a tuple with the SourceStorageSizeBytes field value
// and a boolean to check if the value has been set.
func (o *ResourceDetails) GetSourceStorageSizeBytesOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SourceStorageSizeBytes, true
}

// SetSourceStorageSizeBytes sets field value
func (o *ResourceDetails) SetSourceStorageSizeBytes(v int64) {
	o.SourceStorageSizeBytes = v
}

func (o ResourceDetails) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ResourceDetails) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["providerResourceId"] = o.ProviderResourceId
	toSerialize["resourceName"] = o.ResourceName
	toSerialize["resourceType"] = o.ResourceType
	toSerialize["providerAccountId"] = o.ProviderAccountId
	toSerialize["cloudProvider"] = o.CloudProvider
	toSerialize["region"] = o.Region
	toSerialize["sourceStorageSizeBytes"] = o.SourceStorageSizeBytes
	return toSerialize, nil
}

func (o *ResourceDetails) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"providerResourceId",
		"resourceName",
		"resourceType",
		"providerAccountId",
		"cloudProvider",
		"region",
		"sourceStorageSizeBytes",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varResourceDetails := _ResourceDetails{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	//decoder.DisallowUnknownFields()
	err = decoder.Decode(&varResourceDetails)

	if err != nil {
		return err
	}

	*o = ResourceDetails(varResourceDetails)

	return err
}

type NullableResourceDetails struct {
	value *ResourceDetails
	isSet bool
}

func (v NullableResourceDetails) Get() *ResourceDetails {
	return v.value
}

func (v *NullableResourceDetails) Set(val *ResourceDetails) {
	v.value = val
	v.isSet = true
}

func (v NullableResourceDetails) IsSet() bool {
	return v.isSet
}

func (v *NullableResourceDetails) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResourceDetails(val *ResourceDetails) *NullableResourceDetails {
	return &NullableResourceDetails{value: val, isSet: true}
}

func (v NullableResourceDetails) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResourceDetails) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
