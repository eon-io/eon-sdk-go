/*
Eon API

The Eon.io REST API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eon

import (
	"encoding/json"
)

// checks if the SnapshotStorage type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SnapshotStorage{}

// SnapshotStorage Details about backup snapshot storage.
type SnapshotStorage struct {
	// Total size of the resource's Eon snapshots, in bytes.
	SizeBytes *int64 `json:"sizeBytes,omitempty"`
	// Number of Eon snapshots backing up the resource.
	EonSnapshotCount *int32 `json:"eonSnapshotCount,omitempty"`
	// Number of non-Eon snapshots backing up the resource. Only cloud-provider-native snapshots in the source account are included in this count. 
	NonEonSnapshotCount *int32 `json:"nonEonSnapshotCount,omitempty"`
}

// NewSnapshotStorage instantiates a new SnapshotStorage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSnapshotStorage() *SnapshotStorage {
	this := SnapshotStorage{}
	return &this
}

// NewSnapshotStorageWithDefaults instantiates a new SnapshotStorage object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSnapshotStorageWithDefaults() *SnapshotStorage {
	this := SnapshotStorage{}
	return &this
}

// GetSizeBytes returns the SizeBytes field value if set, zero value otherwise.
func (o *SnapshotStorage) GetSizeBytes() int64 {
	if o == nil || IsNil(o.SizeBytes) {
		var ret int64
		return ret
	}
	return *o.SizeBytes
}

// GetSizeBytesOk returns a tuple with the SizeBytes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SnapshotStorage) GetSizeBytesOk() (*int64, bool) {
	if o == nil || IsNil(o.SizeBytes) {
		return nil, false
	}
	return o.SizeBytes, true
}

// HasSizeBytes returns a boolean if a field has been set.
func (o *SnapshotStorage) HasSizeBytes() bool {
	if o != nil && !IsNil(o.SizeBytes) {
		return true
	}

	return false
}

// SetSizeBytes gets a reference to the given int64 and assigns it to the SizeBytes field.
func (o *SnapshotStorage) SetSizeBytes(v int64) {
	o.SizeBytes = &v
}

// GetEonSnapshotCount returns the EonSnapshotCount field value if set, zero value otherwise.
func (o *SnapshotStorage) GetEonSnapshotCount() int32 {
	if o == nil || IsNil(o.EonSnapshotCount) {
		var ret int32
		return ret
	}
	return *o.EonSnapshotCount
}

// GetEonSnapshotCountOk returns a tuple with the EonSnapshotCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SnapshotStorage) GetEonSnapshotCountOk() (*int32, bool) {
	if o == nil || IsNil(o.EonSnapshotCount) {
		return nil, false
	}
	return o.EonSnapshotCount, true
}

// HasEonSnapshotCount returns a boolean if a field has been set.
func (o *SnapshotStorage) HasEonSnapshotCount() bool {
	if o != nil && !IsNil(o.EonSnapshotCount) {
		return true
	}

	return false
}

// SetEonSnapshotCount gets a reference to the given int32 and assigns it to the EonSnapshotCount field.
func (o *SnapshotStorage) SetEonSnapshotCount(v int32) {
	o.EonSnapshotCount = &v
}

// GetNonEonSnapshotCount returns the NonEonSnapshotCount field value if set, zero value otherwise.
func (o *SnapshotStorage) GetNonEonSnapshotCount() int32 {
	if o == nil || IsNil(o.NonEonSnapshotCount) {
		var ret int32
		return ret
	}
	return *o.NonEonSnapshotCount
}

// GetNonEonSnapshotCountOk returns a tuple with the NonEonSnapshotCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SnapshotStorage) GetNonEonSnapshotCountOk() (*int32, bool) {
	if o == nil || IsNil(o.NonEonSnapshotCount) {
		return nil, false
	}
	return o.NonEonSnapshotCount, true
}

// HasNonEonSnapshotCount returns a boolean if a field has been set.
func (o *SnapshotStorage) HasNonEonSnapshotCount() bool {
	if o != nil && !IsNil(o.NonEonSnapshotCount) {
		return true
	}

	return false
}

// SetNonEonSnapshotCount gets a reference to the given int32 and assigns it to the NonEonSnapshotCount field.
func (o *SnapshotStorage) SetNonEonSnapshotCount(v int32) {
	o.NonEonSnapshotCount = &v
}

func (o SnapshotStorage) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SnapshotStorage) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.SizeBytes) {
		toSerialize["sizeBytes"] = o.SizeBytes
	}
	if !IsNil(o.EonSnapshotCount) {
		toSerialize["eonSnapshotCount"] = o.EonSnapshotCount
	}
	if !IsNil(o.NonEonSnapshotCount) {
		toSerialize["nonEonSnapshotCount"] = o.NonEonSnapshotCount
	}
	return toSerialize, nil
}

type NullableSnapshotStorage struct {
	value *SnapshotStorage
	isSet bool
}

func (v NullableSnapshotStorage) Get() *SnapshotStorage {
	return v.value
}

func (v *NullableSnapshotStorage) Set(val *SnapshotStorage) {
	v.value = val
	v.isSet = true
}

func (v NullableSnapshotStorage) IsSet() bool {
	return v.isSet
}

func (v *NullableSnapshotStorage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSnapshotStorage(val *SnapshotStorage) *NullableSnapshotStorage {
	return &NullableSnapshotStorage{value: val, isSet: true}
}

func (v NullableSnapshotStorage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSnapshotStorage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


