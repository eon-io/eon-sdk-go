/*
Eon API

The Eon.io REST API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eon

import (
	"encoding/json"
)

// checks if the ControlViolations type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ControlViolations{}

// ControlViolations struct for ControlViolations
type ControlViolations struct {
	// Number of high-severity control violations.
	High *int32 `json:"high,omitempty"`
	// Number of medium-severity control violations.
	Medium *int32 `json:"medium,omitempty"`
	// Number of low-severity control violations.
	Low *int32 `json:"low,omitempty"`
	// Number of muted control violations.
	Muted *int32 `json:"muted,omitempty"`
}

// NewControlViolations instantiates a new ControlViolations object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewControlViolations() *ControlViolations {
	this := ControlViolations{}
	return &this
}

// NewControlViolationsWithDefaults instantiates a new ControlViolations object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewControlViolationsWithDefaults() *ControlViolations {
	this := ControlViolations{}
	return &this
}

// GetHigh returns the High field value if set, zero value otherwise.
func (o *ControlViolations) GetHigh() int32 {
	if o == nil || IsNil(o.High) {
		var ret int32
		return ret
	}
	return *o.High
}

// GetHighOk returns a tuple with the High field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ControlViolations) GetHighOk() (*int32, bool) {
	if o == nil || IsNil(o.High) {
		return nil, false
	}
	return o.High, true
}

// HasHigh returns a boolean if a field has been set.
func (o *ControlViolations) HasHigh() bool {
	if o != nil && !IsNil(o.High) {
		return true
	}

	return false
}

// SetHigh gets a reference to the given int32 and assigns it to the High field.
func (o *ControlViolations) SetHigh(v int32) {
	o.High = &v
}

// GetMedium returns the Medium field value if set, zero value otherwise.
func (o *ControlViolations) GetMedium() int32 {
	if o == nil || IsNil(o.Medium) {
		var ret int32
		return ret
	}
	return *o.Medium
}

// GetMediumOk returns a tuple with the Medium field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ControlViolations) GetMediumOk() (*int32, bool) {
	if o == nil || IsNil(o.Medium) {
		return nil, false
	}
	return o.Medium, true
}

// HasMedium returns a boolean if a field has been set.
func (o *ControlViolations) HasMedium() bool {
	if o != nil && !IsNil(o.Medium) {
		return true
	}

	return false
}

// SetMedium gets a reference to the given int32 and assigns it to the Medium field.
func (o *ControlViolations) SetMedium(v int32) {
	o.Medium = &v
}

// GetLow returns the Low field value if set, zero value otherwise.
func (o *ControlViolations) GetLow() int32 {
	if o == nil || IsNil(o.Low) {
		var ret int32
		return ret
	}
	return *o.Low
}

// GetLowOk returns a tuple with the Low field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ControlViolations) GetLowOk() (*int32, bool) {
	if o == nil || IsNil(o.Low) {
		return nil, false
	}
	return o.Low, true
}

// HasLow returns a boolean if a field has been set.
func (o *ControlViolations) HasLow() bool {
	if o != nil && !IsNil(o.Low) {
		return true
	}

	return false
}

// SetLow gets a reference to the given int32 and assigns it to the Low field.
func (o *ControlViolations) SetLow(v int32) {
	o.Low = &v
}

// GetMuted returns the Muted field value if set, zero value otherwise.
func (o *ControlViolations) GetMuted() int32 {
	if o == nil || IsNil(o.Muted) {
		var ret int32
		return ret
	}
	return *o.Muted
}

// GetMutedOk returns a tuple with the Muted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ControlViolations) GetMutedOk() (*int32, bool) {
	if o == nil || IsNil(o.Muted) {
		return nil, false
	}
	return o.Muted, true
}

// HasMuted returns a boolean if a field has been set.
func (o *ControlViolations) HasMuted() bool {
	if o != nil && !IsNil(o.Muted) {
		return true
	}

	return false
}

// SetMuted gets a reference to the given int32 and assigns it to the Muted field.
func (o *ControlViolations) SetMuted(v int32) {
	o.Muted = &v
}

func (o ControlViolations) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ControlViolations) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.High) {
		toSerialize["high"] = o.High
	}
	if !IsNil(o.Medium) {
		toSerialize["medium"] = o.Medium
	}
	if !IsNil(o.Low) {
		toSerialize["low"] = o.Low
	}
	if !IsNil(o.Muted) {
		toSerialize["muted"] = o.Muted
	}
	return toSerialize, nil
}

type NullableControlViolations struct {
	value *ControlViolations
	isSet bool
}

func (v NullableControlViolations) Get() *ControlViolations {
	return v.value
}

func (v *NullableControlViolations) Set(val *ControlViolations) {
	v.value = val
	v.isSet = true
}

func (v NullableControlViolations) IsSet() bool {
	return v.isSet
}

func (v *NullableControlViolations) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableControlViolations(val *ControlViolations) *NullableControlViolations {
	return &NullableControlViolations{value: val, isSet: true}
}

func (v NullableControlViolations) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableControlViolations) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


