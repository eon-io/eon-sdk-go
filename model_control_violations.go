/*
Eon API

The Eon.io REST API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eon

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ControlViolations type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ControlViolations{}

// ControlViolations struct for ControlViolations
type ControlViolations struct {
	// Number of high-severity control violations.
	High int32 `json:"high"`
	// Number of medium-severity control violations.
	Medium int32 `json:"medium"`
	// Number of low-severity control violations.
	Low int32 `json:"low"`
	// Number of muted control violations.
	Muted int32 `json:"muted"`
}

type _ControlViolations ControlViolations

// NewControlViolations instantiates a new ControlViolations object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewControlViolations(high int32, medium int32, low int32, muted int32) *ControlViolations {
	this := ControlViolations{}
	this.High = high
	this.Medium = medium
	this.Low = low
	this.Muted = muted
	return &this
}

// NewControlViolationsWithDefaults instantiates a new ControlViolations object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewControlViolationsWithDefaults() *ControlViolations {
	this := ControlViolations{}
	return &this
}

// GetHigh returns the High field value
func (o *ControlViolations) GetHigh() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.High
}

// GetHighOk returns a tuple with the High field value
// and a boolean to check if the value has been set.
func (o *ControlViolations) GetHighOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.High, true
}

// SetHigh sets field value
func (o *ControlViolations) SetHigh(v int32) {
	o.High = v
}

// GetMedium returns the Medium field value
func (o *ControlViolations) GetMedium() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Medium
}

// GetMediumOk returns a tuple with the Medium field value
// and a boolean to check if the value has been set.
func (o *ControlViolations) GetMediumOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Medium, true
}

// SetMedium sets field value
func (o *ControlViolations) SetMedium(v int32) {
	o.Medium = v
}

// GetLow returns the Low field value
func (o *ControlViolations) GetLow() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Low
}

// GetLowOk returns a tuple with the Low field value
// and a boolean to check if the value has been set.
func (o *ControlViolations) GetLowOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Low, true
}

// SetLow sets field value
func (o *ControlViolations) SetLow(v int32) {
	o.Low = v
}

// GetMuted returns the Muted field value
func (o *ControlViolations) GetMuted() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Muted
}

// GetMutedOk returns a tuple with the Muted field value
// and a boolean to check if the value has been set.
func (o *ControlViolations) GetMutedOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Muted, true
}

// SetMuted sets field value
func (o *ControlViolations) SetMuted(v int32) {
	o.Muted = v
}

func (o ControlViolations) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ControlViolations) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["high"] = o.High
	toSerialize["medium"] = o.Medium
	toSerialize["low"] = o.Low
	toSerialize["muted"] = o.Muted
	return toSerialize, nil
}

func (o *ControlViolations) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"high",
		"medium",
		"low",
		"muted",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varControlViolations := _ControlViolations{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	//decoder.DisallowUnknownFields()
	err = decoder.Decode(&varControlViolations)

	if err != nil {
		return err
	}

	*o = ControlViolations(varControlViolations)

	return err
}

type NullableControlViolations struct {
	value *ControlViolations
	isSet bool
}

func (v NullableControlViolations) Get() *ControlViolations {
	return v.value
}

func (v *NullableControlViolations) Set(val *ControlViolations) {
	v.value = val
	v.isSet = true
}

func (v NullableControlViolations) IsSet() bool {
	return v.isSet
}

func (v *NullableControlViolations) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableControlViolations(val *ControlViolations) *NullableControlViolations {
	return &NullableControlViolations{value: val, isSet: true}
}

func (v NullableControlViolations) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableControlViolations) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


