/*
Eon API

The Eon.io REST API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eon

import (
	"encoding/json"
)

// checks if the AppFilters type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AppFilters{}

// AppFilters struct for AppFilters
type AppFilters struct {
	// Matches if any value in this list is in the `apps` list.
	ContainsAnyOf []string `json:"containsAnyOf,omitempty"`
	// Matches if none of the values in this list are in the `apps` list.
	ContainsNoneOf []string `json:"containsNoneOf,omitempty"`
	// Matches if all values in this list are in the `apps` list.
	ContainsAllOf []string `json:"containsAllOf,omitempty"`
}

// NewAppFilters instantiates a new AppFilters object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAppFilters() *AppFilters {
	this := AppFilters{}
	return &this
}

// NewAppFiltersWithDefaults instantiates a new AppFilters object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAppFiltersWithDefaults() *AppFilters {
	this := AppFilters{}
	return &this
}

// GetContainsAnyOf returns the ContainsAnyOf field value if set, zero value otherwise.
func (o *AppFilters) GetContainsAnyOf() []string {
	if o == nil || IsNil(o.ContainsAnyOf) {
		var ret []string
		return ret
	}
	return o.ContainsAnyOf
}

// GetContainsAnyOfOk returns a tuple with the ContainsAnyOf field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppFilters) GetContainsAnyOfOk() ([]string, bool) {
	if o == nil || IsNil(o.ContainsAnyOf) {
		return nil, false
	}
	return o.ContainsAnyOf, true
}

// HasContainsAnyOf returns a boolean if a field has been set.
func (o *AppFilters) HasContainsAnyOf() bool {
	if o != nil && !IsNil(o.ContainsAnyOf) {
		return true
	}

	return false
}

// SetContainsAnyOf gets a reference to the given []string and assigns it to the ContainsAnyOf field.
func (o *AppFilters) SetContainsAnyOf(v []string) {
	o.ContainsAnyOf = v
}

// GetContainsNoneOf returns the ContainsNoneOf field value if set, zero value otherwise.
func (o *AppFilters) GetContainsNoneOf() []string {
	if o == nil || IsNil(o.ContainsNoneOf) {
		var ret []string
		return ret
	}
	return o.ContainsNoneOf
}

// GetContainsNoneOfOk returns a tuple with the ContainsNoneOf field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppFilters) GetContainsNoneOfOk() ([]string, bool) {
	if o == nil || IsNil(o.ContainsNoneOf) {
		return nil, false
	}
	return o.ContainsNoneOf, true
}

// HasContainsNoneOf returns a boolean if a field has been set.
func (o *AppFilters) HasContainsNoneOf() bool {
	if o != nil && !IsNil(o.ContainsNoneOf) {
		return true
	}

	return false
}

// SetContainsNoneOf gets a reference to the given []string and assigns it to the ContainsNoneOf field.
func (o *AppFilters) SetContainsNoneOf(v []string) {
	o.ContainsNoneOf = v
}

// GetContainsAllOf returns the ContainsAllOf field value if set, zero value otherwise.
func (o *AppFilters) GetContainsAllOf() []string {
	if o == nil || IsNil(o.ContainsAllOf) {
		var ret []string
		return ret
	}
	return o.ContainsAllOf
}

// GetContainsAllOfOk returns a tuple with the ContainsAllOf field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppFilters) GetContainsAllOfOk() ([]string, bool) {
	if o == nil || IsNil(o.ContainsAllOf) {
		return nil, false
	}
	return o.ContainsAllOf, true
}

// HasContainsAllOf returns a boolean if a field has been set.
func (o *AppFilters) HasContainsAllOf() bool {
	if o != nil && !IsNil(o.ContainsAllOf) {
		return true
	}

	return false
}

// SetContainsAllOf gets a reference to the given []string and assigns it to the ContainsAllOf field.
func (o *AppFilters) SetContainsAllOf(v []string) {
	o.ContainsAllOf = v
}

func (o AppFilters) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AppFilters) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ContainsAnyOf) {
		toSerialize["containsAnyOf"] = o.ContainsAnyOf
	}
	if !IsNil(o.ContainsNoneOf) {
		toSerialize["containsNoneOf"] = o.ContainsNoneOf
	}
	if !IsNil(o.ContainsAllOf) {
		toSerialize["containsAllOf"] = o.ContainsAllOf
	}
	return toSerialize, nil
}

type NullableAppFilters struct {
	value *AppFilters
	isSet bool
}

func (v NullableAppFilters) Get() *AppFilters {
	return v.value
}

func (v *NullableAppFilters) Set(val *AppFilters) {
	v.value = val
	v.isSet = true
}

func (v NullableAppFilters) IsSet() bool {
	return v.isSet
}

func (v *NullableAppFilters) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAppFilters(val *AppFilters) *NullableAppFilters {
	return &NullableAppFilters{value: val, isSet: true}
}

func (v NullableAppFilters) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAppFilters) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


