/*
Eon API

The Eon.io REST API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eon

import (
	"encoding/json"
)

// checks if the BackupStatusFilters type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BackupStatusFilters{}

// BackupStatusFilters struct for BackupStatusFilters
type BackupStatusFilters struct {
	// Matches if any value in this list equals `backupStatus`.
	In []BackupStatus `json:"in,omitempty"`
	// Matches if no value in this list equals `backupStatus`.
	NotIn []BackupStatus `json:"notIn,omitempty"`
}

// NewBackupStatusFilters instantiates a new BackupStatusFilters object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBackupStatusFilters() *BackupStatusFilters {
	this := BackupStatusFilters{}
	return &this
}

// NewBackupStatusFiltersWithDefaults instantiates a new BackupStatusFilters object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBackupStatusFiltersWithDefaults() *BackupStatusFilters {
	this := BackupStatusFilters{}
	return &this
}

// GetIn returns the In field value if set, zero value otherwise.
func (o *BackupStatusFilters) GetIn() []BackupStatus {
	if o == nil || IsNil(o.In) {
		var ret []BackupStatus
		return ret
	}
	return o.In
}

// GetInOk returns a tuple with the In field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BackupStatusFilters) GetInOk() ([]BackupStatus, bool) {
	if o == nil || IsNil(o.In) {
		return nil, false
	}
	return o.In, true
}

// HasIn returns a boolean if a field has been set.
func (o *BackupStatusFilters) HasIn() bool {
	if o != nil && !IsNil(o.In) {
		return true
	}

	return false
}

// SetIn gets a reference to the given []BackupStatus and assigns it to the In field.
func (o *BackupStatusFilters) SetIn(v []BackupStatus) {
	o.In = v
}

// GetNotIn returns the NotIn field value if set, zero value otherwise.
func (o *BackupStatusFilters) GetNotIn() []BackupStatus {
	if o == nil || IsNil(o.NotIn) {
		var ret []BackupStatus
		return ret
	}
	return o.NotIn
}

// GetNotInOk returns a tuple with the NotIn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BackupStatusFilters) GetNotInOk() ([]BackupStatus, bool) {
	if o == nil || IsNil(o.NotIn) {
		return nil, false
	}
	return o.NotIn, true
}

// HasNotIn returns a boolean if a field has been set.
func (o *BackupStatusFilters) HasNotIn() bool {
	if o != nil && !IsNil(o.NotIn) {
		return true
	}

	return false
}

// SetNotIn gets a reference to the given []BackupStatus and assigns it to the NotIn field.
func (o *BackupStatusFilters) SetNotIn(v []BackupStatus) {
	o.NotIn = v
}

func (o BackupStatusFilters) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BackupStatusFilters) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.In) {
		toSerialize["in"] = o.In
	}
	if !IsNil(o.NotIn) {
		toSerialize["notIn"] = o.NotIn
	}
	return toSerialize, nil
}

type NullableBackupStatusFilters struct {
	value *BackupStatusFilters
	isSet bool
}

func (v NullableBackupStatusFilters) Get() *BackupStatusFilters {
	return v.value
}

func (v *NullableBackupStatusFilters) Set(val *BackupStatusFilters) {
	v.value = val
	v.isSet = true
}

func (v NullableBackupStatusFilters) IsSet() bool {
	return v.isSet
}

func (v *NullableBackupStatusFilters) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBackupStatusFilters(val *BackupStatusFilters) *NullableBackupStatusFilters {
	return &NullableBackupStatusFilters{value: val, isSet: true}
}

func (v NullableBackupStatusFilters) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBackupStatusFilters) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


