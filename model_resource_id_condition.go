/*
Eon API

The Eon.io REST API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eon

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ResourceIdCondition type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ResourceIdCondition{}

// ResourceIdCondition struct for ResourceIdCondition
type ResourceIdCondition struct {
	Operator ScalarOperators `json:"operator"`
	ResourceIds []string `json:"resourceIds"`
}

type _ResourceIdCondition ResourceIdCondition

// NewResourceIdCondition instantiates a new ResourceIdCondition object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResourceIdCondition(operator ScalarOperators, resourceIds []string) *ResourceIdCondition {
	this := ResourceIdCondition{}
	this.Operator = operator
	this.ResourceIds = resourceIds
	return &this
}

// NewResourceIdConditionWithDefaults instantiates a new ResourceIdCondition object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResourceIdConditionWithDefaults() *ResourceIdCondition {
	this := ResourceIdCondition{}
	return &this
}

// GetOperator returns the Operator field value
func (o *ResourceIdCondition) GetOperator() ScalarOperators {
	if o == nil {
		var ret ScalarOperators
		return ret
	}

	return o.Operator
}

// GetOperatorOk returns a tuple with the Operator field value
// and a boolean to check if the value has been set.
func (o *ResourceIdCondition) GetOperatorOk() (*ScalarOperators, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Operator, true
}

// SetOperator sets field value
func (o *ResourceIdCondition) SetOperator(v ScalarOperators) {
	o.Operator = v
}

// GetResourceIds returns the ResourceIds field value
func (o *ResourceIdCondition) GetResourceIds() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.ResourceIds
}

// GetResourceIdsOk returns a tuple with the ResourceIds field value
// and a boolean to check if the value has been set.
func (o *ResourceIdCondition) GetResourceIdsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ResourceIds, true
}

// SetResourceIds sets field value
func (o *ResourceIdCondition) SetResourceIds(v []string) {
	o.ResourceIds = v
}

func (o ResourceIdCondition) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ResourceIdCondition) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["operator"] = o.Operator
	toSerialize["resourceIds"] = o.ResourceIds
	return toSerialize, nil
}

func (o *ResourceIdCondition) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"operator",
		"resourceIds",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varResourceIdCondition := _ResourceIdCondition{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	//decoder.DisallowUnknownFields()
	err = decoder.Decode(&varResourceIdCondition)

	if err != nil {
		return err
	}

	*o = ResourceIdCondition(varResourceIdCondition)

	return err
}

type NullableResourceIdCondition struct {
	value *ResourceIdCondition
	isSet bool
}

func (v NullableResourceIdCondition) Get() *ResourceIdCondition {
	return v.value
}

func (v *NullableResourceIdCondition) Set(val *ResourceIdCondition) {
	v.value = val
	v.isSet = true
}

func (v NullableResourceIdCondition) IsSet() bool {
	return v.isSet
}

func (v *NullableResourceIdCondition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResourceIdCondition(val *ResourceIdCondition) *NullableResourceIdCondition {
	return &NullableResourceIdCondition{value: val, isSet: true}
}

func (v NullableResourceIdCondition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResourceIdCondition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


