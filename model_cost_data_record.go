/*
Eon API

The Eon.io REST API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eon

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CostDataRecord type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CostDataRecord{}

// CostDataRecord Array of cost records based on requested filters and grouping
type CostDataRecord struct {
	RecordTimeFrame TimeFrame `json:"recordTimeFrame"`
	// Total number of unique resources in the record
	ResourceCount *int32 `json:"resourceCount,omitempty"`
	Dimensions *CostDataRecordDimensions `json:"dimensions,omitempty"`
	Costs []CostDataRecordCost `json:"costs"`
}

type _CostDataRecord CostDataRecord

// NewCostDataRecord instantiates a new CostDataRecord object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCostDataRecord(recordTimeFrame TimeFrame, costs []CostDataRecordCost) *CostDataRecord {
	this := CostDataRecord{}
	this.RecordTimeFrame = recordTimeFrame
	this.Costs = costs
	return &this
}

// NewCostDataRecordWithDefaults instantiates a new CostDataRecord object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCostDataRecordWithDefaults() *CostDataRecord {
	this := CostDataRecord{}
	return &this
}

// GetRecordTimeFrame returns the RecordTimeFrame field value
func (o *CostDataRecord) GetRecordTimeFrame() TimeFrame {
	if o == nil {
		var ret TimeFrame
		return ret
	}

	return o.RecordTimeFrame
}

// GetRecordTimeFrameOk returns a tuple with the RecordTimeFrame field value
// and a boolean to check if the value has been set.
func (o *CostDataRecord) GetRecordTimeFrameOk() (*TimeFrame, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RecordTimeFrame, true
}

// SetRecordTimeFrame sets field value
func (o *CostDataRecord) SetRecordTimeFrame(v TimeFrame) {
	o.RecordTimeFrame = v
}

// GetResourceCount returns the ResourceCount field value if set, zero value otherwise.
func (o *CostDataRecord) GetResourceCount() int32 {
	if o == nil || IsNil(o.ResourceCount) {
		var ret int32
		return ret
	}
	return *o.ResourceCount
}

// GetResourceCountOk returns a tuple with the ResourceCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CostDataRecord) GetResourceCountOk() (*int32, bool) {
	if o == nil || IsNil(o.ResourceCount) {
		return nil, false
	}
	return o.ResourceCount, true
}

// HasResourceCount returns a boolean if a field has been set.
func (o *CostDataRecord) HasResourceCount() bool {
	if o != nil && !IsNil(o.ResourceCount) {
		return true
	}

	return false
}

// SetResourceCount gets a reference to the given int32 and assigns it to the ResourceCount field.
func (o *CostDataRecord) SetResourceCount(v int32) {
	o.ResourceCount = &v
}

// GetDimensions returns the Dimensions field value if set, zero value otherwise.
func (o *CostDataRecord) GetDimensions() CostDataRecordDimensions {
	if o == nil || IsNil(o.Dimensions) {
		var ret CostDataRecordDimensions
		return ret
	}
	return *o.Dimensions
}

// GetDimensionsOk returns a tuple with the Dimensions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CostDataRecord) GetDimensionsOk() (*CostDataRecordDimensions, bool) {
	if o == nil || IsNil(o.Dimensions) {
		return nil, false
	}
	return o.Dimensions, true
}

// HasDimensions returns a boolean if a field has been set.
func (o *CostDataRecord) HasDimensions() bool {
	if o != nil && !IsNil(o.Dimensions) {
		return true
	}

	return false
}

// SetDimensions gets a reference to the given CostDataRecordDimensions and assigns it to the Dimensions field.
func (o *CostDataRecord) SetDimensions(v CostDataRecordDimensions) {
	o.Dimensions = &v
}

// GetCosts returns the Costs field value
func (o *CostDataRecord) GetCosts() []CostDataRecordCost {
	if o == nil {
		var ret []CostDataRecordCost
		return ret
	}

	return o.Costs
}

// GetCostsOk returns a tuple with the Costs field value
// and a boolean to check if the value has been set.
func (o *CostDataRecord) GetCostsOk() ([]CostDataRecordCost, bool) {
	if o == nil {
		return nil, false
	}
	return o.Costs, true
}

// SetCosts sets field value
func (o *CostDataRecord) SetCosts(v []CostDataRecordCost) {
	o.Costs = v
}

func (o CostDataRecord) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CostDataRecord) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["recordTimeFrame"] = o.RecordTimeFrame
	if !IsNil(o.ResourceCount) {
		toSerialize["resourceCount"] = o.ResourceCount
	}
	if !IsNil(o.Dimensions) {
		toSerialize["dimensions"] = o.Dimensions
	}
	toSerialize["costs"] = o.Costs
	return toSerialize, nil
}

func (o *CostDataRecord) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"recordTimeFrame",
		"costs",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCostDataRecord := _CostDataRecord{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	//decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCostDataRecord)

	if err != nil {
		return err
	}

	*o = CostDataRecord(varCostDataRecord)

	return err
}

type NullableCostDataRecord struct {
	value *CostDataRecord
	isSet bool
}

func (v NullableCostDataRecord) Get() *CostDataRecord {
	return v.value
}

func (v *NullableCostDataRecord) Set(val *CostDataRecord) {
	v.value = val
	v.isSet = true
}

func (v NullableCostDataRecord) IsSet() bool {
	return v.isSet
}

func (v *NullableCostDataRecord) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCostDataRecord(val *CostDataRecord) *NullableCostDataRecord {
	return &NullableCostDataRecord{value: val, isSet: true}
}

func (v NullableCostDataRecord) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCostDataRecord) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


