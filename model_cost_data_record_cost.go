/*
Eon API

The Eon.io REST API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eon

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CostDataRecordCost type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CostDataRecordCost{}

// CostDataRecordCost Cost and usage breakdown for a specific metering dimension. 
type CostDataRecordCost struct {
	MeteringDimension MeteringDimension `json:"meteringDimension"`
	Cost Cost `json:"cost"`
	Usage Usage `json:"usage"`
}

type _CostDataRecordCost CostDataRecordCost

// NewCostDataRecordCost instantiates a new CostDataRecordCost object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCostDataRecordCost(meteringDimension MeteringDimension, cost Cost, usage Usage) *CostDataRecordCost {
	this := CostDataRecordCost{}
	this.MeteringDimension = meteringDimension
	this.Cost = cost
	this.Usage = usage
	return &this
}

// NewCostDataRecordCostWithDefaults instantiates a new CostDataRecordCost object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCostDataRecordCostWithDefaults() *CostDataRecordCost {
	this := CostDataRecordCost{}
	return &this
}

// GetMeteringDimension returns the MeteringDimension field value
func (o *CostDataRecordCost) GetMeteringDimension() MeteringDimension {
	if o == nil {
		var ret MeteringDimension
		return ret
	}

	return o.MeteringDimension
}

// GetMeteringDimensionOk returns a tuple with the MeteringDimension field value
// and a boolean to check if the value has been set.
func (o *CostDataRecordCost) GetMeteringDimensionOk() (*MeteringDimension, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MeteringDimension, true
}

// SetMeteringDimension sets field value
func (o *CostDataRecordCost) SetMeteringDimension(v MeteringDimension) {
	o.MeteringDimension = v
}

// GetCost returns the Cost field value
func (o *CostDataRecordCost) GetCost() Cost {
	if o == nil {
		var ret Cost
		return ret
	}

	return o.Cost
}

// GetCostOk returns a tuple with the Cost field value
// and a boolean to check if the value has been set.
func (o *CostDataRecordCost) GetCostOk() (*Cost, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Cost, true
}

// SetCost sets field value
func (o *CostDataRecordCost) SetCost(v Cost) {
	o.Cost = v
}

// GetUsage returns the Usage field value
func (o *CostDataRecordCost) GetUsage() Usage {
	if o == nil {
		var ret Usage
		return ret
	}

	return o.Usage
}

// GetUsageOk returns a tuple with the Usage field value
// and a boolean to check if the value has been set.
func (o *CostDataRecordCost) GetUsageOk() (*Usage, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Usage, true
}

// SetUsage sets field value
func (o *CostDataRecordCost) SetUsage(v Usage) {
	o.Usage = v
}

func (o CostDataRecordCost) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CostDataRecordCost) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["meteringDimension"] = o.MeteringDimension
	toSerialize["cost"] = o.Cost
	toSerialize["usage"] = o.Usage
	return toSerialize, nil
}

func (o *CostDataRecordCost) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"meteringDimension",
		"cost",
		"usage",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCostDataRecordCost := _CostDataRecordCost{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	//decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCostDataRecordCost)

	if err != nil {
		return err
	}

	*o = CostDataRecordCost(varCostDataRecordCost)

	return err
}

type NullableCostDataRecordCost struct {
	value *CostDataRecordCost
	isSet bool
}

func (v NullableCostDataRecordCost) Get() *CostDataRecordCost {
	return v.value
}

func (v *NullableCostDataRecordCost) Set(val *CostDataRecordCost) {
	v.value = val
	v.isSet = true
}

func (v NullableCostDataRecordCost) IsSet() bool {
	return v.isSet
}

func (v *NullableCostDataRecordCost) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCostDataRecordCost(val *CostDataRecordCost) *NullableCostDataRecordCost {
	return &NullableCostDataRecordCost{value: val, isSet: true}
}

func (v NullableCostDataRecordCost) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCostDataRecordCost) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


