/*
Eon API

The Eon.io REST API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eon

import (
	"encoding/json"
)

// checks if the CostDataFilters type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CostDataFilters{}

// CostDataFilters struct for CostDataFilters
type CostDataFilters struct {
	SourceAccountProviderId *SourceAccountProviderIdFilters `json:"sourceAccountProviderId,omitempty"`
	CloudProvider *CloudProviderFilters `json:"cloudProvider,omitempty"`
	ResourceType *ResourceTypeFilters `json:"resourceType,omitempty"`
	ResourceId *IdFilters `json:"resourceId,omitempty"`
}

// NewCostDataFilters instantiates a new CostDataFilters object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCostDataFilters() *CostDataFilters {
	this := CostDataFilters{}
	return &this
}

// NewCostDataFiltersWithDefaults instantiates a new CostDataFilters object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCostDataFiltersWithDefaults() *CostDataFilters {
	this := CostDataFilters{}
	return &this
}

// GetSourceAccountProviderId returns the SourceAccountProviderId field value if set, zero value otherwise.
func (o *CostDataFilters) GetSourceAccountProviderId() SourceAccountProviderIdFilters {
	if o == nil || IsNil(o.SourceAccountProviderId) {
		var ret SourceAccountProviderIdFilters
		return ret
	}
	return *o.SourceAccountProviderId
}

// GetSourceAccountProviderIdOk returns a tuple with the SourceAccountProviderId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CostDataFilters) GetSourceAccountProviderIdOk() (*SourceAccountProviderIdFilters, bool) {
	if o == nil || IsNil(o.SourceAccountProviderId) {
		return nil, false
	}
	return o.SourceAccountProviderId, true
}

// HasSourceAccountProviderId returns a boolean if a field has been set.
func (o *CostDataFilters) HasSourceAccountProviderId() bool {
	if o != nil && !IsNil(o.SourceAccountProviderId) {
		return true
	}

	return false
}

// SetSourceAccountProviderId gets a reference to the given SourceAccountProviderIdFilters and assigns it to the SourceAccountProviderId field.
func (o *CostDataFilters) SetSourceAccountProviderId(v SourceAccountProviderIdFilters) {
	o.SourceAccountProviderId = &v
}

// GetCloudProvider returns the CloudProvider field value if set, zero value otherwise.
func (o *CostDataFilters) GetCloudProvider() CloudProviderFilters {
	if o == nil || IsNil(o.CloudProvider) {
		var ret CloudProviderFilters
		return ret
	}
	return *o.CloudProvider
}

// GetCloudProviderOk returns a tuple with the CloudProvider field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CostDataFilters) GetCloudProviderOk() (*CloudProviderFilters, bool) {
	if o == nil || IsNil(o.CloudProvider) {
		return nil, false
	}
	return o.CloudProvider, true
}

// HasCloudProvider returns a boolean if a field has been set.
func (o *CostDataFilters) HasCloudProvider() bool {
	if o != nil && !IsNil(o.CloudProvider) {
		return true
	}

	return false
}

// SetCloudProvider gets a reference to the given CloudProviderFilters and assigns it to the CloudProvider field.
func (o *CostDataFilters) SetCloudProvider(v CloudProviderFilters) {
	o.CloudProvider = &v
}

// GetResourceType returns the ResourceType field value if set, zero value otherwise.
func (o *CostDataFilters) GetResourceType() ResourceTypeFilters {
	if o == nil || IsNil(o.ResourceType) {
		var ret ResourceTypeFilters
		return ret
	}
	return *o.ResourceType
}

// GetResourceTypeOk returns a tuple with the ResourceType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CostDataFilters) GetResourceTypeOk() (*ResourceTypeFilters, bool) {
	if o == nil || IsNil(o.ResourceType) {
		return nil, false
	}
	return o.ResourceType, true
}

// HasResourceType returns a boolean if a field has been set.
func (o *CostDataFilters) HasResourceType() bool {
	if o != nil && !IsNil(o.ResourceType) {
		return true
	}

	return false
}

// SetResourceType gets a reference to the given ResourceTypeFilters and assigns it to the ResourceType field.
func (o *CostDataFilters) SetResourceType(v ResourceTypeFilters) {
	o.ResourceType = &v
}

// GetResourceId returns the ResourceId field value if set, zero value otherwise.
func (o *CostDataFilters) GetResourceId() IdFilters {
	if o == nil || IsNil(o.ResourceId) {
		var ret IdFilters
		return ret
	}
	return *o.ResourceId
}

// GetResourceIdOk returns a tuple with the ResourceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CostDataFilters) GetResourceIdOk() (*IdFilters, bool) {
	if o == nil || IsNil(o.ResourceId) {
		return nil, false
	}
	return o.ResourceId, true
}

// HasResourceId returns a boolean if a field has been set.
func (o *CostDataFilters) HasResourceId() bool {
	if o != nil && !IsNil(o.ResourceId) {
		return true
	}

	return false
}

// SetResourceId gets a reference to the given IdFilters and assigns it to the ResourceId field.
func (o *CostDataFilters) SetResourceId(v IdFilters) {
	o.ResourceId = &v
}

func (o CostDataFilters) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CostDataFilters) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.SourceAccountProviderId) {
		toSerialize["sourceAccountProviderId"] = o.SourceAccountProviderId
	}
	if !IsNil(o.CloudProvider) {
		toSerialize["cloudProvider"] = o.CloudProvider
	}
	if !IsNil(o.ResourceType) {
		toSerialize["resourceType"] = o.ResourceType
	}
	if !IsNil(o.ResourceId) {
		toSerialize["resourceId"] = o.ResourceId
	}
	return toSerialize, nil
}

type NullableCostDataFilters struct {
	value *CostDataFilters
	isSet bool
}

func (v NullableCostDataFilters) Get() *CostDataFilters {
	return v.value
}

func (v *NullableCostDataFilters) Set(val *CostDataFilters) {
	v.value = val
	v.isSet = true
}

func (v NullableCostDataFilters) IsSet() bool {
	return v.isSet
}

func (v *NullableCostDataFilters) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCostDataFilters(val *CostDataFilters) *NullableCostDataFilters {
	return &NullableCostDataFilters{value: val, isSet: true}
}

func (v NullableCostDataFilters) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCostDataFilters) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


