/*
Eon API

The Eon.io REST API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eon

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the AccountIdCondition type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AccountIdCondition{}

// AccountIdCondition struct for AccountIdCondition
type AccountIdCondition struct {
	Operator ScalarOperators `json:"operator"`
	AccountIds []string `json:"accountIds"`
}

type _AccountIdCondition AccountIdCondition

// NewAccountIdCondition instantiates a new AccountIdCondition object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAccountIdCondition(operator ScalarOperators, accountIds []string) *AccountIdCondition {
	this := AccountIdCondition{}
	this.Operator = operator
	this.AccountIds = accountIds
	return &this
}

// NewAccountIdConditionWithDefaults instantiates a new AccountIdCondition object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAccountIdConditionWithDefaults() *AccountIdCondition {
	this := AccountIdCondition{}
	return &this
}

// GetOperator returns the Operator field value
func (o *AccountIdCondition) GetOperator() ScalarOperators {
	if o == nil {
		var ret ScalarOperators
		return ret
	}

	return o.Operator
}

// GetOperatorOk returns a tuple with the Operator field value
// and a boolean to check if the value has been set.
func (o *AccountIdCondition) GetOperatorOk() (*ScalarOperators, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Operator, true
}

// SetOperator sets field value
func (o *AccountIdCondition) SetOperator(v ScalarOperators) {
	o.Operator = v
}

// GetAccountIds returns the AccountIds field value
func (o *AccountIdCondition) GetAccountIds() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.AccountIds
}

// GetAccountIdsOk returns a tuple with the AccountIds field value
// and a boolean to check if the value has been set.
func (o *AccountIdCondition) GetAccountIdsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.AccountIds, true
}

// SetAccountIds sets field value
func (o *AccountIdCondition) SetAccountIds(v []string) {
	o.AccountIds = v
}

func (o AccountIdCondition) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AccountIdCondition) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["operator"] = o.Operator
	toSerialize["accountIds"] = o.AccountIds
	return toSerialize, nil
}

func (o *AccountIdCondition) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"operator",
		"accountIds",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAccountIdCondition := _AccountIdCondition{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	//decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAccountIdCondition)

	if err != nil {
		return err
	}

	*o = AccountIdCondition(varAccountIdCondition)

	return err
}

type NullableAccountIdCondition struct {
	value *AccountIdCondition
	isSet bool
}

func (v NullableAccountIdCondition) Get() *AccountIdCondition {
	return v.value
}

func (v *NullableAccountIdCondition) Set(val *AccountIdCondition) {
	v.value = val
	v.isSet = true
}

func (v NullableAccountIdCondition) IsSet() bool {
	return v.isSet
}

func (v *NullableAccountIdCondition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAccountIdCondition(val *AccountIdCondition) *NullableAccountIdCondition {
	return &NullableAccountIdCondition{value: val, isSet: true}
}

func (v NullableAccountIdCondition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAccountIdCondition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


