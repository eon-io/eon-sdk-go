/*
Eon API

The Eon.io REST API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eon

import (
	"encoding/json"
	"fmt"
)

// QueryDBStatus Query status. If completed, the query results can be retrieved. 
type QueryDBStatus string

// List of QueryDBStatus
const (
	QUERY_STATUS_UNSPECIFIED QueryDBStatus = "UNSPECIFIED"
	QUERY_IN_PROGRESS QueryDBStatus = "IN_PROGRESS"
	QUERY_COMPLETED QueryDBStatus = "COMPLETED"
	QUERY_CANCELED QueryDBStatus = "CANCELED"
	QUERY_FAILED QueryDBStatus = "FAILED"
)

// All allowed values of QueryDBStatus enum
var AllowedQueryDBStatusEnumValues = []QueryDBStatus{
	"UNSPECIFIED",
	"IN_PROGRESS",
	"COMPLETED",
	"CANCELED",
	"FAILED",
}

func (v *QueryDBStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := QueryDBStatus(value)
	for _, existing := range AllowedQueryDBStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid QueryDBStatus", value)
}

// NewQueryDBStatusFromValue returns a pointer to a valid QueryDBStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewQueryDBStatusFromValue(v string) (*QueryDBStatus, error) {
	ev := QueryDBStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for QueryDBStatus: valid values are %v", v, AllowedQueryDBStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v QueryDBStatus) IsValid() bool {
	for _, existing := range AllowedQueryDBStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to QueryDBStatus value
func (v QueryDBStatus) Ptr() *QueryDBStatus {
	return &v
}

type NullableQueryDBStatus struct {
	value *QueryDBStatus
	isSet bool
}

func (v NullableQueryDBStatus) Get() *QueryDBStatus {
	return v.value
}

func (v *NullableQueryDBStatus) Set(val *QueryDBStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableQueryDBStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableQueryDBStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableQueryDBStatus(val *QueryDBStatus) *NullableQueryDBStatus {
	return &NullableQueryDBStatus{value: val, isSet: true}
}

func (v NullableQueryDBStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableQueryDBStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

