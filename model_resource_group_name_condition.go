/*
Eon API

The Eon.io REST API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eon

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the ResourceGroupNameCondition type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ResourceGroupNameCondition{}

// ResourceGroupNameCondition struct for ResourceGroupNameCondition
type ResourceGroupNameCondition struct {
	Operator           ScalarOperators `json:"operator"`
	ResourceGroupNames []string        `json:"resourceGroupNames"`
}

type _ResourceGroupNameCondition ResourceGroupNameCondition

// NewResourceGroupNameCondition instantiates a new ResourceGroupNameCondition object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResourceGroupNameCondition(operator ScalarOperators, resourceGroupNames []string) *ResourceGroupNameCondition {
	this := ResourceGroupNameCondition{}
	this.Operator = operator
	this.ResourceGroupNames = resourceGroupNames
	return &this
}

// NewResourceGroupNameConditionWithDefaults instantiates a new ResourceGroupNameCondition object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResourceGroupNameConditionWithDefaults() *ResourceGroupNameCondition {
	this := ResourceGroupNameCondition{}
	return &this
}

// GetOperator returns the Operator field value
func (o *ResourceGroupNameCondition) GetOperator() ScalarOperators {
	if o == nil {
		var ret ScalarOperators
		return ret
	}

	return o.Operator
}

// GetOperatorOk returns a tuple with the Operator field value
// and a boolean to check if the value has been set.
func (o *ResourceGroupNameCondition) GetOperatorOk() (*ScalarOperators, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Operator, true
}

// SetOperator sets field value
func (o *ResourceGroupNameCondition) SetOperator(v ScalarOperators) {
	o.Operator = v
}

// GetResourceGroupNames returns the ResourceGroupNames field value
func (o *ResourceGroupNameCondition) GetResourceGroupNames() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.ResourceGroupNames
}

// GetResourceGroupNamesOk returns a tuple with the ResourceGroupNames field value
// and a boolean to check if the value has been set.
func (o *ResourceGroupNameCondition) GetResourceGroupNamesOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ResourceGroupNames, true
}

// SetResourceGroupNames sets field value
func (o *ResourceGroupNameCondition) SetResourceGroupNames(v []string) {
	o.ResourceGroupNames = v
}

func (o ResourceGroupNameCondition) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ResourceGroupNameCondition) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["operator"] = o.Operator
	toSerialize["resourceGroupNames"] = o.ResourceGroupNames
	return toSerialize, nil
}

func (o *ResourceGroupNameCondition) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"operator",
		"resourceGroupNames",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varResourceGroupNameCondition := _ResourceGroupNameCondition{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	//decoder.DisallowUnknownFields()
	err = decoder.Decode(&varResourceGroupNameCondition)

	if err != nil {
		return err
	}

	*o = ResourceGroupNameCondition(varResourceGroupNameCondition)

	return err
}

type NullableResourceGroupNameCondition struct {
	value *ResourceGroupNameCondition
	isSet bool
}

func (v NullableResourceGroupNameCondition) Get() *ResourceGroupNameCondition {
	return v.value
}

func (v *NullableResourceGroupNameCondition) Set(val *ResourceGroupNameCondition) {
	v.value = val
	v.isSet = true
}

func (v NullableResourceGroupNameCondition) IsSet() bool {
	return v.isSet
}

func (v *NullableResourceGroupNameCondition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResourceGroupNameCondition(val *ResourceGroupNameCondition) *NullableResourceGroupNameCondition {
	return &NullableResourceGroupNameCondition{value: val, isSet: true}
}

func (v NullableResourceGroupNameCondition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResourceGroupNameCondition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
