/*
Eon API

The Eon.io REST API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eon

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the AwsAccountConfigInput type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AwsAccountConfigInput{}

// AwsAccountConfigInput struct for AwsAccountConfigInput
type AwsAccountConfigInput struct {
	// ARN of the role Eon assumes to access the account in AWS.
	RoleArn string `json:"roleArn"`
}

type _AwsAccountConfigInput AwsAccountConfigInput

// NewAwsAccountConfigInput instantiates a new AwsAccountConfigInput object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAwsAccountConfigInput(roleArn string) *AwsAccountConfigInput {
	this := AwsAccountConfigInput{}
	this.RoleArn = roleArn
	return &this
}

// NewAwsAccountConfigInputWithDefaults instantiates a new AwsAccountConfigInput object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAwsAccountConfigInputWithDefaults() *AwsAccountConfigInput {
	this := AwsAccountConfigInput{}
	return &this
}

// GetRoleArn returns the RoleArn field value
func (o *AwsAccountConfigInput) GetRoleArn() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RoleArn
}

// GetRoleArnOk returns a tuple with the RoleArn field value
// and a boolean to check if the value has been set.
func (o *AwsAccountConfigInput) GetRoleArnOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RoleArn, true
}

// SetRoleArn sets field value
func (o *AwsAccountConfigInput) SetRoleArn(v string) {
	o.RoleArn = v
}

func (o AwsAccountConfigInput) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AwsAccountConfigInput) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["roleArn"] = o.RoleArn
	return toSerialize, nil
}

func (o *AwsAccountConfigInput) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"roleArn",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAwsAccountConfigInput := _AwsAccountConfigInput{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	// Allow unknown fields to handle API schema differences
	// decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAwsAccountConfigInput)

	if err != nil {
		return err
	}

	*o = AwsAccountConfigInput(varAwsAccountConfigInput)

	return err
}

type NullableAwsAccountConfigInput struct {
	value *AwsAccountConfigInput
	isSet bool
}

func (v NullableAwsAccountConfigInput) Get() *AwsAccountConfigInput {
	return v.value
}

func (v *NullableAwsAccountConfigInput) Set(val *AwsAccountConfigInput) {
	v.value = val
	v.isSet = true
}

func (v NullableAwsAccountConfigInput) IsSet() bool {
	return v.isSet
}

func (v *NullableAwsAccountConfigInput) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAwsAccountConfigInput(val *AwsAccountConfigInput) *NullableAwsAccountConfigInput {
	return &NullableAwsAccountConfigInput{value: val, isSet: true}
}

func (v NullableAwsAccountConfigInput) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAwsAccountConfigInput) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


