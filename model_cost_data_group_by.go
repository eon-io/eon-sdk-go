/*
Eon API

The Eon.io REST API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eon

import (
	"encoding/json"
	"fmt"
)

// CostDataGroupBy Dimension to group cost data by in the response. 
type CostDataGroupBy string

// List of CostDataGroupBy
const (
	COST_GROUP_BY_SOURCE_ACCOUNT CostDataGroupBy = "SOURCE_ACCOUNT"
	COST_GROUP_BY_CLOUD_PROVIDER CostDataGroupBy = "CLOUD_PROVIDER"
	COST_GROUP_BY_RESOURCE_TYPE CostDataGroupBy = "RESOURCE_TYPE"
	COST_GROUP_BY_RESOURCE CostDataGroupBy = "RESOURCE"
)

// All allowed values of CostDataGroupBy enum
var AllowedCostDataGroupByEnumValues = []CostDataGroupBy{
	"SOURCE_ACCOUNT",
	"CLOUD_PROVIDER",
	"RESOURCE_TYPE",
	"RESOURCE",
}

func (v *CostDataGroupBy) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := CostDataGroupBy(value)
	for _, existing := range AllowedCostDataGroupByEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid CostDataGroupBy", value)
}

// NewCostDataGroupByFromValue returns a pointer to a valid CostDataGroupBy
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCostDataGroupByFromValue(v string) (*CostDataGroupBy, error) {
	ev := CostDataGroupBy(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for CostDataGroupBy: valid values are %v", v, AllowedCostDataGroupByEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CostDataGroupBy) IsValid() bool {
	for _, existing := range AllowedCostDataGroupByEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to CostDataGroupBy value
func (v CostDataGroupBy) Ptr() *CostDataGroupBy {
	return &v
}

type NullableCostDataGroupBy struct {
	value *CostDataGroupBy
	isSet bool
}

func (v NullableCostDataGroupBy) Get() *CostDataGroupBy {
	return v.value
}

func (v *NullableCostDataGroupBy) Set(val *CostDataGroupBy) {
	v.value = val
	v.isSet = true
}

func (v NullableCostDataGroupBy) IsSet() bool {
	return v.isSet
}

func (v *NullableCostDataGroupBy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCostDataGroupBy(val *CostDataGroupBy) *NullableCostDataGroupBy {
	return &NullableCostDataGroupBy{value: val, isSet: true}
}

func (v NullableCostDataGroupBy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCostDataGroupBy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

