/*
Eon API

The Eon.io REST API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eon

import (
	"encoding/json"
)

// checks if the ListInventoryRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ListInventoryRequest{}

// ListInventoryRequest struct for ListInventoryRequest
type ListInventoryRequest struct {
	// List of sorting options. Sorting is applied in the order passed in the list. 
	Sorts []SortResourceBy `json:"sorts,omitempty"`
	Filters *InventoryFilterConditions `json:"filters,omitempty"`
}

// NewListInventoryRequest instantiates a new ListInventoryRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewListInventoryRequest() *ListInventoryRequest {
	this := ListInventoryRequest{}
	return &this
}

// NewListInventoryRequestWithDefaults instantiates a new ListInventoryRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewListInventoryRequestWithDefaults() *ListInventoryRequest {
	this := ListInventoryRequest{}
	return &this
}

// GetSorts returns the Sorts field value if set, zero value otherwise.
func (o *ListInventoryRequest) GetSorts() []SortResourceBy {
	if o == nil || IsNil(o.Sorts) {
		var ret []SortResourceBy
		return ret
	}
	return o.Sorts
}

// GetSortsOk returns a tuple with the Sorts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListInventoryRequest) GetSortsOk() ([]SortResourceBy, bool) {
	if o == nil || IsNil(o.Sorts) {
		return nil, false
	}
	return o.Sorts, true
}

// HasSorts returns a boolean if a field has been set.
func (o *ListInventoryRequest) HasSorts() bool {
	if o != nil && !IsNil(o.Sorts) {
		return true
	}

	return false
}

// SetSorts gets a reference to the given []SortResourceBy and assigns it to the Sorts field.
func (o *ListInventoryRequest) SetSorts(v []SortResourceBy) {
	o.Sorts = v
}

// GetFilters returns the Filters field value if set, zero value otherwise.
func (o *ListInventoryRequest) GetFilters() InventoryFilterConditions {
	if o == nil || IsNil(o.Filters) {
		var ret InventoryFilterConditions
		return ret
	}
	return *o.Filters
}

// GetFiltersOk returns a tuple with the Filters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListInventoryRequest) GetFiltersOk() (*InventoryFilterConditions, bool) {
	if o == nil || IsNil(o.Filters) {
		return nil, false
	}
	return o.Filters, true
}

// HasFilters returns a boolean if a field has been set.
func (o *ListInventoryRequest) HasFilters() bool {
	if o != nil && !IsNil(o.Filters) {
		return true
	}

	return false
}

// SetFilters gets a reference to the given InventoryFilterConditions and assigns it to the Filters field.
func (o *ListInventoryRequest) SetFilters(v InventoryFilterConditions) {
	o.Filters = &v
}

func (o ListInventoryRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ListInventoryRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Sorts) {
		toSerialize["sorts"] = o.Sorts
	}
	if !IsNil(o.Filters) {
		toSerialize["filters"] = o.Filters
	}
	return toSerialize, nil
}

type NullableListInventoryRequest struct {
	value *ListInventoryRequest
	isSet bool
}

func (v NullableListInventoryRequest) Get() *ListInventoryRequest {
	return v.value
}

func (v *NullableListInventoryRequest) Set(val *ListInventoryRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableListInventoryRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableListInventoryRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListInventoryRequest(val *ListInventoryRequest) *NullableListInventoryRequest {
	return &NullableListInventoryRequest{value: val, isSet: true}
}

func (v NullableListInventoryRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListInventoryRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


