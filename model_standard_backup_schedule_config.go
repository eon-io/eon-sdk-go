/*
Eon API

The Eon.io REST API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eon

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the StandardBackupScheduleConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StandardBackupScheduleConfig{}

// StandardBackupScheduleConfig struct for StandardBackupScheduleConfig
type StandardBackupScheduleConfig struct {
	Frequency StandardBackupScheduleFrequency `json:"frequency"`
	IntervalConfig NullableStandardIntervalConfig `json:"intervalConfig,omitempty"`
	DailyConfig NullableDailyConfig `json:"dailyConfig,omitempty"`
	WeeklyConfig NullableWeeklyConfig `json:"weeklyConfig,omitempty"`
	MonthlyConfig NullableMonthlyConfig `json:"monthlyConfig,omitempty"`
	AnnuallyConfig NullableAnnuallyConfig `json:"annuallyConfig,omitempty"`
}

type _StandardBackupScheduleConfig StandardBackupScheduleConfig

// NewStandardBackupScheduleConfig instantiates a new StandardBackupScheduleConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStandardBackupScheduleConfig(frequency StandardBackupScheduleFrequency) *StandardBackupScheduleConfig {
	this := StandardBackupScheduleConfig{}
	this.Frequency = frequency
	return &this
}

// NewStandardBackupScheduleConfigWithDefaults instantiates a new StandardBackupScheduleConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStandardBackupScheduleConfigWithDefaults() *StandardBackupScheduleConfig {
	this := StandardBackupScheduleConfig{}
	return &this
}

// GetFrequency returns the Frequency field value
func (o *StandardBackupScheduleConfig) GetFrequency() StandardBackupScheduleFrequency {
	if o == nil {
		var ret StandardBackupScheduleFrequency
		return ret
	}

	return o.Frequency
}

// GetFrequencyOk returns a tuple with the Frequency field value
// and a boolean to check if the value has been set.
func (o *StandardBackupScheduleConfig) GetFrequencyOk() (*StandardBackupScheduleFrequency, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Frequency, true
}

// SetFrequency sets field value
func (o *StandardBackupScheduleConfig) SetFrequency(v StandardBackupScheduleFrequency) {
	o.Frequency = v
}

// GetIntervalConfig returns the IntervalConfig field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *StandardBackupScheduleConfig) GetIntervalConfig() StandardIntervalConfig {
	if o == nil || IsNil(o.IntervalConfig.Get()) {
		var ret StandardIntervalConfig
		return ret
	}
	return *o.IntervalConfig.Get()
}

// GetIntervalConfigOk returns a tuple with the IntervalConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StandardBackupScheduleConfig) GetIntervalConfigOk() (*StandardIntervalConfig, bool) {
	if o == nil {
		return nil, false
	}
	return o.IntervalConfig.Get(), o.IntervalConfig.IsSet()
}

// HasIntervalConfig returns a boolean if a field has been set.
func (o *StandardBackupScheduleConfig) HasIntervalConfig() bool {
	if o != nil && o.IntervalConfig.IsSet() {
		return true
	}

	return false
}

// SetIntervalConfig gets a reference to the given NullableStandardIntervalConfig and assigns it to the IntervalConfig field.
func (o *StandardBackupScheduleConfig) SetIntervalConfig(v StandardIntervalConfig) {
	o.IntervalConfig.Set(&v)
}
// SetIntervalConfigNil sets the value for IntervalConfig to be an explicit nil
func (o *StandardBackupScheduleConfig) SetIntervalConfigNil() {
	o.IntervalConfig.Set(nil)
}

// UnsetIntervalConfig ensures that no value is present for IntervalConfig, not even an explicit nil
func (o *StandardBackupScheduleConfig) UnsetIntervalConfig() {
	o.IntervalConfig.Unset()
}

// GetDailyConfig returns the DailyConfig field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *StandardBackupScheduleConfig) GetDailyConfig() DailyConfig {
	if o == nil || IsNil(o.DailyConfig.Get()) {
		var ret DailyConfig
		return ret
	}
	return *o.DailyConfig.Get()
}

// GetDailyConfigOk returns a tuple with the DailyConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StandardBackupScheduleConfig) GetDailyConfigOk() (*DailyConfig, bool) {
	if o == nil {
		return nil, false
	}
	return o.DailyConfig.Get(), o.DailyConfig.IsSet()
}

// HasDailyConfig returns a boolean if a field has been set.
func (o *StandardBackupScheduleConfig) HasDailyConfig() bool {
	if o != nil && o.DailyConfig.IsSet() {
		return true
	}

	return false
}

// SetDailyConfig gets a reference to the given NullableDailyConfig and assigns it to the DailyConfig field.
func (o *StandardBackupScheduleConfig) SetDailyConfig(v DailyConfig) {
	o.DailyConfig.Set(&v)
}
// SetDailyConfigNil sets the value for DailyConfig to be an explicit nil
func (o *StandardBackupScheduleConfig) SetDailyConfigNil() {
	o.DailyConfig.Set(nil)
}

// UnsetDailyConfig ensures that no value is present for DailyConfig, not even an explicit nil
func (o *StandardBackupScheduleConfig) UnsetDailyConfig() {
	o.DailyConfig.Unset()
}

// GetWeeklyConfig returns the WeeklyConfig field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *StandardBackupScheduleConfig) GetWeeklyConfig() WeeklyConfig {
	if o == nil || IsNil(o.WeeklyConfig.Get()) {
		var ret WeeklyConfig
		return ret
	}
	return *o.WeeklyConfig.Get()
}

// GetWeeklyConfigOk returns a tuple with the WeeklyConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StandardBackupScheduleConfig) GetWeeklyConfigOk() (*WeeklyConfig, bool) {
	if o == nil {
		return nil, false
	}
	return o.WeeklyConfig.Get(), o.WeeklyConfig.IsSet()
}

// HasWeeklyConfig returns a boolean if a field has been set.
func (o *StandardBackupScheduleConfig) HasWeeklyConfig() bool {
	if o != nil && o.WeeklyConfig.IsSet() {
		return true
	}

	return false
}

// SetWeeklyConfig gets a reference to the given NullableWeeklyConfig and assigns it to the WeeklyConfig field.
func (o *StandardBackupScheduleConfig) SetWeeklyConfig(v WeeklyConfig) {
	o.WeeklyConfig.Set(&v)
}
// SetWeeklyConfigNil sets the value for WeeklyConfig to be an explicit nil
func (o *StandardBackupScheduleConfig) SetWeeklyConfigNil() {
	o.WeeklyConfig.Set(nil)
}

// UnsetWeeklyConfig ensures that no value is present for WeeklyConfig, not even an explicit nil
func (o *StandardBackupScheduleConfig) UnsetWeeklyConfig() {
	o.WeeklyConfig.Unset()
}

// GetMonthlyConfig returns the MonthlyConfig field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *StandardBackupScheduleConfig) GetMonthlyConfig() MonthlyConfig {
	if o == nil || IsNil(o.MonthlyConfig.Get()) {
		var ret MonthlyConfig
		return ret
	}
	return *o.MonthlyConfig.Get()
}

// GetMonthlyConfigOk returns a tuple with the MonthlyConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StandardBackupScheduleConfig) GetMonthlyConfigOk() (*MonthlyConfig, bool) {
	if o == nil {
		return nil, false
	}
	return o.MonthlyConfig.Get(), o.MonthlyConfig.IsSet()
}

// HasMonthlyConfig returns a boolean if a field has been set.
func (o *StandardBackupScheduleConfig) HasMonthlyConfig() bool {
	if o != nil && o.MonthlyConfig.IsSet() {
		return true
	}

	return false
}

// SetMonthlyConfig gets a reference to the given NullableMonthlyConfig and assigns it to the MonthlyConfig field.
func (o *StandardBackupScheduleConfig) SetMonthlyConfig(v MonthlyConfig) {
	o.MonthlyConfig.Set(&v)
}
// SetMonthlyConfigNil sets the value for MonthlyConfig to be an explicit nil
func (o *StandardBackupScheduleConfig) SetMonthlyConfigNil() {
	o.MonthlyConfig.Set(nil)
}

// UnsetMonthlyConfig ensures that no value is present for MonthlyConfig, not even an explicit nil
func (o *StandardBackupScheduleConfig) UnsetMonthlyConfig() {
	o.MonthlyConfig.Unset()
}

// GetAnnuallyConfig returns the AnnuallyConfig field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *StandardBackupScheduleConfig) GetAnnuallyConfig() AnnuallyConfig {
	if o == nil || IsNil(o.AnnuallyConfig.Get()) {
		var ret AnnuallyConfig
		return ret
	}
	return *o.AnnuallyConfig.Get()
}

// GetAnnuallyConfigOk returns a tuple with the AnnuallyConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StandardBackupScheduleConfig) GetAnnuallyConfigOk() (*AnnuallyConfig, bool) {
	if o == nil {
		return nil, false
	}
	return o.AnnuallyConfig.Get(), o.AnnuallyConfig.IsSet()
}

// HasAnnuallyConfig returns a boolean if a field has been set.
func (o *StandardBackupScheduleConfig) HasAnnuallyConfig() bool {
	if o != nil && o.AnnuallyConfig.IsSet() {
		return true
	}

	return false
}

// SetAnnuallyConfig gets a reference to the given NullableAnnuallyConfig and assigns it to the AnnuallyConfig field.
func (o *StandardBackupScheduleConfig) SetAnnuallyConfig(v AnnuallyConfig) {
	o.AnnuallyConfig.Set(&v)
}
// SetAnnuallyConfigNil sets the value for AnnuallyConfig to be an explicit nil
func (o *StandardBackupScheduleConfig) SetAnnuallyConfigNil() {
	o.AnnuallyConfig.Set(nil)
}

// UnsetAnnuallyConfig ensures that no value is present for AnnuallyConfig, not even an explicit nil
func (o *StandardBackupScheduleConfig) UnsetAnnuallyConfig() {
	o.AnnuallyConfig.Unset()
}

func (o StandardBackupScheduleConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StandardBackupScheduleConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["frequency"] = o.Frequency
	if o.IntervalConfig.IsSet() {
		toSerialize["intervalConfig"] = o.IntervalConfig.Get()
	}
	if o.DailyConfig.IsSet() {
		toSerialize["dailyConfig"] = o.DailyConfig.Get()
	}
	if o.WeeklyConfig.IsSet() {
		toSerialize["weeklyConfig"] = o.WeeklyConfig.Get()
	}
	if o.MonthlyConfig.IsSet() {
		toSerialize["monthlyConfig"] = o.MonthlyConfig.Get()
	}
	if o.AnnuallyConfig.IsSet() {
		toSerialize["annuallyConfig"] = o.AnnuallyConfig.Get()
	}
	return toSerialize, nil
}

func (o *StandardBackupScheduleConfig) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"frequency",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varStandardBackupScheduleConfig := _StandardBackupScheduleConfig{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	//decoder.DisallowUnknownFields()
	err = decoder.Decode(&varStandardBackupScheduleConfig)

	if err != nil {
		return err
	}

	*o = StandardBackupScheduleConfig(varStandardBackupScheduleConfig)

	return err
}

type NullableStandardBackupScheduleConfig struct {
	value *StandardBackupScheduleConfig
	isSet bool
}

func (v NullableStandardBackupScheduleConfig) Get() *StandardBackupScheduleConfig {
	return v.value
}

func (v *NullableStandardBackupScheduleConfig) Set(val *StandardBackupScheduleConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableStandardBackupScheduleConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableStandardBackupScheduleConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStandardBackupScheduleConfig(val *StandardBackupScheduleConfig) *NullableStandardBackupScheduleConfig {
	return &NullableStandardBackupScheduleConfig{value: val, isSet: true}
}

func (v NullableStandardBackupScheduleConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStandardBackupScheduleConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


