/*
Eon API

The Eon.io REST API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eon

import (
	"encoding/json"
	"fmt"
)

// GcpNetworkType The type of the cloud account
type GcpNetworkType string

// List of GcpNetworkType
const (
	AZURE_NETWORK_TYPE_UNSPECIFIED GcpNetworkType = "UNSPECIFIED"
	AZURE_NETWORK_TYPE_PUBLIC GcpNetworkType = "PUBLIC"
	AZURE_NETWORK_TYPE_PRIVATE GcpNetworkType = "PRIVATE"
)

// All allowed values of GcpNetworkType enum
var AllowedGcpNetworkTypeEnumValues = []GcpNetworkType{
	"UNSPECIFIED",
	"PUBLIC",
	"PRIVATE",
}

func (v *GcpNetworkType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := GcpNetworkType(value)
	for _, existing := range AllowedGcpNetworkTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid GcpNetworkType", value)
}

// NewGcpNetworkTypeFromValue returns a pointer to a valid GcpNetworkType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewGcpNetworkTypeFromValue(v string) (*GcpNetworkType, error) {
	ev := GcpNetworkType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for GcpNetworkType: valid values are %v", v, AllowedGcpNetworkTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v GcpNetworkType) IsValid() bool {
	for _, existing := range AllowedGcpNetworkTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to GcpNetworkType value
func (v GcpNetworkType) Ptr() *GcpNetworkType {
	return &v
}

type NullableGcpNetworkType struct {
	value *GcpNetworkType
	isSet bool
}

func (v NullableGcpNetworkType) Get() *GcpNetworkType {
	return v.value
}

func (v *NullableGcpNetworkType) Set(val *GcpNetworkType) {
	v.value = val
	v.isSet = true
}

func (v NullableGcpNetworkType) IsSet() bool {
	return v.isSet
}

func (v *NullableGcpNetworkType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGcpNetworkType(val *GcpNetworkType) *NullableGcpNetworkType {
	return &NullableGcpNetworkType{value: val, isSet: true}
}

func (v NullableGcpNetworkType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGcpNetworkType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

