/*
Eon API

The Eon.io REST API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eon

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the EnvironmentCondition type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EnvironmentCondition{}

// EnvironmentCondition struct for EnvironmentCondition
type EnvironmentCondition struct {
	Operator     ScalarOperators `json:"operator"`
	Environments []Environment   `json:"environments"`
}

type _EnvironmentCondition EnvironmentCondition

// NewEnvironmentCondition instantiates a new EnvironmentCondition object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEnvironmentCondition(operator ScalarOperators, environments []Environment) *EnvironmentCondition {
	this := EnvironmentCondition{}
	this.Operator = operator
	this.Environments = environments
	return &this
}

// NewEnvironmentConditionWithDefaults instantiates a new EnvironmentCondition object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEnvironmentConditionWithDefaults() *EnvironmentCondition {
	this := EnvironmentCondition{}
	return &this
}

// GetOperator returns the Operator field value
func (o *EnvironmentCondition) GetOperator() ScalarOperators {
	if o == nil {
		var ret ScalarOperators
		return ret
	}

	return o.Operator
}

// GetOperatorOk returns a tuple with the Operator field value
// and a boolean to check if the value has been set.
func (o *EnvironmentCondition) GetOperatorOk() (*ScalarOperators, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Operator, true
}

// SetOperator sets field value
func (o *EnvironmentCondition) SetOperator(v ScalarOperators) {
	o.Operator = v
}

// GetEnvironments returns the Environments field value
func (o *EnvironmentCondition) GetEnvironments() []Environment {
	if o == nil {
		var ret []Environment
		return ret
	}

	return o.Environments
}

// GetEnvironmentsOk returns a tuple with the Environments field value
// and a boolean to check if the value has been set.
func (o *EnvironmentCondition) GetEnvironmentsOk() ([]Environment, bool) {
	if o == nil {
		return nil, false
	}
	return o.Environments, true
}

// SetEnvironments sets field value
func (o *EnvironmentCondition) SetEnvironments(v []Environment) {
	o.Environments = v
}

func (o EnvironmentCondition) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EnvironmentCondition) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["operator"] = o.Operator
	toSerialize["environments"] = o.Environments
	return toSerialize, nil
}

func (o *EnvironmentCondition) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"operator",
		"environments",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varEnvironmentCondition := _EnvironmentCondition{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	//decoder.DisallowUnknownFields()
	err = decoder.Decode(&varEnvironmentCondition)

	if err != nil {
		return err
	}

	*o = EnvironmentCondition(varEnvironmentCondition)

	return err
}

type NullableEnvironmentCondition struct {
	value *EnvironmentCondition
	isSet bool
}

func (v NullableEnvironmentCondition) Get() *EnvironmentCondition {
	return v.value
}

func (v *NullableEnvironmentCondition) Set(val *EnvironmentCondition) {
	v.value = val
	v.isSet = true
}

func (v NullableEnvironmentCondition) IsSet() bool {
	return v.isSet
}

func (v *NullableEnvironmentCondition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnvironmentCondition(val *EnvironmentCondition) *NullableEnvironmentCondition {
	return &NullableEnvironmentCondition{value: val, isSet: true}
}

func (v NullableEnvironmentCondition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnvironmentCondition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
