/*
Eon API

The Eon.io REST API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eon

import (
	"encoding/json"
)

// checks if the SourceStorage type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SourceStorage{}

// SourceStorage Details about storage at the source.
type SourceStorage struct {
	// Total storage size at the source, in bytes.
	SizeBytes *int64 `json:"sizeBytes,omitempty"`
}

// NewSourceStorage instantiates a new SourceStorage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSourceStorage() *SourceStorage {
	this := SourceStorage{}
	return &this
}

// NewSourceStorageWithDefaults instantiates a new SourceStorage object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSourceStorageWithDefaults() *SourceStorage {
	this := SourceStorage{}
	return &this
}

// GetSizeBytes returns the SizeBytes field value if set, zero value otherwise.
func (o *SourceStorage) GetSizeBytes() int64 {
	if o == nil || IsNil(o.SizeBytes) {
		var ret int64
		return ret
	}
	return *o.SizeBytes
}

// GetSizeBytesOk returns a tuple with the SizeBytes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SourceStorage) GetSizeBytesOk() (*int64, bool) {
	if o == nil || IsNil(o.SizeBytes) {
		return nil, false
	}
	return o.SizeBytes, true
}

// HasSizeBytes returns a boolean if a field has been set.
func (o *SourceStorage) HasSizeBytes() bool {
	if o != nil && !IsNil(o.SizeBytes) {
		return true
	}

	return false
}

// SetSizeBytes gets a reference to the given int64 and assigns it to the SizeBytes field.
func (o *SourceStorage) SetSizeBytes(v int64) {
	o.SizeBytes = &v
}

func (o SourceStorage) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SourceStorage) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.SizeBytes) {
		toSerialize["sizeBytes"] = o.SizeBytes
	}
	return toSerialize, nil
}

type NullableSourceStorage struct {
	value *SourceStorage
	isSet bool
}

func (v NullableSourceStorage) Get() *SourceStorage {
	return v.value
}

func (v *NullableSourceStorage) Set(val *SourceStorage) {
	v.value = val
	v.isSet = true
}

func (v NullableSourceStorage) IsSet() bool {
	return v.isSet
}

func (v *NullableSourceStorage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSourceStorage(val *SourceStorage) *NullableSourceStorage {
	return &NullableSourceStorage{value: val, isSet: true}
}

func (v NullableSourceStorage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSourceStorage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


